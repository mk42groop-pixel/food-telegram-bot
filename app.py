import os
import logging
import asyncio
from flask import Flask, request, jsonify, render_template
import requests
import json
from datetime import datetime, timedelta
import time
import schedule
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-100362423055')  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.group = Config.TELEGRAM_GROUP
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                message_id = result['result']['message_id']
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_msg}")
                return False
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
            return False
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            url = f"https://api.telegram.org/bot{self.token}/getChat"
            response = requests.post(url, json={'chat_id': self.channel}, timeout=10)
            chat_info = response.json()
            
            if chat_info.get('ok'):
                return {
                    "status": "success", 
                    "bot": bot_info['result']['username'],
                    "channel": chat_info['result'].get('title', 'Unknown'),
                    "channel_id": self.channel
                }
            else:
                return {"status": "error", "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"}
                
        except Exception as e:
            return {"status": "error", "message": str(e)}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.deepseek_key = Config.DEEPSEEK_API_KEY
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def generate_with_yandex_gpt(self, prompt, system_prompt=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            messages = []
            if system_prompt:
                messages.append({
                    'role': 'system',
                    'text': system_prompt
                })
            else:
                messages.append({
                    'role': 'system',
                    'text': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏, –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.'
                })
            
            messages.append({
                'role': 'user',
                'text': prompt
            })
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 800
                },
                'messages': messages
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                text = result['result']['alternatives'][0]['message']['text']
                logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return text
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None
    
    def generate_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompts = [
            "–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ –Ω–∞ —É—Ç—Ä–æ. –û–ø–∏—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑—É –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.",
            "–ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–¥–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å. –£–∫–∞–∂–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.",
            "–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –≤–∫—É—Å–Ω–æ–≥–æ –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞."
        ]
        import random
        prompt = random.choice(prompts)
        
        content = self.generate_with_yandex_gpt(
            prompt, 
            "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–≤—Ç—Ä–∞–∫–æ–≤."
        )
        
        if content:
            return f"üç≥ –ó–ê–í–¢–†–ê–ö\n\n{content}\n\n#–∑–∞–≤—Ç—Ä–∞–∫ #—Ä–µ—Ü–µ–ø—Ç #–∑–¥–æ—Ä–æ–≤–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #—É—Ç—Ä–æ"
        return self.get_fallback_content('breakfast')
    
    def generate_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞"""
        prompts = [
            "–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–µ–¥–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. –û–ø–∏—à–∏ –±–ª—é–¥–æ, –µ–≥–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.",
            "–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π. –£–∫–∞–∂–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è.",
            "–ù–∞–ø–∏—à–∏ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –æ–±–µ–¥–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–ª—é–¥–∞ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º."
        ]
        import random
        prompt = random.choice(prompts)
        
        content = self.generate_with_yandex_gpt(
            prompt,
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π —Ä–µ—Ü–µ–ø—Ç—ã –æ–±–µ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—ã—â–∞—é—Ç –∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–ª—å–∑—É."
        )
        
        if content:
            return f"üç≤ –û–ë–ï–î\n\n{content}\n\n#–æ–±–µ–¥ #—Ä–µ—Ü–µ–ø—Ç #–ø–∏—Ç–∞–Ω–∏–µ #–∑–¥–æ—Ä–æ–≤—å–µ"
        return self.get_fallback_content('lunch')
    
    def generate_science(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompts = [
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—É—á–Ω–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –∫—É–ª–∏–Ω–∞—Ä–∏–∏. –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤—ã–≤–æ–¥—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.",
            "–ù–∞–ø–∏—à–∏ –æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º —Ñ–∞–∫—Ç–µ –∏–∑ –Ω–∞—É–∫–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏. –û–±—ä—è—Å–Ω–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.",
            "–ü–æ–¥–µ–ª–∏—Å—å –Ω–∞—É—á–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –ø–∏—â–µ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑–µ."
        ]
        import random
        prompt = random.choice(prompts)
        
        content = self.generate_with_yandex_gpt(
            prompt,
            "–¢—ã —É—á–µ–Ω—ã–π-–¥–∏–µ—Ç–æ–ª–æ–≥. –û–±—ä—è—Å–Ω—è–π –Ω–∞—É—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º."
        )
        
        if content:
            return f"üî¨ –ù–ê–£–ö–ê\n\n{content}\n\n#–Ω–∞—É–∫–∞ #–ø–∏—Ç–∞–Ω–∏–µ #—Ñ–∞–∫—Ç—ã #–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        return self.get_fallback_content('science')
    
    def generate_interval(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
        prompts = [
            "–ù–∞–ø–∏—à–∏ –æ –ø–æ–ª—å–∑–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞–Ω–∏—è. –û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞.",
            "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã –∑–¥–æ—Ä–æ–≤—å—é."
        ]
        import random
        prompt = random.choice(prompts)
        
        content = self.generate_with_yandex_gpt(
            prompt,
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ö—Ä–æ–Ω–æ–ø–∏—Ç–∞–Ω–∏—é –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º—É. –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ timing –ø–∏—Ç–∞–Ω–∏—è."
        )
        
        if content:
            return f"‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ\n\n{content}\n\n#–∏–Ω—Ç–µ—Ä–≤–∞–ª #–ø–∏—Ç–∞–Ω–∏–µ #–º–µ—Ç–∞–±–æ–ª–∏–∑–º #–∑–¥–æ—Ä–æ–≤—å–µ"
        return self.get_fallback_content('interval')
    
    def generate_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–∂–∏–Ω–∞"""
        prompts = [
            "–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ª–µ–≥–∫–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ —É–∂–∏–Ω–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –û–ø–∏—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ.",
            "–ü—Ä–∏–¥—É–º–∞–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. –û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.",
            "–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –±–æ–≥–∞—Ç–æ–≥–æ —Ç—Ä–∏–ø—Ç–æ—Ñ–∞–Ω–æ–º –∏ –º–∞–≥–Ω–∏–µ–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        ]
        import random
        prompt = random.choice(prompts)
        
        content = self.generate_with_yandex_gpt(
            prompt,
            "–¢—ã –¥–∏–µ—Ç–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≤–µ—á–µ—Ä–Ω–µ–º –ø–∏—Ç–∞–Ω–∏–∏. –°–æ–∑–¥–∞–≤–∞–π –ª–µ–≥–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —É–∂–∏–Ω–æ–≤."
        )
        
        if content:
            return f"üçΩÔ∏è –£–ñ–ò–ù\n\n{content}\n\n#—É–∂–∏–Ω #—Ä–µ—Ü–µ–ø—Ç #–∑–¥–æ—Ä–æ–≤—å–µ #—Å–æ–Ω"
        return self.get_fallback_content('dinner')
    
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        prompts = [
            "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏–ª–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.",
            "–ü–æ–¥–µ–ª–∏—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.",
            "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ —Ü–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ –∫—É–ª–∏–Ω–∞—Ä–∏–∏."
        ]
        import random
        prompt = random.choice(prompts)
        
        content = self.generate_with_yandex_gpt(
            prompt,
            "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —Ü–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç."
        )
        
        if content:
            return f"üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê\n\n{content}\n\n#—Å–æ–≤–µ—Ç #—ç–∫—Å–ø–µ—Ä—Ç #–∫—É–ª–∏–Ω–∞—Ä–∏—è #–∑–¥–æ—Ä–æ–≤–æ–µ–ø–∏—Ç–∞–Ω–∏–µ"
        return self.get_fallback_content('expert_advice')
    
    def get_fallback_content(self, content_type):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞"""
        fallbacks = {
            'breakfast': "üç≥ –ó–ê–í–¢–†–ê–ö\n\n–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞! –û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏ - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è.\n\n#–∑–∞–≤—Ç—Ä–∞–∫ #–∑–¥–æ—Ä–æ–≤–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #—É—Ç—Ä–æ",
            'lunch': "üç≤ –û–ë–ï–î\n\n–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–µ–¥ - –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏!\n\n#–æ–±–µ–¥ #–ø–∏—Ç–∞–Ω–∏–µ #–∑–¥–æ—Ä–æ–≤—å–µ",
            'science': "üî¨ –ù–ê–£–ö–ê\n\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç: —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–π –≤–µ—Å.\n\n#–Ω–∞—É–∫–∞ #–ø–∏—Ç–∞–Ω–∏–µ #—Ñ–∞–∫—Ç—ã",
            'interval': "‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ\n\n–ü–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 3-4 —á–∞—Å–∞.\n\n#–∏–Ω—Ç–µ—Ä–≤–∞–ª #–ø–∏—Ç–∞–Ω–∏–µ #–º–µ—Ç–∞–±–æ–ª–∏–∑–º",
            'dinner': "üçΩÔ∏è –£–ñ–ò–ù\n\n–õ–µ–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ—Ç–¥—ã—Ö—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.\n\n#—É–∂–∏–Ω #–∑–¥–æ—Ä–æ–≤—å–µ #—Å–æ–Ω",
            'expert_advice': "üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê\n\n–ü–µ–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã - —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç.\n\n#—Å–æ–≤–µ—Ç #—ç–∫—Å–ø–µ—Ä—Ç #–∑–¥–æ—Ä–æ–≤—å–µ"
        }
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {content_type}")
        return fallbacks.get(content_type, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
class ContentScheduler:
    def __init__(self):
        self.schedule = {
            "07:00": {"type": "breakfast", "name": "üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "generator": "generate_breakfast"},
            "12:00": {"type": "lunch", "name": "üç≤ –û–±–µ–¥", "generator": "generate_lunch"},
            "16:00": {"type": "science", "name": "üî¨ –ù–∞—É–∫–∞", "generator": "generate_science"},
            "18:00": {"type": "interval", "name": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª", "generator": "generate_interval"},
            "19:00": {"type": "dinner", "name": "üçΩÔ∏è –£–∂–∏–Ω", "generator": "generate_dinner"},
            "21:00": {"type": "expert_advice", "name": "üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "generator": "generate_expert_advice"}
        }
        self.is_running = False
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def get_schedule(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        return self.schedule
    
    def get_next_event(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        now = datetime.now()
        current_time = now.strftime("%H:%M")
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
        times_today = [t for t in self.schedule.keys() if t > current_time]
        if times_today:
            next_time = min(times_today)
            return next_time, self.schedule[next_time]
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–≤—Ç—Ä–∞
        first_time_tomorrow = min(self.schedule.keys())
        return first_time_tomorrow, self.schedule[first_time_tomorrow]
    
    def schedule_job(self, time_str, content_type):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            method_name = self.schedule[time_str]['generator']
            method = getattr(content_gen, method_name)
            
            def job():
                logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {content_type}")
                content = method()
                if content:
                    success = elite_channel.send_to_telegram(content)
                    if success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {content_type}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {content_type}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {content_type}")
            
            schedule.every().day.at(time_str).do(job)
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {time_str} - {content_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {time_str}: {str(e)}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        for time_str, event in self.schedule.items():
            self.schedule_job(time_str, event['type'])
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scheduler():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        thread = Thread(target=run_scheduler, daemon=True)
        thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        schedule.clear()
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
elite_channel = EliteChannel()
content_gen = ContentGenerator()
content_scheduler = ContentScheduler()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
content_scheduler.start_scheduler()

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    next_time, next_event = content_scheduler.get_next_event()
    return render_template('index.html', 
                         schedule=content_scheduler.get_schedule(),
                         next_time=next_time,
                         next_event=next_event,
                         channel_info=elite_channel.test_connection())

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    connection_test = elite_channel.test_connection()
    next_time, next_event = content_scheduler.get_next_event()
    
    return jsonify({
        "telegram_channel_id": Config.TELEGRAM_CHANNEL,
        "bot_token_exists": bool(Config.TELEGRAM_BOT_TOKEN),
        "scheduler_status": "running" if content_scheduler.is_running else "stopped",
        "connection_test": connection_test,
        "next_scheduled_post": f"{next_time} - {next_event['name']}",
        "current_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "environment": "production" if os.getenv('PRODUCTION') else "development"
    })

@app.route('/send-now/<content_type>')
def send_now(content_type):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content = None
        
        if content_type == 'breakfast':
            content = content_gen.generate_breakfast()
        elif content_type == 'lunch':
            content = content_gen.generate_lunch()
        elif content_type == 'science':
            content = content_gen.generate_science()
        elif content_type == 'dinner':
            content = content_gen.generate_dinner()
        elif content_type == 'interval':
            content = content_gen.generate_interval()
        elif content_type == 'expert_advice':
            content = content_gen.generate_expert_advice()
        else:
            return jsonify({
                "status": "error", 
                "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}",
                "available_types": list(content_scheduler.schedule.keys())
            })
        
        if not content:
            return jsonify({
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
            })
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        success = elite_channel.send_to_telegram(content)
        
        if success:
            return jsonify({
                "status": "success",
                "message": f"–ö–æ–Ω—Ç–µ–Ω—Ç '{content_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª",
                "channel_id": Config.TELEGRAM_CHANNEL,
                "content_preview": content[:100] + "..."
            })
        else:
            return jsonify({
                "status": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '{content_type}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send-now: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
    test_message = (
        f"‚úÖ –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n\n"
        f"–ö–∞–Ω–∞–ª: @ppsupershef\n"
        f"ID: {Config.TELEGRAM_CHANNEL}\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
        f"–ë–æ—Ç: @ppsupershef_bot\n\n"
        f"#—Ç–µ—Å—Ç #–∫–∞–Ω–∞–ª #—Ä–∞–±–æ—Ç–∞–µ—Ç"
    )
    
    success = elite_channel.send_to_telegram(test_message)
    connection_info = elite_channel.test_connection()
    
    return jsonify({
        "status": "success" if success else "error",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "connection_info": connection_info,
        "channel_id": Config.TELEGRAM_CHANNEL,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/schedule')
def get_schedule():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    next_time, next_event = content_scheduler.get_next_event()
    
    return jsonify({
        "schedule": content_scheduler.get_schedule(),
        "next_post": {
            "time": next_time,
            "event": next_event,
            "timestamp": datetime.now().isoformat()
        },
        "scheduler_status": "running" if content_scheduler.is_running else "stopped"
    })

@app.route('/force-send/<content_type>')
def force_send(content_type):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {content_type}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection = elite_channel.test_connection()
    if connection.get('status') != 'success':
        return jsonify({
            "status": "error",
            "message": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∫–∞–Ω–∞–ª—É",
            "connection_info": connection
        })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    return send_now(content_type)

@app.route('/restart-scheduler')
def restart_scheduler():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    content_scheduler.stop_scheduler()
    time.sleep(2)
    content_scheduler.start_scheduler()
    
    return jsonify({
        "status": "success",
        "message": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω",
        "scheduler_status": "running"
    })

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    connection = elite_channel.test_connection()
    
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "telegram_connection": connection,
        "scheduler_running": content_scheduler.is_running,
        "active_tasks": len(schedule.get_jobs()),
        "memory_usage": "OK"
    })

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"status": "error", "message": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {str(error)}")
    return jsonify({"status": "error", "message": "Internal server error"}), 500

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–æ–º ID: {Config.TELEGRAM_CHANNEL}")
    logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {list(content_scheduler.get_schedule().keys())}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_test = elite_channel.test_connection()
    if connection_test.get('status') == 'success':
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É —É—Å–ø–µ—à–Ω–æ: {connection_test['channel']}")
    else:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º: {connection_test}")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
