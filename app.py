import os
import logging
import requests
import json
import time
import schedule
import hashlib
import re
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps
import sqlite3
from contextlib import contextmanager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    API_SECRET = os.getenv('API_SECRET', 'your-secret-key-here')
    MAX_REQUESTS_PER_MINUTE = 30
    RATE_LIMIT_WINDOW = 60
    
    # –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏
    SERVER_TZ = pytz.timezone('UTC')
    KEMEROVO_TZ = pytz.timezone('Asia/Novokuznetsk')
    
    # Render –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    RENDER_APP_URL = os.getenv('RENDER_APP_URL', '')

# –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ò–°–ê
class ServiceMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.request_count = 0
        self.last_keep_alive = None
        self.keep_alive_count = 0
    
    def increment_request(self):
        self.request_count += 1
    
    def update_keep_alive(self):
        self.last_keep_alive = datetime.now()
        self.keep_alive_count += 1
    
    def get_status(self):
        return {
            "status": "healthy",
            "uptime_seconds": (datetime.now() - self.start_time).total_seconds(),
            "requests_handled": self.request_count,
            "keep_alive_count": self.keep_alive_count,
            "last_keep_alive": self.last_keep_alive.isoformat() if self.last_keep_alive else None,
            "timestamp": datetime.now().isoformat()
        }

service_monitor = ServiceMonitor()

# –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
class Database:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        with self.get_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS content_cache (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_hash TEXT UNIQUE,
                    content_type TEXT,
                    content_text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.execute('''
                CREATE TABLE IF NOT EXISTS channel_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    member_count INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
    
    @contextmanager
    def get_connection(self):
        conn = sqlite3.connect('channel.db', check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
            conn.commit()
        except Exception:
            conn.rollback()
            raise
        finally:
            conn.close()

# –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
class SecurityManager:
    _instance = None
    _lock = Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(SecurityManager, cls).__new__(cls)
                cls._instance.request_log = {}
                cls._instance.blocked_ips = set()
            return cls._instance
    
    def check_rate_limit(self, ip_address):
        current_time = time.time()
        if ip_address in self.blocked_ips:
            return False
        
        if ip_address not in self.request_log:
            self.request_log[ip_address] = []
        
        self.request_log[ip_address] = [
            req_time for req_time in self.request_log[ip_address]
            if current_time - req_time < Config.RATE_LIMIT_WINDOW
        ]
        
        if len(self.request_log[ip_address]) >= Config.MAX_REQUESTS_PER_MINUTE:
            self.blocked_ips.add(ip_address)
            logger.warning(f"üö® IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {ip_address}")
            return False
        
        self.request_log[ip_address].append(current_time)
        return True

def require_api_key(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key') or request.args.get('api_key')
        if not api_key or api_key != Config.API_SECRET:
            return jsonify({"status": "error", "message": "Invalid API key"}), 401
        return f(*args, **kwargs)
    return decorated_function

def rate_limit(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        service_monitor.increment_request()
        ip_address = request.remote_addr
        security_manager = SecurityManager()
        
        if not security_manager.check_rate_limit(ip_address):
            return jsonify({
                "status": "error", 
                "message": "Rate limit exceeded. Try again later."
            }), 429
        
        return f(*args, **kwargs)
    return decorated_function

# –°–ò–°–¢–ï–ú–ê –í–†–ï–ú–ï–ù–ò
class TimeManager:
    @staticmethod
    def kemerovo_to_server(kemerovo_time_str):
        try:
            today = datetime.now(Config.KEMEROVO_TZ).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TZ.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TZ)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str

    @staticmethod
    def get_current_times():
        server_now = datetime.now(Config.SERVER_TZ)
        kemerovo_now = datetime.now(Config.KEMEROVO_TZ)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_date': server_now.strftime('%Y-%m-%d'),
            'kemerovo_date': kemerovo_now.strftime('%Y-%m-%d')
        }

    @staticmethod
    def get_kemerovo_weekday():
        return datetime.now(Config.KEMEROVO_TZ).weekday()

# –ú–ï–ù–ï–î–ñ–ï–† –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
class VisualContentManager:
    FOOD_PHOTOS = {
        'breakfast': [
            'https://images.unsplash.com/photo-1551782450-17144efb9c50?w=600',
            'https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=600',
            'https://images.unsplash.com/photo-1570197788417-0e82375c9371?w=600',
        ],
        'lunch': [
            'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=600',
            'https://images.unsplash.com/photo-1606755962773-d324e74532a7?w=600',
            'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=600',
        ],
        'dinner': [
            'https://images.unsplash.com/photo-1563379926898-05f4575a45d8?w=600',
            'https://images.unsplash.com/photo-1598214886806-c87b84b707f5?w=600',
            'https://images.unsplash.com/photo-1555939592-8a1039b86bc4?w=600',
        ],
        'dessert': [
            'https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?w=600',
            'https://images.unsplash.com/photo-1571115764595-644a1f56a55c?w=600',
            'https://images.unsplash.com/photo-1565958011703-44f9829ba187?w=600',
        ],
        'family': [
            'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=600',
            'https://images.unsplash.com/photo-1546833999-b9f581a1996d?w=600',
        ],
        'advice': [
            'https://images.unsplash.com/photo-1490818387583-1baba5e638af?w=600',
            'https://images.unsplash.com/photo-1550581190-9c1c47bdfba3?w=600',
            'https://images.unsplash.com/photo-1505576399279-565b52d4ac71?w=600',
        ]
    }
    
    EMOJI_CATEGORIES = {
        'breakfast': ['üç≥', 'ü•û', 'üç≤', 'ü•£', '‚òï', 'ü•ê', 'üçì', 'ü•ë'],
        'lunch': ['üçù', 'üçõ', 'ü•ò', 'üçú', 'üç±', 'ü•ó', 'üåØ', 'ü•™'],
        'dinner': ['üåô', 'üçΩÔ∏è', 'ü•ò', 'üç¥', '‚ú®', 'üç∑', 'üïØÔ∏è', 'üåü'],
        'dessert': ['üç∞', 'üéÇ', 'üçÆ', 'üç®', 'üßÅ', 'üç´', 'üç©', 'ü•Æ'],
        'family': ['üë®‚Äçüë©‚Äçüëß‚Äçüë¶', '‚ù§Ô∏è', 'üè†', 'üíï', '‚ú®', 'üéâ', 'ü§ó', 'üíù'],
        'advice': ['üí°', 'üéØ', 'üìö', 'üß†', 'üí™', 'ü•ó', 'üíß', 'üë®‚Äç‚öïÔ∏è'],
    }
    
    def get_photo_for_recipe(self, recipe_type):
        photo_category = self._map_recipe_to_photo(recipe_type)
        photos = self.FOOD_PHOTOS.get(photo_category, self.FOOD_PHOTOS['breakfast'])
        return random.choice(photos)
    
    def _map_recipe_to_photo(self, recipe_type):
        mapping = {
            'neuro_breakfast': 'breakfast',
            'energy_breakfast': 'breakfast',
            'protein_breakfast': 'breakfast',
            'veggie_breakfast': 'breakfast',
            'carbs_breakfast': 'breakfast',
            'family_breakfast': 'family',
            'sunday_breakfast': 'breakfast',
            'focus_lunch': 'lunch',
            'protein_lunch': 'lunch',
            'veggie_lunch': 'lunch',
            'carbs_lunch': 'lunch',
            'family_lunch': 'family',
            'sunday_lunch': 'lunch',
            'brain_dinner': 'dinner',
            'protein_dinner': 'dinner',
            'veggie_dinner': 'dinner',
            'family_dinner': 'family',
            'week_prep_dinner': 'dinner',
            'friday_dessert': 'dessert',
            'saturday_dessert': 'dessert',
            'sunday_dessert': 'dessert',
            'neuro_advice': 'advice',
            'protein_advice': 'advice',
            'veggie_advice': 'advice',
            'carbs_advice': 'advice',
            'water_advice': 'advice',
            'family_advice': 'advice',
            'planning_advice': 'advice'
        }
        return mapping.get(recipe_type, 'breakfast')
    
    def generate_attractive_post(self, title, content, recipe_type, benefits):
        photo_url = self.get_photo_for_recipe(recipe_type)
        main_emoji = random.choice(self.EMOJI_CATEGORIES.get('breakfast', ['üçΩÔ∏è']))
        family_emoji = random.choice(self.EMOJI_CATEGORIES['family'])
        
        formatted_content = self._format_with_emoji(content)
        
        post = f"""üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –°–ï–ú–¨–ò</b>

{main_emoji} <b>{title}</b> {family_emoji}

<a href="{photo_url}">üñºÔ∏è –§–û–¢–û –ë–õ–Æ–î–ê</a>

{formatted_content}

üí° <b>–ü–û–õ–¨–ó–ê –î–õ–Ø –°–ï–ú–¨–ò:</b>
{benefits}

‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ãÖ‚àô‚àò ‚òÖ ‚àò‚àô‚ãÖ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ

üí´ <b>–ü–∏—Ç–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏ —É–∫—Ä–µ–ø–ª—è–µ—Ç —Å–µ–º—å—é!</b>

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã!</b> ‚Üí @ppsupershef_chat

üòã –í–∫—É—Å–Ω–æ | üí™ –ü–æ–ª–µ–∑–Ω–æ | üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º—å–∏ | ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ | üí∞ –î–æ—Å—Ç—É–ø–Ω–æ

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""
        
        return post
    
    def _format_with_emoji(self, text):
        lines = text.split('\n')
        formatted = ""
        for line in lines:
            if line.strip() and any(keyword in line.lower() for keyword in ['‚Ä¢', '-', '1.', '2.', '3.']):
                emoji = random.choice(['ü•¨', 'ü•ï', 'ü•ö', 'üçó', 'üêü', 'üßÄ', 'üåΩ', 'üçÖ'])
                formatted += f"{emoji} {line}\n"
            else:
                formatted += f"{line}\n"
        return formatted

# –¢–ï–õ–ï–ì–†–ê–ú –ú–ï–ù–ï–î–ñ–ï–†
class TelegramManager:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.sent_hashes = set()
    
    def send_message(self, text, parse_mode='HTML'):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            source = "manual" if "–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢" in text or "–†–£–ß–ù–û–ô –ü–û–°–¢" in text else "scheduled"
            logger.info(f"üì§ [{source}] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.token or self.token == 'your-telegram-bot-token':
                logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
                return False
                
            if not self.channel:
                logger.error("‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return False

            content_hash = hashlib.md5(text.encode()).hexdigest()
            if content_hash in self.sent_hashes:
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return False
            
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': False
            }
            
            logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API...")
            response = requests.post(url, json=payload, timeout=30)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
                
            result = response.json()
            logger.info(f"üì® –û—Ç–≤–µ—Ç Telegram: {result}")
            
            if result.get('ok'):
                self.sent_hashes.add(content_hash)
                logger.info(f"‚úÖ [{source}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
                return True
            else:
                error_description = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_description}")
                return False
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
    
    def get_member_count(self):
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {'chat_id': self.channel}
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            return result.get('result', 0) if result.get('ok') else 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0

# –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ù–¢–ï–ù–¢–ê
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.visual_manager = VisualContentManager()
        self.db = Database()
    
    def generate_with_gpt(self, prompt):
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1500
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ–º–µ–π."
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None
    
    def generate_neuro_breakfast(self):
        content = """
üß† –û–ú–õ–ï–¢ –° –ê–í–û–ö–ê–î–û –ò –°–ï–ú–ï–ù–ê–ú–ò –õ–¨–ù–ê

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –Ø–π—Ü–∞ - 8 —à—Ç
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 2 —à—Ç
‚Ä¢ –°–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - 2 —Å—Ç.–ª.
‚Ä¢ –ú–æ–ª–æ–∫–æ 2.5% - 100 –º–ª
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ - 150 –≥
‚Ä¢ –°–æ–ª—å, –ø–µ—Ä–µ—Ü - –ø–æ –≤–∫—É—Å—É
‚Ä¢ –ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 1 —á.–ª.

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω):
1. –Ø–π—Ü–∞ –≤–∑–±–∏—Ç—å —Å –º–æ–ª–æ–∫–æ–º, —Å–æ–ª—å—é –∏ –ø–µ—Ä—Ü–µ–º
2. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç
3. –ê–≤–æ–∫–∞–¥–æ –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏, –ø–æ–º–∏–¥–æ—Ä—ã —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –ø–æ–ø–æ–ª–∞–º
4. –†–∞–∑–æ–≥—Ä–µ—Ç—å —Å–∫–æ–≤–æ—Ä–æ–¥—É —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º
5. –í—ã–ª–∏—Ç—å —è–∏—á–Ω—É—é —Å–º–µ—Å—å, –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 3 –º–∏–Ω—É—Ç—ã
6. –î–æ–±–∞–≤–∏—Ç—å –∞–≤–æ–∫–∞–¥–æ –∏ –ø–æ–º–∏–¥–æ—Ä—ã, –≥–æ—Ç–æ–≤–∏—Ç—å –µ—â–µ 4-5 –º–∏–Ω—É—Ç –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π
7. –ü–æ–¥–∞–≤–∞—Ç—å —Å—Ä–∞–∑—É, –ø–æ—Å—ã–ø–∞–≤ —Å–≤–µ–∂–µ–π –∑–µ–ª–µ–Ω—å—é
"""
        
        benefits = """‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ ü•ö –Ø–π—Ü–∞ - —Ö–æ–ª–∏–Ω –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - –û–º–µ–≥–∞-3 –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~320 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ: 15 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö: –û–ú–õ–ï–¢ –° –ê–í–û–ö–ê–î–û –ò –°–ï–ú–ï–ù–ê–ú–ò –õ–¨–ù–ê",
            content,
            "neuro_breakfast",
            benefits
        )
    
    def generate_neuro_lunch(self):
        content = """
üß† –õ–û–°–û–°–¨ –° –ö–ò–ù–û–ê –ò –ë–†–û–ö–ö–û–õ–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –õ–æ—Å–æ—Å—å - 600 –≥
‚Ä¢ –ö–∏–Ω–æ–∞ - 200 –≥
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 1 –∫–æ—á–∞–Ω
‚Ä¢ –õ–∏–º–æ–Ω - 1 —à—Ç
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 3 –∑—É–±—á–∏–∫–∞
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 2 —Å—Ç.–ª.
‚Ä¢ –°–ø–µ—Ü–∏–∏: —É–∫—Ä–æ–ø, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (25 –º–∏–Ω):
1. –ö–∏–Ω–æ–∞ –ø—Ä–æ–º—ã—Ç—å, –≤–∞—Ä–∏—Ç—å 15 –º–∏–Ω—É—Ç
2. –ë—Ä–æ–∫–∫–æ–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ —Å–æ—Ü–≤–µ—Ç–∏—è, –±–ª–∞–Ω—à–∏—Ä–æ–≤–∞—Ç—å 5 –º–∏–Ω—É—Ç
3. –õ–æ—Å–æ—Å—å –Ω–∞—Ä–µ–∑–∞—Ç—å —Å—Ç–µ–π–∫–∞–º–∏, –ø–æ—Å–æ–ª–∏—Ç—å, –ø–æ–ø–µ—Ä—á–∏—Ç—å
4. –û–±–∂–∞—Ä–∏—Ç—å –ª–æ—Å–æ—Å—å —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –ø–æ 4 –º–∏–Ω—É—Ç—ã
5. –î–æ–±–∞–≤–∏—Ç—å —á–µ—Å–Ω–æ–∫ –∏ –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫
6. –ü–æ–¥–∞–≤–∞—Ç—å —Å –∫–∏–Ω–æ–∞ –∏ –±—Ä–æ–∫–∫–æ–ª–∏
"""
        
        benefits = """‚Ä¢ üêü –õ–æ—Å–æ—Å—å - –û–º–µ–≥–∞-3 –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ üåæ –ö–∏–Ω–æ–∞ - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ ü•¨ –ë—Ä–æ–∫–∫–æ–ª–∏ - –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~450 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ: 25 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –û–ë–ï–î –î–õ–Ø –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–ò: –õ–û–°–û–°–¨ –° –ö–ò–ù–û–ê",
            content,
            "focus_lunch",
            benefits
        )
    
    def generate_neuro_dinner(self):
        content = """
üß† –ì–†–ï–ß–ù–ï–í–ê–Ø –ö–ê–®–ê –° –ì–†–ò–ë–ê–ú–ò –ò –õ–¨–ù–Ø–ù–´–ú –ú–ê–°–õ–û–ú

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –ì—Ä–µ—á–∫–∞ - 300 –≥
‚Ä¢ –®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 400 –≥
‚Ä¢ –õ—É–∫ - 2 —à—Ç
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç
‚Ä¢ –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - 2 —Å—Ç.–ª.
‚Ä¢ –ó–µ–ª–µ–Ω—å - –ø—É—á–æ–∫
‚Ä¢ –°–æ–µ–≤—ã–π —Å–æ—É—Å - 2 —Å—Ç.–ª.

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (20 –º–∏–Ω):
1. –ì—Ä–µ—á–∫—É –æ—Ç–≤–∞—Ä–∏—Ç—å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
2. –õ—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å –æ–±–∂–∞—Ä–∏—Ç—å –¥–æ –º—è–≥–∫–æ—Å—Ç–∏
3. –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∏–±—ã, –∂–∞—Ä–∏—Ç—å 10 –º–∏–Ω—É—Ç
4. –°–º–µ—à–∞—Ç—å –≥—Ä–µ—á–∫—É —Å –æ–≤–æ—â–∞–º–∏ –∏ –≥—Ä–∏–±–∞–º–∏
5. –ó–∞–ø—Ä–∞–≤–∏—Ç—å –ª—å–Ω—è–Ω—ã–º –º–∞—Å–ª–æ–º –∏ —Å–æ–µ–≤—ã–º —Å–æ—É—Å–æ–º
6. –ü–æ—Å—ã–ø–∞—Ç—å –∑–µ–ª–µ–Ω—å—é –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π
"""
        
        benefits = """‚Ä¢ üåæ –ì—Ä–µ—á–∫–∞ - –º–∞–≥–Ω–∏–π –¥–ª—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üçÑ –ì—Ä–∏–±—ã - –≤–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B
‚Ä¢ üåø –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - –û–º–µ–≥–∞-3
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~280 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –õ–µ–≥–∫–æ: 20 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –£–ñ–ò–ù –î–õ–Ø –ú–û–ó–ì–ê: –ì–†–ï–ß–ö–ê –° –ì–†–ò–ë–ê–ú–ò",
            content,
            "brain_dinner",
            benefits
        )
    
    def generate_protein_breakfast(self):
        content = """
üí™ –¢–í–û–†–û–ñ–ù–ê–Ø –ó–ê–ü–ï–ö–ê–ù–ö–ê –° –ú–ò–ù–î–ê–õ–ï–ú –ò –°–ï–ú–ï–ù–ê–ú–ò –ß–ò–ê

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 600 –≥
‚Ä¢ –Ø–π—Ü–∞ - 3 —à—Ç
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 50 –≥
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.
‚Ä¢ –í–∞–Ω–∏–ª–∏–Ω - —â–µ–ø–æ—Ç–∫–∞
‚Ä¢ –°–º–µ—Ç–∞–Ω–∞ 15% - –¥–ª—è —Å–º–∞–∑—ã–≤–∞–Ω–∏—è

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (20 –º–∏–Ω + 25 –º–∏–Ω –≤—ã–ø–µ–∫–∞–Ω–∏–µ):
1. –¢–≤–æ—Ä–æ–≥ –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Ç–æ –¥–ª—è –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏
2. –î–æ–±–∞–≤–∏—Ç—å —è–π—Ü–∞, –º–µ–¥, –≤–∞–Ω–∏–ª–∏–Ω - —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
3. –ú–∏–Ω–¥–∞–ª—å –∏–∑–º–µ–ª—å—á–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–≤–æ—Ä–æ–∂–Ω—É—é –º–∞—Å—Å—É
4. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–Ω–∞ —á–∏–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–±—É—Ö–∞–Ω–∏—è
5. –§–æ—Ä–º—É —Å–º–∞–∑–∞—Ç—å –º–∞—Å–ª–æ–º, –≤—ã–ª–æ–∂–∏—Ç—å –º–∞—Å—Å—É
6. –°–º–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å–º–µ—Ç–∞–Ω–æ–π –¥–ª—è —Ä—É–º—è–Ω–æ–π –∫–æ—Ä–æ—á–∫–∏
7. –í—ã–ø–µ–∫–∞—Ç—å 25 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
"""
        
        benefits = """‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ - 25 –≥ –±–µ–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ü–∏—é
‚Ä¢ ü•ú –ú–∏–Ω–¥–∞–ª—å - –≤–∏—Ç–∞–º–∏–Ω –ï –∏ –º–∞–≥–Ω–∏–π
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ —á–∏–∞ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –∏ –û–º–µ–≥–∞-3
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~280 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ù–∞ –≤–µ—Å—å –¥–µ–Ω—å: —ç–Ω–µ—Ä–≥–∏–∏ —Ö–≤–∞—Ç–∏—Ç –¥–æ –æ–±–µ–¥–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "üí™ –ë–ï–õ–ö–û–í–´–ô –ó–ê–í–¢–†–ê–ö: –¢–í–û–†–û–ñ–ù–ê–Ø –ó–ê–ü–ï–ö–ê–ù–ö–ê –° –ú–ò–ù–î–ê–õ–ï–ú",
            content,
            "protein_breakfast",
            benefits
        )
    
    def generate_protein_lunch(self):
        content = """
üí™ –ö–£–†–ò–ù–ê–Ø –ì–†–£–î–ö–ê –° –ù–£–¢–û–ú –ò –û–í–û–©–ê–ú–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 800 –≥
‚Ä¢ –ù—É—Ç –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - 400 –≥
‚Ä¢ –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü - 3 —à—Ç
‚Ä¢ –¶—É–∫–∏–Ω–∏ - 2 —à—Ç
‚Ä¢ –õ—É–∫ - 2 —à—Ç
‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 3 —Å—Ç.–ª.
‚Ä¢ –°–ø–µ—Ü–∏–∏: –ø–∞–ø—Ä–∏–∫–∞, –∫—É—Ä–∫—É–º–∞, —Å–æ–ª—å

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (30 –º–∏–Ω—É—Ç):
1. –ö—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏
2. –û–≤–æ—â–∏ –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—Ä—É–ø–Ω—ã–º–∏ –∫—É—Å–∫–∞–º–∏
3. –û–±–∂–∞—Ä–∏—Ç—å –∫—É—Ä–∏—Ü—É –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–π –∫–æ—Ä–æ—á–∫–∏
4. –î–æ–±–∞–≤–∏—Ç—å –ª—É–∫ –∏ —Ç–æ–º–∞—Ç–Ω—É—é –ø–∞—Å—Ç—É, –æ–±–∂–∞—Ä–∏—Ç—å 3 –º–∏–Ω—É—Ç—ã
5. –î–æ–±–∞–≤–∏—Ç—å –æ–≤–æ—â–∏ –∏ –Ω—É—Ç, —Ç—É—à–∏—Ç—å 20 –º–∏–Ω—É—Ç
6. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∏ –∏ –∑–µ–ª–µ–Ω—å
"""
        
        benefits = """‚Ä¢ üçó –ö—É—Ä–∏—Ü–∞ - 30 –≥ –±–µ–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ü–∏—é
‚Ä¢ üå± –ù—É—Ç - —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–ª–æ–∫ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∞
‚Ä¢ ü•¨ –û–≤–æ—â–∏ - –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~350 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –°—ã—Ç–Ω—ã–π –æ–±–µ–¥: 30 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üí™ –ë–ï–õ–ö–û–í–´–ô –û–ë–ï–î: –ö–£–†–ò–ù–ê–Ø –ì–†–£–î–ö–ê –° –ù–£–¢–û–ú",
            content,
            "protein_lunch",
            benefits
        )
    
    def generate_protein_dinner(self):
        content = """
üí™ –¢–£–®–ï–ù–ê–Ø –ò–ù–î–ï–ô–ö–ê –° –ß–ï–ß–ï–í–ò–¶–ï–ô

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –§–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏ - 600 –≥
‚Ä¢ –ß–µ—á–µ–≤–∏—Ü–∞ –∫—Ä–∞—Å–Ω–∞—è - 300 –≥
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 2 —à—Ç
‚Ä¢ –°–µ–ª—å–¥–µ—Ä–µ–π - 2 —Å—Ç–µ–±–ª—è
‚Ä¢ –õ—É–∫ - 2 —à—Ç
‚Ä¢ –ë—É–ª—å–æ–Ω –æ–≤–æ—â–Ω–æ–π - 500 –º–ª
‚Ä¢ –°–ø–µ—Ü–∏–∏: —Ä–æ–∑–º–∞—Ä–∏–Ω, —Ç–∏–º—å—è–Ω, —Å–æ–ª—å

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (35 –º–∏–Ω—É—Ç):
1. –ò–Ω–¥–µ–π–∫—É –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏, –æ–±–∂–∞—Ä–∏—Ç—å
2. –õ—É–∫, –º–æ—Ä–∫–æ–≤—å –∏ —Å–µ–ª—å–¥–µ—Ä–µ–π –æ–±–∂–∞—Ä–∏—Ç—å –¥–æ –º—è–≥–∫–æ—Å—Ç–∏
3. –î–æ–±–∞–≤–∏—Ç—å —á–µ—á–µ–≤–∏—Ü—É –∏ –±—É–ª—å–æ–Ω, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–∏–ø–µ–Ω–∏—è
4. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–π–∫—É –∏ —Å–ø–µ—Ü–∏–∏
5. –¢—É—à–∏—Ç—å –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ 25 –º–∏–Ω—É—Ç
6. –ü–æ–¥–∞–≤–∞—Ç—å —Å –∑–µ–ª–µ–Ω—å—é
"""
        
        benefits = """‚Ä¢ ü¶É –ò–Ω–¥–µ–π–∫–∞ - –Ω–µ–∂–∏—Ä–Ω—ã–π –±–µ–ª–æ–∫
‚Ä¢ üå± –ß–µ—á–µ–≤–∏—Ü–∞ - –∂–µ–ª–µ–∑–æ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∞
‚Ä¢ ü•ï –û–≤–æ—â–∏ - –∫–æ–º–ø–ª–µ–∫—Å –≤–∏—Ç–∞–º–∏–Ω–æ–≤
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~320 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π —É–∂–∏–Ω: 35 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üí™ –ë–ï–õ–ö–û–í–´–ô –£–ñ–ò–ù: –ò–ù–î–ï–ô–ö–ê –° –ß–ï–ß–ï–í–ò–¶–ï–ô",
            content,
            "protein_dinner",
            benefits
        )
    
    def generate_veggie_breakfast(self):
        content = """
ü•¨ –°–ú–£–ó–ò-–ë–û–£–õ –° –°–ï–ú–ï–ù–ê–ú–ò –ß–ò–ê –ò –Ø–ì–û–î–ê–ú–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –®–ø–∏–Ω–∞—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π - 200 –≥
‚Ä¢ –ë–∞–Ω–∞–Ω - 2 —à—Ç
‚Ä¢ –Ø–≥–æ–¥—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 300 –≥
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 4 —Å—Ç.–ª.
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ - 400 –º–ª
‚Ä¢ –ú–µ–¥ - 4 —á.–ª.
‚Ä¢ –ì—Ä–∞–Ω–æ–ª–∞ - 100 –≥

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):
1. –®–ø–∏–Ω–∞—Ç, –±–∞–Ω–∞–Ω, —è–≥–æ–¥—ã –≤–∑–±–∏—Ç—å –≤ –±–ª–µ–Ω–¥–µ—Ä–µ
2. –î–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ –∏ –º–µ–¥
3. –°–µ–º–µ–Ω–∞ —á–∏–∞ –∑–∞–ª–∏—Ç—å –≤–æ–¥–æ–π –Ω–∞ 5 –º–∏–Ω—É—Ç
4. –†–∞–∑–ª–∏—Ç—å —Å–º—É–∑–∏ –ø–æ —Ç–∞—Ä–µ–ª–∫–∞–º
5. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±—É—Ö—à–∏–µ —Å–µ–º–µ–Ω–∞ —á–∏–∞
6. –ü–æ—Å—ã–ø–∞—Ç—å –≥—Ä–∞–Ω–æ–ª–æ–π –∏ —Å–≤–µ–∂–∏–º–∏ —è–≥–æ–¥–∞–º–∏
"""
        
        benefits = """‚Ä¢ ü•¨ –®–ø–∏–Ω–∞—Ç - –∂–µ–ª–µ–∑–æ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã
‚Ä¢ üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ —á–∏–∞ - –û–º–µ–≥–∞-3
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~250 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ: 10 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•¨ –û–í–û–©–ù–û–ô –ó–ê–í–¢–†–ê–ö: –°–ú–£–ó–ò-–ë–û–£–õ –° –ß–ò–ê",
            content,
            "veggie_breakfast",
            benefits
        )
    
    def generate_veggie_lunch(self):
        content = """
ü•¨ –û–í–û–©–ù–û–ï –†–ê–ì–£ –° –§–ê–°–û–õ–¨–Æ –ò –ë–†–û–ö–ö–û–õ–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –§–∞—Å–æ–ª—å –∫—Ä–∞—Å–Ω–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - 400 –≥
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 1 –∫–æ—á–∞–Ω (400 –≥)
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 2 —à—Ç
‚Ä¢ –õ—É–∫ - 2 —à—Ç
‚Ä¢ –¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ - 300 –≥
‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 2 —Å—Ç.–ª.
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 3 –∑—É–±—á–∏–∫–∞
‚Ä¢ –°–ø–µ—Ü–∏–∏: –∫—É—Ä–∫—É–º–∞, –ø–∞–ø—Ä–∏–∫–∞, —Å–æ–ª—å

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (30 –º–∏–Ω—É—Ç):
1. –õ—É–∫ –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏, –º–æ—Ä–∫–æ–≤—å - –ø–æ–ª—É–∫—Ä—É–∂–∏—è–º–∏
2. –ë—Ä–æ–∫–∫–æ–ª–∏ –∏ —Ü–≤–µ—Ç–Ω—É—é –∫–∞–ø—É—Å—Ç—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ —Å–æ—Ü–≤–µ—Ç–∏—è
3. –û–±–∂–∞—Ä–∏—Ç—å –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 5 –º–∏–Ω—É—Ç
4. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–º–∞—Ç–Ω—É—é –ø–∞—Å—Ç—É, –æ–±–∂–∞—Ä–∏–≤–∞—Ç—å 2 –º–∏–Ω—É—Ç—ã
5. –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–∫–∫–æ–ª–∏ –∏ —Ü–≤–µ—Ç–Ω—É—é –∫–∞–ø—É—Å—Ç—É, —Ç—É—à–∏—Ç—å 10 –º–∏–Ω—É—Ç
6. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞—Å–æ–ª—å (–±–µ–∑ –∂–∏–¥–∫–æ—Å—Ç–∏) –∏ —Å–ø–µ—Ü–∏–∏
7. –¢—É—à–∏—Ç—å –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π 15 –º–∏–Ω—É—Ç –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ
8. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–π —á–µ—Å–Ω–æ–∫
"""
        
        benefits = """‚Ä¢ ü•¨ –ë—Ä–æ–∫–∫–æ–ª–∏ - –≤–∏—Ç–∞–º–∏–Ω –° –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã
‚Ä¢ üå± –§–∞—Å–æ–ª—å - —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–ª–æ–∫ (15 –≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é)
‚Ä¢ ü•ï –û–≤–æ—â–∏ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~250 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –°—ã—Ç–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ: 350 –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•¨ –û–í–û–©–ù–û–ô –û–ë–ï–î: –†–ê–ì–£ –° –§–ê–°–û–õ–¨–Æ –ò –ë–†–û–ö–ö–û–õ–ò",
            content,
            "veggie_lunch",
            benefits
        )
    
    def generate_veggie_dinner(self):
        content = """
ü•¨ –°–ê–õ–ê–¢ –° –ê–í–û–ö–ê–î–û, –ù–£–¢–û–ú –ò –†–£–ö–ö–û–õ–û–ô

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 2 —à—Ç
‚Ä¢ –ù—É—Ç –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - 400 –≥
‚Ä¢ –†—É–∫–∫–æ–ª–∞ - 200 –≥
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ - 300 –≥
‚Ä¢ –û–≥—É—Ä—Ü—ã - 2 —à—Ç
‚Ä¢ –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 3 —Å—Ç.–ª.
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 4 —Å—Ç.–ª.
‚Ä¢ –°–ø–µ—Ü–∏–∏: —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –æ—Ä–µ–≥–∞–Ω–æ

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –ê–≤–æ–∫–∞–¥–æ –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏
2. –ü–æ–º–∏–¥–æ—Ä—ã —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –ø–æ–ø–æ–ª–∞–º
3. –û–≥—É—Ä—Ü—ã –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—Ä—É–∂–æ—á–∫–∞–º–∏
4. –°–º–µ—à–∞—Ç—å –≤—Å–µ –æ–≤–æ—â–∏ —Å –Ω—É—Ç–æ–º –∏ —Ä—É–∫–∫–æ–ª–æ–π
5. –ó–∞–ø—Ä–∞–≤–∏—Ç—å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º
6. –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∏, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
"""
        
        benefits = """‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã
‚Ä¢ üå± –ù—É—Ç - —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–ª–æ–∫
‚Ä¢ ü•¨ –†—É–∫–∫–æ–ª–∞ - –≤–∏—Ç–∞–º–∏–Ω –ö –∏ –∫–∞–ª—å—Ü–∏–π
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~300 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –õ–µ–≥–∫–∏–π —É–∂–∏–Ω: 15 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•¨ –û–í–û–©–ù–û–ô –£–ñ–ò–ù: –°–ê–õ–ê–¢ –° –ê–í–û–ö–ê–î–û –ò –ù–£–¢–û–ú",
            content,
            "veggie_dinner",
            benefits
        )
    
    def generate_carbs_breakfast(self):
        content = """
üç† –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ê–Ø –û–í–°–Ø–ù–ö–ê –° –°–ï–ú–ï–ù–ê–ú–ò –ß–ò–ê

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 200 –≥
‚Ä¢ –ú–æ–ª–æ–∫–æ/–≤–æ–¥–∞ - 800 –º–ª
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 4 —á.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 200 –≥
‚Ä¢ –ú–µ–¥ - 4 —á.–ª.
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - 1 —á.–ª.
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 50 –≥

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è –∑–∞–ª–∏—Ç—å –º–æ–ª–æ–∫–æ–º/–≤–æ–¥–æ–π
2. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–Ω–∞ —á–∏–∞ –∏ –∫–æ—Ä–∏—Ü—É
3. –í–∞—Ä–∏—Ç—å –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ 10 –º–∏–Ω—É—Ç, –ø–æ–º–µ—à–∏–≤–∞—è
4. –Ø–≥–æ–¥—ã —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
5. –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ –∏–∑–º–µ–ª—å—á–∏—Ç—å
6. –í –≥–æ—Ç–æ–≤—É—é –∫–∞—à—É –¥–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã –∏ –º–µ–¥
7. –ü–æ–¥–∞–≤–∞—Ç—å, –ø–æ—Å—ã–ø–∞–≤ –æ—Ä–µ—Ö–∞–º–∏
"""
        
        benefits = """‚Ä¢ üåæ –û–≤—Å—è–Ω–∫–∞ - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ —á–∏–∞ - –û–º–µ–≥–∞-3 –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∞
‚Ä¢ üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –∏ –≤–∏—Ç–∞–º–∏–Ω—ã
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~180 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ: 15 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üç† –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ê–Ø –û–í–°–Ø–ù–ö–ê –° –°–ï–ú–ï–ù–ê–ú–ò –ß–ò–ê",
            content,
            "carbs_breakfast",
            benefits
        )
    
    def generate_carbs_lunch(self):
        content = """
üçö –ë–£–†–´–ô –†–ò–° –° –ö–£–†–ò–¶–ï–ô –ò –û–í–û–©–ê–ú–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –ë—É—Ä—ã–π —Ä–∏—Å - 300 –≥
‚Ä¢ –ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ - 500 –≥
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 2 —à—Ç
‚Ä¢ –õ—É–∫ - 2 —à—Ç
‚Ä¢ –ì–æ—Ä–æ—à–µ–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π - 200 –≥
‚Ä¢ –°–æ–µ–≤—ã–π —Å–æ—É—Å - 3 —Å—Ç.–ª.
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 3 –∑—É–±—á–∏–∫–∞
‚Ä¢ –ò–º–±–∏—Ä—å - 1 —Å–º

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (35 –º–∏–Ω—É—Ç):
1. –†–∏—Å –æ—Ç–≤–∞—Ä–∏—Ç—å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
2. –ö—É—Ä–∏—Ü—É –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏, –æ–±–∂–∞—Ä–∏—Ç—å
3. –õ—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å –æ–±–∂–∞—Ä–∏—Ç—å –¥–æ –º—è–≥–∫–æ—Å—Ç–∏
4. –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ—à–µ–∫, —á–µ—Å–Ω–æ–∫ –∏ –∏–º–±–∏—Ä—å
5. –°–º–µ—à–∞—Ç—å —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Ä–∏—Å–æ–º
6. –ó–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–µ–≤—ã–º —Å–æ—É—Å–æ–º, –ø—Ä–æ–≥—Ä–µ—Ç—å 5 –º–∏–Ω—É—Ç
"""
        
        benefits = """‚Ä¢ üåæ –ë—É—Ä—ã–π —Ä–∏—Å - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ üçó –ö—É—Ä–∏—Ü–∞ - –±–µ–ª–æ–∫ –¥–ª—è —Å—ã—Ç–æ—Å—Ç–∏
‚Ä¢ ü•ï –û–≤–æ—â–∏ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~320 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –æ–±–µ–¥: 35 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üçö –£–ì–õ–ï–í–û–î–ù–´–ô –û–ë–ï–î: –ë–£–†–´–ô –†–ò–° –° –ö–£–†–ò–¶–ï–ô",
            content,
            "carbs_lunch",
            benefits
        )
    
    def generate_carbs_dinner(self):
        content = """
ü•î –ó–ê–ü–ï–ß–ï–ù–ù–´–ô –ö–ê–†–¢–û–§–ï–õ–¨ –° –¢–í–û–†–û–ì–û–ú –ò –ó–ï–õ–ï–ù–¨–Æ

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 1 –∫–≥
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 400 –≥
‚Ä¢ –£–∫—Ä–æ–ø - –ø—É—á–æ–∫
‚Ä¢ –ü–µ—Ç—Ä—É—à–∫–∞ - –ø—É—á–æ–∫
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 3 –∑—É–±—á–∏–∫–∞
‚Ä¢ –°–º–µ—Ç–∞–Ω–∞ - 200 –≥
‚Ä¢ –°–ø–µ—Ü–∏–∏: —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –ø–∞–ø—Ä–∏–∫–∞

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (40 –º–∏–Ω—É—Ç):
1. –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –≤—ã–º—ã—Ç—å, –Ω–∞—Ä–µ–∑–∞—Ç—å –¥–æ–ª—å–∫–∞–º–∏
2. –í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–µ–Ω—å, –ø–æ—Å–æ–ª–∏—Ç—å, –ø–æ–ø–µ—Ä—á–∏—Ç—å
3. –ó–∞–ø–µ–∫–∞—Ç—å 30 –º–∏–Ω—É—Ç –ø—Ä–∏ 200¬∞C –¥–æ —Ä—É–º—è–Ω–æ—Å—Ç–∏
4. –¢–≤–æ—Ä–æ–≥ —Å–º–µ—à–∞—Ç—å —Å –∏–∑–º–µ–ª—å—á–µ–Ω–Ω–æ–π –∑–µ–ª–µ–Ω—å—é –∏ —á–µ—Å–Ω–æ–∫–æ–º
5. –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ—Ç–∞–Ω—É, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
6. –ü–æ–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Å —Ç–≤–æ—Ä–æ–∂–Ω—ã–º —Å–æ—É—Å–æ–º
"""
        
        benefits = """‚Ä¢ ü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - –∫–∞–ª–∏–π –∏ —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ - –±–µ–ª–æ–∫ –∏ –∫–∞–ª—å—Ü–∏–π
‚Ä¢ üåø –ó–µ–ª–µ–Ω—å - –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~220 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –°—ã—Ç–Ω—ã–π —É–∂–∏–Ω: 40 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•î –£–ì–õ–ï–í–û–î–ù–´–ô –£–ñ–ò–ù: –ó–ê–ü–ï–ß–ï–ù–ù–´–ô –ö–ê–†–¢–û–§–ï–õ–¨",
            content,
            "carbs_dinner",
            benefits
        )
    
    def generate_family_cooking(self):
        content = """
üë®‚Äçüç≥ –ß–ï–ß–ï–í–ò–ß–ù–´–ï –ö–û–¢–õ–ï–¢–´ –° –ë–†–û–ö–ö–û–õ–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–º–µ–π–Ω–æ–π –≥–æ—Ç–æ–≤–∫–∏:
‚Ä¢ –ß–µ—á–µ–≤–∏—Ü–∞ –∫—Ä–∞—Å–Ω–∞—è - 300 –≥
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 300 g
‚Ä¢ –õ—É–∫ - 1 —à—Ç
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç
‚Ä¢ –Ø–π—Ü–æ - 2 —à—Ç
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 2 —Å—Ç.–ª.
‚Ä¢ –ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è - 4 —Å—Ç.–ª.
‚Ä¢ –°–ø–µ—Ü–∏–∏: –∑–∏—Ä–∞, –∫–æ—Ä–∏–∞–Ω–¥—Ä, —Å–æ–ª—å

–°–µ–º–µ–π–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (40 –º–∏–Ω—É—Ç):

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (15 –º–∏–Ω—É—Ç):
1. –î–ï–¢–ò: –ø—Ä–æ–º—ã—Ç—å —á–µ—á–µ–≤–∏—Ü—É, —Ä–∞–∑–æ–±—Ä–∞—Ç—å –±—Ä–æ–∫–∫–æ–ª–∏ –Ω–∞ —Å–æ—Ü–≤–µ—Ç–∏—è
2. –†–û–î–ò–¢–ï–õ–ò: –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å –Ω–∞—Ä–µ–∑–∞—Ç—å –º–µ–ª–∫–∏–º–∏ –∫—É–±–∏–∫–∞–º–∏
3. –í–ú–ï–°–¢–ï: –æ—Ç–≤–∞—Ä–∏—Ç—å —á–µ—á–µ–≤–∏—Ü—É –¥–æ –º—è–≥–∫–æ—Å—Ç–∏ (15 –º–∏–Ω—É—Ç)

–§–æ—Ä–º–æ–≤–∫–∞ –∫–æ—Ç–ª–µ—Ç (15 –º–∏–Ω—É—Ç):
4. –†–û–î–ò–¢–ï–õ–ò: –±—Ä–æ–∫–∫–æ–ª–∏ –±–ª–∞–Ω—à–∏—Ä–æ–≤–∞—Ç—å 3 –º–∏–Ω—É—Ç—ã, –∏–∑–º–µ–ª—å—á–∏—Ç—å
5. –í–ú–ï–°–¢–ï: —Å–º–µ—à–∞—Ç—å —á–µ—á–µ–≤–∏—Ü—É, –æ–≤–æ—â–∏, —è–π—Ü–∞, —Å–µ–º–µ–Ω–∞ —á–∏–∞
6. –î–ï–¢–ò: –¥–æ–±–∞–≤–ª—è—Ç—å –º—É–∫—É, –≤—ã–º–µ—à–∏–≤–∞—Ç—å "—Ç–µ—Å—Ç–æ"
7. –í–ú–ï–°–¢–ï: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã, –æ–±–≤–∞–ª—è—Ç—å –≤ –º—É–∫–µ

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):
8. –†–û–î–ò–¢–ï–õ–ò: –æ–±–∂–∞—Ä–∏—Ç—å –∫–æ—Ç–ª–µ—Ç—ã —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
9. –†–û–î–ò–¢–ï–õ–ò: –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ –¥—É—Ö–æ–≤–∫–µ 10 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C
"""
        
        benefits = """‚Ä¢ üë∂ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–µ–ª–∫–∞–º–∏
‚Ä¢ üí¨ –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—á–µ—á–µ–≤–∏—Ü–∞, —á–∏–∞)
‚Ä¢ üçΩÔ∏è –ì–æ—Ä–¥–æ—Å—Ç—å –∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ –±–ª—é–¥–æ
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~220 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: 40 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "üë®‚Äçüç≥ –ì–û–¢–û–í–ò–ú –í–ú–ï–°–¢–ï: –ß–ï–ß–ï–í–ò–ß–ù–´–ï –ö–û–¢–õ–ï–¢–´ –° –ë–†–û–ö–ö–û–õ–ò",
            content,
            "family_lunch",
            benefits
        )
    
    def generate_friday_dessert(self):
        content = """
üç∞ –¢–í–û–†–û–ñ–ù–û-–ë–ê–ù–ê–ù–û–í–´–ï –†–û–õ–õ–´ –° –°–ï–ú–ï–ù–ê–ú–ò –ß–ò–ê

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–¥–æ—Å—Ç–∏:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 400 g
‚Ä¢ –ë–∞–Ω–∞–Ω—ã - 3 —à—Ç
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ –ö–æ–∫–æ—Å–æ–≤–∞—è —Å—Ç—Ä—É–∂–∫–∞ - 50 –≥
‚Ä¢ –õ–∞–≤–∞—à —Ç–æ–Ω–∫–∏–π - 2 —à—Ç
‚Ä¢ –í–∞–Ω–∏–ª–∏–Ω - —â–µ–ø–æ—Ç–∫–∞

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω + –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ):
1. –ë–∞–Ω–∞–Ω—ã —Ä–∞–∑–º—è—Ç—å –≤–∏–ª–∫–æ–π –≤ –ø—é—Ä–µ
2. –¢–≤–æ—Ä–æ–≥ —Å–º–µ—à–∞—Ç—å —Å –±–∞–Ω–∞–Ω–æ–≤—ã–º –ø—é—Ä–µ
3. –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥, –≤–∞–Ω–∏–ª–∏–Ω –∏ —Å–µ–º–µ–Ω–∞ —á–∏–∞, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
4. –õ–∞–≤–∞—à –Ω–∞–º–∞–∑–∞—Ç—å —Ç–≤–æ—Ä–æ–∂–Ω–æ–π –Ω–∞—á–∏–Ω–∫–æ–π
5. –ü–æ—Å—ã–ø–∞—Ç—å –∫–æ–∫–æ—Å–æ–≤–æ–π —Å—Ç—Ä—É–∂–∫–æ–π
6. –ü–ª–æ—Ç–Ω–æ –∑–∞–≤–µ—Ä–Ω—É—Ç—å —Ä—É–ª–µ—Ç–æ–º
7. –û—Ö–ª–∞–¥–∏—Ç—å 1 —á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ
8. –ù–∞—Ä–µ–∑–∞—Ç—å –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä—É–ª–µ—Ç–∏–∫–∞–º–∏
"""
        
        benefits = """‚Ä¢ üçå –ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—å –∏–∑ –±–∞–Ω–∞–Ω–æ–≤
‚Ä¢ üßÄ –ö–∞–ª—å—Ü–∏–π –¥–ª—è –∫–æ—Å—Ç–µ–π –¥–µ—Ç–µ–π
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ —á–∏–∞ - –û–º–µ–≥–∞-3 –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ ‚ùå –ë–µ–∑ –≤—ã–ø–µ—á–∫–∏ –∏ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~180 —Ä—É–±–ª–µ–π"""
        
        return self.visual_manager.generate_attractive_post(
            "üç∞ –ü–Ø–¢–ù–ò–ß–ù–´–ô –î–ï–°–ï–†–¢: –¢–í–û–†–û–ñ–ù–û-–ë–ê–ù–ê–ù–û–í–´–ï –†–û–õ–õ–´",
            content,
            "friday_dessert",
            benefits
        )
    
    def generate_sunday_breakfast(self):
        content = """
‚òÄÔ∏è –°–´–†–ù–ò–ö–ò –° –°–ï–ú–ï–ù–ê–ú–ò –õ–¨–ù–ê –ò –Ø–ì–û–î–ê–ú–ò

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é (4 —á–µ–ª):
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 9% - 600 –≥
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è - 5 —Å—Ç.–ª. + 2 —Å—Ç.–ª. –¥–ª—è –ø–∞–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –°–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - 2 —Å—Ç.–ª.
‚Ä¢ –ú–µ–¥ - 3 —Å—Ç.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã —Å–≤–µ–∂–∏–µ/–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 200 –≥
‚Ä¢ –°–º–µ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏

–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (25 –º–∏–Ω):
1. –¢–≤–æ—Ä–æ–≥ –≤—ã–ª–æ–∂–∏—Ç—å –≤ –≥–ª—É–±–æ–∫—É—é –º–∏—Å–∫—É, —Ä–∞–∑–º—è—Ç—å –≤–∏–ª–∫–æ–π
2. –î–æ–±–∞–≤–∏—Ç—å —è–π—Ü–∞, –º–µ–¥, —Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—Å—ã–ø–∞—Ç—å 5 —Å—Ç.–ª. –º—É–∫–∏, –∑–∞–º–µ—Å–∏—Ç—å —Ç–µ—Å—Ç–æ
4. –°—Ç–æ–ª –ø–æ—Å—ã–ø–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–π—Å—è –º—É–∫–æ–π, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–±–∞—Å–∫—É
5. –ù–∞—Ä–µ–∑–∞—Ç—å –∫–æ–ª–±–∞—Å–∫—É –Ω–∞ 12 —á–∞—Å—Ç–µ–π, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—ã—Ä–Ω–∏–∫–∏
6. –†–∞–∑–æ–≥—Ä–µ—Ç—å —Å–∫–æ–≤–æ—Ä–æ–¥—É —Å –º–∞—Å–ª–æ–º –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ
7. –û–±–∂–∞—Ä–∏–≤–∞—Ç—å —Å—ã—Ä–Ω–∏–∫–∏ 4-5 –º–∏–Ω—É—Ç –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–π –∫–æ—Ä–æ—á–∫–∏
8. –ü–æ–¥–∞–≤–∞—Ç—å —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π –∏ —è–≥–æ–¥–∞–º–∏
"""
        
        benefits = """‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ - –∫–∞–ª—å—Ü–∏–π –¥–ª—è —Ä–æ—Å—Ç–∞ –¥–µ—Ç–µ–π
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - –û–º–µ–≥–∞-3 –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–∑–≥–∞
‚Ä¢ üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –∏ –≤–∏—Ç–∞–º–∏–Ω—ã
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~240 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ: 25 –º–∏–Ω—É—Ç"""
        
        return self.visual_manager.generate_attractive_post(
            "‚òÄÔ∏è –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß: –°–´–†–ù–ò–ö–ò –° –°–ï–ú–ï–ù–ê–ú–ò –õ–¨–ù–ê",
            content,
            "sunday_breakfast",
            benefits
        )

    def generate_neuro_advice(self):
        content = """
üß† –ö–ê–ö –ï–î–ê –í–õ–ò–Ø–ï–¢ –ù–ê –í–ê–® –ú–û–ó–ì

üí° 3 –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–ò:

1. ü•ë –ê–í–û–ö–ê–î–û - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∏—Ç–∞–º–∏–Ω E –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–ª–µ—Ç–æ–∫
‚Ä¢ üí° –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ —Å–∞–ª–∞—Ç—ã –∏ –∑–∞–≤—Ç—Ä–∞–∫–∏

2. üêü –õ–û–°–û–°–¨ - –û–º–µ–≥–∞-3 –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –£–∫—Ä–µ–ø–ª—è–µ—Ç –º–µ–º–±—Ä–∞–Ω—ã –Ω–µ—Ä–≤–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –ø–∞–º—è—Ç—å –Ω–∞ 15-20%
‚Ä¢ üí° –°–æ–≤–µ—Ç: 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –Ω–∞ –æ–±–µ–¥

3. üå∞ –ì–†–ï–¶–ö–ò–ï –û–†–ï–•–ò - –≤–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ –§–æ—Ä–º–∞ –æ—Ä–µ—Ö–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–æ–∑–≥ - –ø—Ä–∏—Ä–æ–¥–∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–∞!
‚Ä¢ –ú–∞–≥–Ω–∏–π –∏ —Ü–∏–Ω–∫ —É–ª—É—á—à–∞—é—Ç –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ üí° –°–æ–≤–µ—Ç: –≥–æ—Ä—Å—Ç—å –≤ –¥–µ–Ω—å –∫–∞–∫ –ø–µ—Ä–µ–∫—É—Å

üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
–î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–≤—Ç—Ä–∞–∫ –∑–∞–≤—Ç—Ä–∞!
"""
        
        benefits = """‚Ä¢ üß† –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ üí° –Ø—Å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è
‚Ä¢ üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ üí™ –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –ü–ò–¢–ê–ù–ò–ï –î–õ–Ø –ú–û–ó–ì–ê",
            content,
            "neuro_advice",
            benefits
        )
    
    def generate_protein_advice(self):
        content = """
üí™ –ë–ï–õ–ö–ò: –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–ï –ö–ò–†–ü–ò–ß–ò–ö–ò –û–†–ì–ê–ù–ò–ó–ú–ê

ü•© –ñ–ò–í–û–¢–ù–´–ï –ë–ï–õ–ö–ò:
‚Ä¢ –ö—É—Ä–∏—Ü–∞, –∏–Ω–¥–µ–π–∫–∞, —Ä—ã–±–∞, —è–π—Ü–∞
‚Ä¢ –õ–µ–≥–∫–æ —É—Å–≤–∞–∏–≤–∞—é—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–º–æ–º
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–µ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã
‚Ä¢ üí° –û–ø—Ç–∏–º–∞–ª—å–Ω–æ: 2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å

üå± –†–ê–°–¢–ò–¢–ï–õ–¨–ù–´–ï –ë–ï–õ–ö–ò:
‚Ä¢ –ß–µ—á–µ–≤–∏—Ü–∞, –Ω—É—Ç, —Ñ–∞—Å–æ–ª—å, —Ç–æ—Ñ—É
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç –∫–ª–µ—Ç—á–∞—Ç–∫—É –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è
‚Ä¢ –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω
‚Ä¢ üí° –û—Ç–ª–∏—á–Ω–æ: –¥–ª—è –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏—Ö –¥–Ω–µ–π

‚öñÔ∏è –ë–ê–õ–ê–ù–° –ë–ï–õ–ö–û–í –í –î–ï–ù–¨:
‚Ä¢ –í–∑—Ä–æ—Å–ª—ã–µ: 1-1.5 –≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞
‚Ä¢ –î–µ—Ç–∏: 1.5-2 –≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞
‚Ä¢ –°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã: 1.5-2 –≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞

üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –°–û–í–ï–¢:
–°–æ—á–µ—Ç–∞–π—Ç–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!
"""
        
        benefits = """‚Ä¢ üí™ –†–æ—Å—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º—ã—à—Ü
‚Ä¢ üõ°Ô∏è –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚ö° –≠–Ω–µ—Ä–≥–∏—è –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
‚Ä¢ üß† –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ–ª–æ—Å, –∫–æ–∂–∏ –∏ –Ω–æ–≥—Ç–µ–π
‚Ä¢ üë∂ –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "üí™ –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –ó–ù–ê–ß–ï–ù–ò–ï –ë–ï–õ–ö–û–í",
            content,
            "protein_advice",
            benefits
        )
    
    def generate_veggie_advice(self):
        content = """
ü•¨ –û–í–û–©–ò: –ü–û–õ–¨–ó–ê –ö–õ–ï–¢–ß–ê–¢–ö–ò –ò –í–ò–¢–ê–ú–ò–ù–û–í

üåà –ü–†–ê–í–ò–õ–û –†–ê–î–£–ì–ò –ù–ê –¢–ê–†–ï–õ–ö–ï:

üî¥ –ö–†–ê–°–ù–´–ï (–ø–æ–º–∏–¥–æ—Ä—ã, –ø–µ—Ä–µ—Ü)
‚Ä¢ –õ–∏–∫–æ–ø–∏–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–¥—Ü–∞
‚Ä¢ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –ø—Ä–æ—Ç–∏–≤ —Å—Ç–∞—Ä–µ–Ω–∏—è

üü¢ –ó–ï–õ–ï–ù–´–ï (–±—Ä–æ–∫–∫–æ–ª–∏, —à–ø–∏–Ω–∞—Ç)
‚Ä¢ –•–ª–æ—Ä–æ—Ñ–∏–ª–ª –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω K –¥–ª—è –∫–æ—Å—Ç–µ–π

üü† –û–†–ê–ù–ñ–ï–í–´–ï (–º–æ—Ä–∫–æ–≤—å, —Ç—ã–∫–≤–∞)
‚Ä¢ –ë–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω –¥–ª—è –∑—Ä–µ–Ω–∏—è
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω A –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞

üü£ –§–ò–û–õ–ï–¢–û–í–´–ï (–±–∞–∫–ª–∞–∂–∞–Ω, —Å–≤–µ–∫–ª–∞)
‚Ä¢ –ê–Ω—Ç–æ—Ü–∏–∞–Ω—ã –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞

‚ö™ –ë–ï–õ–´–ï (—Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞, –ª—É–∫)
‚Ä¢ –ê–ª–ª–∏—Ü–∏–Ω –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
‚Ä¢ –ü—Ä–µ–±–∏–æ—Ç–∏–∫–∏ –¥–ª—è –º–∏–∫—Ä–æ—Ñ–ª–æ—Ä—ã

üéØ –¶–ï–õ–¨ –ù–ê –î–ï–ù–¨:
5 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –æ–≤–æ—â–µ–π –≤ —Ä–∞—Ü–∏–æ–Ω–µ!
"""
        
        benefits = """‚Ä¢ üåø –£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –ñ–ö–¢
‚Ä¢ üíä –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã
‚Ä¢ üõ°Ô∏è –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üìâ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞ –∏ –∞–ø–ø–µ—Ç–∏—Ç–∞
‚Ä¢ ‚ú® –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•¨ –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –°–ò–õ–ê –û–í–û–©–ï–ô",
            content,
            "veggie_advice",
            benefits
        )
    
    def generate_carbs_advice(self):
        content = """
üç† –£–ì–õ–ï–í–û–î–´: –≠–ù–ï–†–ì–ò–Ø –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ô –ñ–ò–ó–ù–ò

‚ö° –°–õ–û–ñ–ù–´–ï –£–ì–õ–ï–í–û–î–´:
‚Ä¢ –û–≤—Å—è–Ω–∫–∞, –≥—Ä–µ—á–∫–∞, –±—É—Ä—ã–π —Ä–∏—Å
‚Ä¢ –¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±, –º–∞–∫–∞—Ä–æ–Ω—ã –∏–∑ —Ç–≤–µ—Ä–¥—ã—Ö —Å–æ—Ä—Ç–æ–≤
‚Ä¢ –ë–æ–±–æ–≤—ã–µ: —á–µ—á–µ–≤–∏—Ü–∞, –Ω—É—Ç, —Ñ–∞—Å–æ–ª—å
‚Ä¢ üí° –î–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ 3-4 —á–∞—Å–∞

üö´ –ü–†–û–°–¢–´–ï –£–ì–õ–ï–í–û–î–´:
‚Ä¢ –°–∞—Ö–∞—Ä, –º–µ–¥, –≤–∞—Ä–µ–Ω—å–µ
‚Ä¢ –ë–µ–ª—ã–π —Ö–ª–µ–±, –≤—ã–ø–µ—á–∫–∞
‚Ä¢ –°–ª–∞–¥–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏, –∫–æ–Ω—Ñ–µ—Ç—ã
‚Ä¢ üí° –ë—ã—Å—Ç—Ä–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ 30-60 –º–∏–Ω—É—Ç

‚è∞ –ö–û–ì–î–ê –ï–°–¢–¨ –£–ì–õ–ï–í–û–î–´:
‚Ä¢ üïó –£–¢–†–û–ú - —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
‚Ä¢ üïê –û–ë–ï–î - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üèÉ‚Äç‚ôÄÔ∏è –î–û –¢–†–ï–ù–ò–†–û–í–ö–ò - —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –º—ã—à—Ü
‚Ä¢ ‚ùå –í–ï–ß–ï–†–û–ú - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã

üéØ –ü–†–ê–í–ò–õ–û:
80% —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤ + 20% –ø—Ä–æ—Å—Ç—ã—Ö!
"""
        
        benefits = """‚Ä¢ ‚ö° –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
‚Ä¢ üß† –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –º–æ–∑–≥–∞ –∏ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üí™ –¢–æ–ø–ª–∏–≤–æ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üìä –ö–æ–Ω—Ç—Ä–æ–ª—å —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏
‚Ä¢ üèÉ‚Äç‚ôÄÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        return self.visual_manager.generate_attractive_post(
            "üç† –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –≠–ù–ï–†–ì–ò–Ø –£–ì–õ–ï–í–û–î–û–í",
            content,
            "carbs_advice",
            benefits
        )
    
    def generate_water_advice(self):
        content = """
üíß –í–û–î–ê: –û–°–ù–û–í–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í

üö∞ –ü–û–ß–ï–ú–£ –í–û–î–ê –¢–ê–ö –í–ê–ñ–ù–ê:

üî• –£–°–ö–û–†–ï–ù–ò–ï –ú–ï–¢–ê–ë–û–õ–ò–ó–ú–ê
‚Ä¢ +30% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —Å–∂–∏–≥–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ

üß† –£–õ–£–ß–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ú–û–ó–ì–ê
‚Ä¢ 75% –º–æ–∑–≥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–æ–¥—ã
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –ø–∞–º—è—Ç—å

üçΩÔ∏è –ö–û–ù–¢–†–û–õ–¨ –ê–ü–ü–ï–¢–ò–¢–ê
‚Ä¢ –°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –ø–µ—Ä–µ–¥ –µ–¥–æ–π = -13% –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –≥–æ–ª–æ–¥–∞ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏

‚è∞ –ü–†–ê–í–ò–õ–¨–ù–û–ï –í–†–ï–ú–Ø –î–õ–Ø –í–û–î–´:
üï¢ 1 —Å—Ç–∞–∫–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
üï• 1 —Å—Ç–∞–∫–∞–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏
üïì 1 —Å—Ç–∞–∫–∞–Ω –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫—É—Å–æ–≤
üï§ 1 —Å—Ç–∞–∫–∞–Ω –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

üí° –°–û–í–ï–¢–´:
‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –±—É—Ç—ã–ª–∫—É —Å –≤–æ–¥–æ–π –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∏–¥—É
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ª–∏–º–æ–Ω/–º—è—Ç—É –¥–ª—è –≤–∫—É—Å–∞
"""
        
        benefits = """‚Ä¢ üí¶ –£–ª—É—á—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º–∞
‚Ä¢ üß† –Ø—Å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
‚Ä¢ üçΩÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ –≤–µ—Å–∞
‚Ä¢ ‚ú® –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏"""
        
        return self.visual_manager.generate_attractive_post(
            "üíß –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –í–û–î–ù–´–ô –ë–ê–õ–ê–ù–°",
            content,
            "water_advice",
            benefits
        )
    
    def generate_family_advice(self):
        content = """
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–ò–¢–ê–ù–ò–ï –î–õ–Ø –í–°–ï–ô –°–ï–ú–¨–ò

üë∂ –î–õ–Ø –î–ï–¢–ï–ô:
‚Ä¢ –†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞ - –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –µ—Å—Ç—å
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω–∞—è –≥–æ—Ç–æ–≤–∫–∞ - —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ–¥–µ
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª–µ–π - –ª—É—á—à–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è

üçΩÔ∏è –ü–†–ê–í–ò–õ–ê –°–ï–ú–ï–ô–ù–û–ì–û –°–¢–û–õ–ê:
1. –ù–ò–ö–ê–ö–ò–• –ì–ê–î–ñ–ï–¢–û–í –ó–ê –ï–î–û–ô
2. –°–ü–û–ö–û–ô–ù–ê–Ø –ò –î–†–£–ñ–ï–õ–Æ–ë–ù–ê–Ø –ê–¢–ú–û–°–§–ï–†–ê
3. –ù–û–í–´–ï –ü–†–û–î–£–ö–¢–´ –ü–†–ï–î–õ–ê–ì–ê–¢–¨ –ë–ï–ó –ü–†–ò–ù–£–ñ–î–ï–ù–ò–Ø

üí° –°–û–í–ï–¢–´ –î–õ–Ø –†–û–î–ò–¢–ï–õ–ï–ô:
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –ø—Ä–∏—è—Ç–Ω—ã–π —Ä–∏—Ç—É–∞–ª
‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –æ –ø–æ–ª—å–∑–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ
‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–µ—Ç—è–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—ã–±–æ—Ä–µ –º–µ–Ω—é

üéØ –ò–î–ï–Ø –ù–ê –í–´–•–û–î–ù–´–ï:
–£—Å—Ç—Ä–æ–π—Ç–µ "—Ü–≤–µ—Ç–Ω–æ–π —É–∂–∏–Ω" - –∫–∞–∂–¥—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç –æ–≤–æ—â —Å–≤–æ–µ–≥–æ —Ü–≤–µ—Ç–∞!
"""
        
        benefits = """‚Ä¢ üë∂ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —É –¥–µ—Ç–µ–π
‚Ä¢ üíû –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω—ã—Ö —Å–≤—è–∑–µ–π
‚Ä¢ üçΩÔ∏è –†–∞–∑–≤–∏—Ç–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ üß† –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—â–µ
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ"""
        
        return self.visual_manager.generate_attractive_post(
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –°–ï–ú–ï–ô–ù–û–ï –ü–ò–¢–ê–ù–ò–ï",
            content,
            "family_advice",
            benefits
        )
    
    def generate_planning_advice(self):
        content = """
üìù –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–ò–¢–ê–ù–ò–Ø: –ö–õ–Æ–ß –ö –£–°–ü–ï–•–£

üóìÔ∏è –ß–¢–û –î–ê–ï–¢ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–¥–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –æ—Ç "—á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"

üìã –®–ê–ì–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ:

1. üõí –°–û–°–¢–ê–í–¨–¢–ï –°–ü–ò–°–û–ö –ü–†–û–î–£–ö–¢–û–í
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–µ–ª–∫–∏, –∫—Ä—É–ø—ã, –æ–≤–æ—â–∏
   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –∞–∫—Ü–∏–∏

2. üçΩÔ∏è –†–ê–°–ü–ò–®–ò–¢–ï –ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ
   ‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫–∏, –æ–±–µ–¥—ã, —É–∂–∏–Ω—ã, –ø–µ—Ä–µ–∫—É—Å—ã
   ‚Ä¢ –ß–µ—Ä–µ–¥—É–π—Ç–µ –≤–∏–¥—ã –±–µ–ª–∫–æ–≤ –∏ –∫—Ä—É–ø

3. üïí –ü–û–î–ì–û–¢–û–í–¨–¢–ï –ë–ê–ó–û–í–´–ï –ü–†–û–î–£–ö–¢–´
   ‚Ä¢ –û—Ç–≤–∞—Ä–∏—Ç–µ –∫—Ä—É–ø—ã –Ω–∞ 2-3 –¥–Ω—è
   ‚Ä¢ –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏ –¥–ª—è —Å–∞–ª–∞—Ç–æ–≤
   ‚Ä¢ –†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –º—è—Å–æ/—Ä—ã–±—É

üí° –°–û–í–ï–¢:
–í—ã–¥–µ–ª–∏—Ç–µ 1 —á–∞—Å –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ 10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é!
"""
        
        benefits = """‚Ä¢ ‚è±Ô∏è –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–æ—Ç–æ–≤–∫—É
‚Ä¢ üí∞ –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ üçΩÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚Ä¢ üòå –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏"""
        
        return self.visual_manager.generate_attractive_post(
            "üìù –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–ò–¢–ê–ù–ò–Ø",
            content,
            "planning_advice",
            benefits
        )

# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ö–û–ù–¢–ï–ù–¢–ê
class ContentScheduler:
    def __init__(self):
        self.kemerovo_schedule = {
            # –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö - üß† "–ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï"
            0: {
                "08:00": {"name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫: –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ", "type": "neuro_breakfast", "method": "generate_neuro_breakfast"},
                "13:00": {"name": "üç≤ –û–±–µ–¥ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏", "type": "focus_lunch", "method": "generate_neuro_lunch"},
                "17:00": {"name": "üß† –°–æ–≤–µ—Ç: –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –º–æ–∑–≥–∞", "type": "neuro_advice", "method": "generate_neuro_advice"},
                "19:00": {"name": "ü•ó –£–∂–∏–Ω –¥–ª—è –º–æ–∑–≥–∞", "type": "brain_dinner", "method": "generate_neuro_dinner"}
            },
            # –í–¢–û–†–ù–ò–ö - üí™ "–ë–ï–õ–ö–û–í–´–ô –î–ï–ù–¨"
            1: {
                "08:00": {"name": "üí™ –ë–µ–ª–∫–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫: –¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞", "type": "protein_breakfast", "method": "generate_protein_breakfast"},
                "13:00": {"name": "üçµ –ß–µ—á–µ–≤–∏—á–Ω—ã–π —Å—É–ø —Å –∏–Ω–¥–µ–π–∫–æ–π", "type": "protein_lunch", "method": "generate_protein_lunch"},
                "17:00": {"name": "üí™ –°–æ–≤–µ—Ç: –ó–Ω–∞—á–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤", "type": "protein_advice", "method": "generate_protein_advice"},
                "19:00": {"name": "üçó –ö—É—Ä–∏–Ω—ã–µ –≥—Ä—É–¥–∫–∏ —Å –∫–∏–Ω–æ–∞", "type": "protein_dinner", "method": "generate_protein_dinner"}
            },
            # –°–†–ï–î–ê - ü•¨ "–û–í–û–©–ù–û–ô –î–ï–ù–¨"
            2: {
                "08:00": {"name": "ü•§ –°–º—É–∑–∏-–±–æ—É–ª —Å —Å–µ–º–µ–Ω–∞–º–∏ —á–∏–∞", "type": "veggie_breakfast", "method": "generate_veggie_breakfast"},
                "13:00": {"name": "ü•¨ –û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É —Å —Ñ–∞—Å–æ–ª—å—é", "type": "veggie_lunch", "method": "generate_veggie_lunch"},
                "17:00": {"name": "ü•¨ –°–æ–≤–µ—Ç: –°–∏–ª–∞ –æ–≤–æ—â–µ–π", "type": "veggie_advice", "method": "generate_veggie_advice"},
                "19:00": {"name": "ü•ë –°–∞–ª–∞—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ –Ω—É—Ç–æ–º", "type": "veggie_dinner", "method": "generate_veggie_dinner"}
            },
            # –ß–ï–¢–í–ï–†–ì - üç† "–°–õ–û–ñ–ù–´–ï –£–ì–õ–ï–í–û–î–´"
            3: {
                "08:00": {"name": "üç† –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —á–∏–∞", "type": "carbs_breakfast", "method": "generate_carbs_breakfast"},
                "13:00": {"name": "üçö –ë—É—Ä—ã–π —Ä–∏—Å —Å –∫—É—Ä–∏—Ü–µ–π", "type": "carbs_lunch", "method": "generate_carbs_lunch"},
                "17:00": {"name": "üç† –°–æ–≤–µ—Ç: –≠–Ω–µ—Ä–≥–∏—è —É–≥–ª–µ–≤–æ–¥–æ–≤", "type": "carbs_advice", "method": "generate_carbs_advice"},
                "19:00": {"name": "ü•î –ó–∞–ø–µ—á–µ–Ω–Ω—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "type": "carbs_dinner", "method": "generate_carbs_dinner"}
            },
            # –ü–Ø–¢–ù–ò–¶–ê - üéâ "–í–ö–£–°–ù–û –ò –ü–û–õ–ï–ó–ù–û"
            4: {
                "08:00": {"name": "ü•û –ë–ª–∏–Ω—á–∏–∫–∏ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–µ", "type": "carbs_breakfast", "method": "generate_carbs_breakfast"},
                "13:00": {"name": "üçù –ü–∞—Å—Ç–∞ —Å —Ñ–∞—Å–æ–ª—å—é", "type": "carbs_lunch", "method": "generate_carbs_lunch"},
                "16:00": {"name": "üç∞ –ü—è—Ç–Ω–∏—á–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "type": "friday_dessert", "method": "generate_friday_dessert"},
                "17:00": {"name": "üíß –°–æ–≤–µ—Ç: –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å", "type": "water_advice", "method": "generate_water_advice"},
                "19:00": {"name": "üçï –î–æ–º–∞—à–Ω—è—è –ø–∏—Ü—Ü–∞", "type": "family_dinner", "method": "generate_family_cooking"}
            },
            # –°–£–ë–ë–û–¢–ê - üë®‚Äçüç≥ "–ì–û–¢–û–í–ò–ú –í–ú–ï–°–¢–ï"
            5: {
                "10:00": {"name": "üç≥ –°–µ–º–µ–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "family_breakfast", "method": "generate_sunday_breakfast"},
                "13:00": {"name": "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏–º –≤–º–µ—Å—Ç–µ: –ß–µ—á–µ–≤–∏—á–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã", "type": "family_lunch", "method": "generate_family_cooking"},
                "16:00": {"name": "üéÇ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç", "type": "saturday_dessert", "method": "generate_friday_dessert"},
                "17:00": {"name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–≤–µ—Ç: –°–µ–º–µ–π–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "type": "family_advice", "method": "generate_family_advice"},
                "19:00": {"name": "üçΩÔ∏è –°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω", "type": "family_dinner", "method": "generate_protein_dinner"}
            },
            # –í–û–°–ö–†–ï–°–ï–ù–¨–ï - üìù "–ü–õ–ê–ù–ò–†–£–ï–ú –ù–ï–î–ï–õ–Æ"
            6: {
                "10:00": {"name": "‚òÄÔ∏è –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á: –°—ã—Ä–Ω–∏–∫–∏", "type": "sunday_breakfast", "method": "generate_sunday_breakfast"},
                "13:00": {"name": "üõí –û–±–µ–¥ + –ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é", "type": "sunday_lunch", "method": "generate_veggie_lunch"},
                "17:00": {"name": "üìù –°–æ–≤–µ—Ç: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è", "type": "planning_advice", "method": "generate_planning_advice"},
                "19:00": {"name": "üìã –ù–∞—Å—Ç—Ä–æ–π –Ω–∞ –Ω–µ–¥–µ–ª—é", "type": "week_prep_dinner", "method": "generate_carbs_dinner"}
            }
        }
        
        self.server_schedule = self._convert_schedule_to_server()
        self.is_running = False
        self.telegram = TelegramManager()
        self.generator = ContentGenerator()
        
    def _convert_schedule_to_server(self):
        server_schedule = {}
        for day, day_schedule in self.kemerovo_schedule.items():
            server_schedule[day] = {}
            for kemerovo_time, event in day_schedule.items():
                server_time = TimeManager.kemerovo_to_server(kemerovo_time)
                server_schedule[day][server_time] = event
        return server_schedule

    def start_scheduler(self):
        if self.is_running:
            return
            
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        for day, day_schedule in self.server_schedule.items():
            for server_time, event in day_schedule.items():
                self._schedule_event(day, server_time, event)
        
        self.is_running = True
        self._run_scheduler()
    
    def _schedule_event(self, day, server_time, event):
        def job():
            current_times = TimeManager.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['name']}")
            
            method_name = event['method']
            method = getattr(self.generator, method_name)
            content = method()
            
            if content:
                content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = self.telegram.send_message(content_with_time)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['name']}")
        
        job_func = getattr(schedule.every(), self._get_day_name(day))
        job_func.at(server_time).do(job)
    
    def _get_day_name(self, day_num):
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        return days[day_num]

    def _run_scheduler(self):
        def run():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        Thread(target=run, daemon=True).start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ"""
        try:
            current_times = TimeManager.get_current_times()
            current_kemerovo_time = current_times['kemerovo_time'][:5]
            
            current_weekday = TimeManager.get_kemerovo_weekday()
            today_schedule = self.kemerovo_schedule.get(current_weekday, {})
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
            for time_str, event in sorted(today_schedule.items()):
                if time_str > current_kemerovo_time:
                    return time_str, event
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–≤—Ç—Ä–∞
            tomorrow = (current_weekday + 1) % 7
            tomorrow_schedule = self.kemerovo_schedule.get(tomorrow, {})
            if tomorrow_schedule:
                first_time = min(tomorrow_schedule.keys())
                return first_time, tomorrow_schedule[first_time]
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return "09:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "general"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
            return "09:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "general"}

# –°–ò–°–¢–ï–ú–ê KEEP-ALIVE
def start_keep_alive_system():
    def keep_alive_ping():
        try:
            if Config.RENDER_APP_URL:
                response = requests.get(f"{Config.RENDER_APP_URL}/health", timeout=10)
                if response.status_code == 200:
                    service_monitor.update_keep_alive()
                    logger.info("‚úÖ Keep-alive ping successful")
            else:
                service_monitor.update_keep_alive()
                logger.info("‚úÖ Keep-alive cycle completed")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive failed: {e}")
    
    def run_keep_alive():
        schedule.every(5).minutes.do(keep_alive_ping)
        
        time.sleep(10)
        keep_alive_ping()
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    keep_alive_thread = Thread(target=run_keep_alive, daemon=True)
    keep_alive_thread.start()
    logger.info("‚úÖ Keep-alive system started")

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
telegram_manager = TelegramManager()
content_generator = ContentGenerator()
content_scheduler = ContentScheduler()

# –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
try:
    content_scheduler.start_scheduler()
    start_keep_alive_system()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeManager.get_current_times()
    telegram_manager.send_message(f"""
üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –°–ï–ú–¨–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞ ‚úÖ

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 32 –ø–æ—Å—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é
üçΩÔ∏è –§–æ—Ä–º–∞—Ç: –í–∫—É—Å–Ω–æ, –ø–æ–ª–µ–∑–Ω–æ, –¥–ª—è —Å–µ–º—å–∏
üí∞ –ë—é–¥–∂–µ—Ç: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚è±Ô∏è –í—Ä–µ–º—è: –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
üí° –°–æ–≤–µ—Ç—ã: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞
üõ°Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: Keep-alive –∞–∫—Ç–∏–≤–µ–Ω

üïê –°–µ—Ä–≤–µ—Ä: {current_times['server_time']}
üïê –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! üë®‚Äçüë©‚Äçüëß‚Äçüë¶
    """)
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–ê–†–®–†–£–¢–´ FLASK
@app.route('/')
@rate_limit
def smart_dashboard():
    try:
        member_count = telegram_manager.get_member_count()
        next_time, next_event = content_scheduler.get_next_event()
        current_times = TimeManager.get_current_times()
        current_weekday = TimeManager.get_kemerovo_weekday()
        
        weekly_stats = {
            'posts_sent': 18,
            'engagement_rate': 4.2,
            'new_members': 12,
            'total_reactions': 284
        }
        
        content_progress = {
            0: {"completed": 4, "total": 8, "theme": "üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ"},
            1: {"completed": 2, "total": 8, "theme": "üí™ –ë–µ–ª–∫–∏"},
            2: {"completed": 8, "total": 8, "theme": "ü•¨ –û–≤–æ—â–∏"},
            3: {"completed": 1, "total": 8, "theme": "üç† –£–≥–ª–µ–≤–æ–¥—ã"},
            4: {"completed": 3, "total": 8, "theme": "üéâ –í–∫—É—Å–Ω–æ"},
            5: {"completed": 0, "total": 8, "theme": "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏–º"},
            6: {"completed": 0, "total": 8, "theme": "üìù –ü–ª–∞–Ω–∏—Ä—É–µ–º"}
        }
        
        today_schedule = content_scheduler.kemerovo_schedule.get(current_weekday, {})
        monitor_status = service_monitor.get_status()
        
        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</title>
            <style>
                :root {{
                    --primary: #2c3e50;
                    --accent: #3498db;
                    --success: #27ae60;
                    --warning: #f39c12;
                    --danger: #e74c3c;
                    --light: #ecf0f1;
                    --dark: #34495e;
                }}
                
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}
                
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }}
                
                .dashboard {{
                    max-width: 1400px;
                    margin: 0 auto;
                }}
                
                .header {{
                    background: var(--primary);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    margin-bottom: 20px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                }}
                
                .status-bar {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    background: var(--dark);
                    padding: 12px 20px;
                    border-radius: 10px;
                    margin-top: 15px;
                    font-size: 14px;
                }}
                
                .status-item {{
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }}
                
                .widgets-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-bottom: 20px;
                }}
                
                .widget {{
                    background: white;
                    padding: 25px;
                    border-radius: 15px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                    transition: transform 0.3s ease;
                }}
                
                .widget:hover {{
                    transform: translateY(-5px);
                }}
                
                .widget h3 {{
                    color: var(--primary);
                    margin-bottom: 15px;
                    font-size: 18px;
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .stat-card {{
                    background: var(--light);
                    padding: 15px;
                    border-radius: 10px;
                    text-align: center;
                }}
                
                .stat-number {{
                    font-size: 24px;
                    font-weight: bold;
                    color: var(--primary);
                }}
                
                .stat-label {{
                    font-size: 12px;
                    color: var(--dark);
                    margin-top: 5px;
                }}
                
                .progress-bar {{
                    background: #e0e0e0;
                    border-radius: 10px;
                    height: 8px;
                    margin: 10px 0;
                    overflow: hidden;
                }}
                
                .progress-fill {{
                    height: 100%;
                    background: var(--success);
                    border-radius: 10px;
                    transition: width 0.3s ease;
                }}
                
                .schedule-item {{
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    margin: 8px 0;
                    background: var(--light);
                    border-radius: 8px;
                    border-left: 4px solid var(--accent);
                }}
                
                .schedule-time {{
                    font-weight: bold;
                    color: var(--primary);
                    min-width: 60px;
                }}
                
                .schedule-text {{
                    flex: 1;
                    margin-left: 15px;
                }}
                
                .btn {{
                    background: var(--accent);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    text-align: center;
                    margin: 5px;
                }}
                
                .btn:hover {{
                    background: #2980b9;
                }}
                
                .btn-success {{
                    background: var(--success);
                }}
                
                .btn-warning {{
                    background: var(--warning);
                }}
                
                .btn-danger {{
                    background: var(--danger);
                }}
                
                .actions-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 10px;
                    margin-top: 15px;
                }}
                
                .metrics-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .metric-item {{
                    text-align: center;
                    padding: 15px;
                    background: var(--light);
                    border-radius: 10px;
                }}
                
                .automation-status {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 12px;
                    background: var(--light);
                    border-radius: 8px;
                    margin: 8px 0;
                }}
                
                .monitor-info {{
                    background: #e8f5e8;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    border-left: 4px solid var(--success);
                }}
                
                .monitor-item {{
                    display: flex;
                    justify-content: space-between;
                    margin: 5px 0;
                    font-size: 14px;
                }}
                
                @media (max-width: 768px) {{
                    .widgets-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .stats-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .status-bar {{
                        flex-direction: column;
                        gap: 10px;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="dashboard">
                <div class="header">
                    <h1>üé™ –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</h1>
                    <p>–ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è - –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</p>
                    
                    <div class="status-bar">
                        <div class="status-item">
                            <span style="color: var(--success)">üü¢</span>
                            <span>–°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê</span>
                        </div>
                        <div class="status-item">
                            <span>üìä</span>
                            <span>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {member_count}</span>
                        </div>
                        <div class="status-item">
                            <span>‚è∞</span>
                            <span>–ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}</span>
                        </div>
                        <div class="status-item">
                            <span>üîÑ</span>
                            <span>–°–ª–µ–¥. –ø–æ—Å—Ç: {next_time} - {next_event['name']}</span>
                        </div>
                    </div>
                </div>
                
                <div class="monitor-info">
                    <h3>üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (Render Optimized)</h3>
                    <div class="monitor-item">
                        <span>Uptime:</span>
                        <span>{int(monitor_status['uptime_seconds'] // 3600)}—á {int((monitor_status['uptime_seconds'] % 3600) // 60)}–º</span>
                    </div>
                    <div class="monitor-item">
                        <span>Keep-alive ping:</span>
                        <span>{monitor_status['keep_alive_count']} —Ä–∞–∑</span>
                    </div>
                    <div class="monitor-item">
                        <span>–ó–∞–ø—Ä–æ—Å—ã:</span>
                        <span>{monitor_status['requests_handled']}</span>
                    </div>
                </div>
                
                <div class="widgets-grid">
                    <div class="widget">
                        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h3>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-number">{member_count}</div>
                                <div class="stat-label">üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">8542</div>
                                <div class="stat-label">üìä –û—Ö–≤–∞—Ç</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{weekly_stats['engagement_rate']}%</div>
                                <div class="stat-label">üí¨ Engagement</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{weekly_stats['total_reactions']}</div>
                                <div class="stat-label">‚≠ê –†–µ–∞–∫—Ü–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ–¥–µ–ª–∏</h3>
                        {"".join([f'''
                        <div style="margin: 10px 0;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                <span>{progress["theme"]}</span>
                                <span>{progress["completed"]}/{progress["total"]}</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: {(progress['completed']/progress['total'])*100}%"></div>
                            </div>
                        </div>
                        ''' for day, progress in content_progress.items()])}
                    </div>
                    
                    <div class="widget">
                        <h3>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è</h3>
                        {"".join([f'''
                        <div class="schedule-item">
                            <div class="schedule-time">{time}</div>
                            <div class="schedule-text">{event["name"]}</div>
                            <div style="color: var(--success)">‚úÖ</div>
                        </div>
                        ''' for time, event in sorted(today_schedule.items())])}
                    </div>
                    
                    <div class="widget">
                        <h3>üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <div class="actions-grid">
                            <button class="btn" onclick="testChannel()">üì§ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</button>
                            <button class="btn btn-success" onclick="testQuickPost()">üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</button>
                            <button class="btn" onclick="sendPoll()">üîÑ –û–ø—Ä–æ—Å</button>
                            <button class="btn btn-success" onclick="sendReport()">üìä –û—Ç—á–µ—Ç</button>
                            <button class="btn" onclick="sendVisual()">üé® –í–∏–∑—É–∞–ª</button>
                            <button class="btn btn-warning" onclick="runDiagnostics()">üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</button>
                            <button class="btn" onclick="showManualPost()">üìù –†—É—á–Ω–æ–π –ø–æ—Å—Ç</button>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                        <div class="metrics-grid">
                            <div class="metric-item">
                                <div class="stat-number">3.8%</div>
                                <div class="stat-label">üìà CTR</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">2.1 –º–∏–Ω</div>
                                <div class="stat-label">‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">47</div>
                                <div class="stat-label">üîÑ –†–µ–ø–æ—Å—Ç—ã</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">28</div>
                                <div class="stat-label">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h3>
                        <div class="automation-status">
                            <span>‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥</span>
                            <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                            <span>–í–∫–ª—é—á–µ–Ω–∞</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ Keep-alive</span>
                            <span>–ê–∫—Ç–∏–≤–µ–Ω (5 –º–∏–Ω)</span>
                        </div>
                        <div class="automation-status">
                            <span>‚è≥ –°–ª–µ–¥. –ø—Ä–æ–≤–µ—Ä–∫–∞</span>
                            <span>—á–µ—Ä–µ–∑ 55 —Å–µ–∫</span>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                function testChannel() {{
                    fetch('/test-channel').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ö–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!' : '‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞');
                    }});
                }}
                
                function testQuickPost() {{
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = '‚è≥ –¢–µ—Å—Ç...';
                    btn.disabled = true;
                    
                    fetch('/test-quick-post')
                        .then(r => r.json())
                        .then(data => {{
                            alert(data.status === 'success' ? '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                        }})
                        .catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
                        }})
                        .finally(() => {{
                            btn.textContent = originalText;
                            btn.disabled = false;
                        }});
                }}
                
                function sendPoll() {{
                    fetch('/send-poll').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!' : '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞');
                    }});
                }}
                
                function sendReport() {{
                    fetch('/send-report').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞');
                    }});
                }}
                
                function sendVisual() {{
                    fetch('/send-visual').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –í–∏–∑—É–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∑—É–∞–ª–∞');
                    }});
                }}
                
                function runDiagnostics() {{
                    fetch('/diagnostics').then(r => r.json()).then(data => {{
                        alert('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ' + (data.status === 'success' ? '‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ' : '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'));
                    }});
                }}
                
                function showManualPost() {{
                    const content = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞):');
                    if (content) {{
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                        const btn = event.target;
                        const originalText = btn.textContent;
                        btn.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
                        btn.disabled = true;
                        
                        fetch('/quick-post', {{
                            method: 'POST',
                            headers: {{'Content-Type': 'application/json'}},
                            body: JSON.stringify({{content: content}})
                        }}).then(r => r.json()).then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }}
                        }}).catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
                        }}).finally(() => {{
                            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                            btn.textContent = originalText;
                            btn.disabled = false;
                        }});
                    }}
                }}
                
                setInterval(() => {{
                    window.location.reload();
                }}, 30000);
            </script>
        </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

# HEALTH CHECK
@app.route('/health')
def health_check():
    return jsonify(service_monitor.get_status())

@app.route('/ping')
def ping():
    return "pong", 200

# API –ú–ê–†–®–†–£–¢–´
@app.route('/test-channel')
@rate_limit
def test_channel():
    success = telegram_manager.send_message("üé™ <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:</b> –ö–ª—É–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ")
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-poll')
@rate_limit
def send_poll():
    return jsonify({"status": "success", "message": "–û–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"})

@app.route('/send-report')
@rate_limit
def send_report():
    member_count = telegram_manager.get_member_count()
    current_times = TimeManager.get_current_times()
    
    report = f"""üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ö–ê–ù–ê–õ–ê @ppsupershef</b>

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{member_count}</b>
üìÖ –î–∞—Ç–∞: {current_times['kemerovo_date']}
üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}

üí´ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ:</b>
‚Ä¢ üìà Engagement Rate: 4.2%
‚Ä¢ üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ: 3.1%
‚Ä¢ üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: 85%

üéØ <b>–ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –ö–õ–£–ë–£ –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø!</b>

#–æ—Ç—á–µ—Ç #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
    
    success = telegram_manager.send_message(report)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-visual')
@rate_limit
def send_visual():
    content = content_generator.generate_neuro_breakfast()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-breakfast')
@rate_limit
def send_breakfast():
    content = content_generator.generate_neuro_breakfast()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-dessert')
@rate_limit
def send_dessert():
    content = content_generator.generate_friday_dessert()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-advice')
@rate_limit
def send_advice():
    content = content_generator.generate_neuro_advice()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/diagnostics')
@rate_limit
def diagnostics():
    try:
        member_count = telegram_manager.get_member_count()
        current_times = TimeManager.get_current_times()
        
        return jsonify({
            "status": "success",
            "components": {
                "telegram": "active" if member_count > 0 else "error",
                "scheduler": "active" if content_scheduler.is_running else "error",
                "database": "active",
                "keep_alive": "active"
            },
            "metrics": {
                "member_count": member_count,
                "system_time": current_times['kemerovo_time'],
                "uptime": service_monitor.get_status()['uptime_seconds']
            }
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/manual-post', methods=['POST'])
@require_api_key
@rate_limit
def manual_post():
    try:
        data = request.get_json()
        content = data.get('content', '')
        
        if not content:
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        current_times = TimeManager.get_current_times()
        content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = telegram_manager.send_message(content_with_time)
        return jsonify({"status": "success" if success else "error"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# –ù–û–í–´–ï –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –†–£–ß–ù–û–ô –û–¢–ü–†–ê–í–ö–ò
@app.route('/quick-post', methods=['POST'])
@rate_limit
def quick_post():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        data = request.get_json()
        content = data.get('content', '')
        
        if not content:
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        current_times = TimeManager.get_current_times()
        content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = telegram_manager.send_message(content_with_time)
        
        if success:
            logger.info(f"‚úÖ –†—É—á–Ω–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {content[:50]}...")
            return jsonify({"status": "success", "message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
        else:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route('/test-quick-post')
@rate_limit
def test_quick_post():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        test_content = """üé™ <b>–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –ò–ó –î–ê–®–ë–û–†–î–ê</b>

‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

üí´ <b>–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üìä <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!

#—Ç–µ—Å—Ç #–¥–∞—à–±–æ—Ä–¥ #—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        
        success = telegram_manager.send_message(test_content)
        return jsonify({
            "status": "success" if success else "error", 
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–º–Ω–æ–≥–æ –î–∞—à–±–æ—Ä–¥–∞ @ppsupershef")
    print("üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ–º—å–∏")
    print("üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 32 –ø–æ—Å—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é")
    print("üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞")
    print("üì∏ –í–∏–∑—É–∞–ª—ã: –ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("üõ°Ô∏è Keep-alive: –ê–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    print("üéÆ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫)")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )
