import os
import logging
import requests
import json
import time
import schedule
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, request, jsonify
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    SERVER_TIMEZONE = pytz.timezone('UTC')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤ UTC
    KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')  # –ö–µ–º–µ—Ä–æ–≤–æ UTC+7
    TIME_DIFFERENCE_HOURS = 7  # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: –ö–µ–º–µ—Ä–æ–≤–æ = –°–µ—Ä–≤–µ—Ä + 7 —á–∞—Å–æ–≤

class ContentFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –°–ª–æ–≤–∞—Ä–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    EMOJI_MAPPING = {
        'start': ['üç≥', 'üë®‚Äçüç≥', 'ü•ò', 'üç≤', 'ü•ó', 'üçé', 'ü•ë', 'üçì', 'ü•¶', 'üç†'],
        'ingredient': ['ü•¨', 'ü•ï', 'üå∂Ô∏è', 'üßÖ', 'üßÑ', 'üçÖ', 'ü•í', 'üåΩ', 'ü•î', 'üçÜ'],
        'cooking': ['üî•', '‚è±Ô∏è', 'ü•Ñ', 'üç¥', 'üî™', 'ü•£', 'üçΩÔ∏è', 'üëå', 'üí´'],
        'health': ['üí™', 'üåü', '‚ù§Ô∏è', '‚ú®', 'üèÜ', '‚úÖ', 'üåø', 'üçÉ'],
        'tip': ['üí°', 'üìù', 'üëÄ', 'üéØ', '‚ö†Ô∏è', 'üîî'],
        'benefit': ['‚ö°', 'üí•', 'üî•', 'üåü', 'üíé', 'üèÖ'],
        'science': ['üî¨', 'üìä', 'üß™', 'üîç', 'üéì', 'üìö']
    }
    
    # –†–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    REACTIONS = [
        {"emoji": "üòã", "text": "–≤–∫—É—Å–Ω–æ"},
        {"emoji": "üí™", "text": "–ø–æ–ª–µ–∑–Ω–æ"},
        {"emoji": "üë®‚Äçüç≥", "text": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é"},
        {"emoji": "üìù", "text": "–∑–∞–ø–∏—à—É —Å–µ–±–µ"},
        {"emoji": "üìö", "text": "–Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã"}
    ]
    
    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    VISUAL_CONTENT = {
        'infographics': [
            {'emoji': 'üìä', 'title': '–ü—Ä–∞–≤–∏–ª–æ —Ç–∞—Ä–µ–ª–∫–∏', 'desc': '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'},
            {'emoji': 'üìà', 'title': '–ë–∞–ª–∞–Ω—Å –ë–ñ–£', 'desc': '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤'},
            {'emoji': '‚è±Ô∏è', 'title': '–¢–∞–π–º–∏–Ω–≥ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏', 'desc': '–ö–æ–≥–¥–∞ –∏ —á—Ç–æ –ª—É—á—à–µ –µ—Å—Ç—å'},
            {'emoji': 'ü•ó', 'title': '–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'desc': '–ß—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ'},
            {'emoji': 'üíß', 'title': '–ì–∏–¥—Ä–æ–±–∞–ª–∞–Ω—Å', 'desc': '–°—Ö–µ–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã'}
        ],
        'checklists': [
            {'emoji': 'üõí', 'title': '–ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 'desc': '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é'},
            {'emoji': 'üç±', 'title': '–°–ø–∏—Å–æ–∫ –¥–ª—è –ª–∞–Ω—á–±–æ–∫—Å–∞', 'desc': '–ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –Ω–∞ —Ä–∞–±–æ—Ç—É'},
            {'emoji': 'üìÖ', 'title': '–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é', 'desc': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏'},
            {'emoji': '‚ö°', 'title': '–≠–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ—Ü–µ–ø—Ç—ã', 'desc': '–ë—ã—Å—Ç—Ä—ã–µ –±–ª—é–¥–∞ –∑–∞ 15 –º–∏–Ω—É—Ç'},
            {'emoji': 'üí∞', 'title': '–ë—é–¥–∂–µ—Ç–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', 'desc': '–≠–∫–æ–Ω–æ–º–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã'}
        ],
        'guides': [
            {'emoji': 'üîç', 'title': '–ö–∞–∫ —á–∏—Ç–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏', 'desc': '–†–∞–∑–±–æ—Ä —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'},
            {'emoji': 'üèÉ', 'title': '–ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö', 'desc': '–î–æ –∏ –ø–æ—Å–ª–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏'},
            {'emoji': 'üí§', 'title': '–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∞', 'desc': '–ß—Ç–æ –µ—Å—Ç—å –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞'}
        ]
    }
    
    # –°–∏—Å—Ç–µ–º–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
    ENGAGEMENT_BOOSTERS = [
        {
            'type': 'social_mention',
            'text': "üì± –û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å –≤ —Å—Ç–æ—Ä–∏—Å! –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –±–ª—é–¥–∞ —Å —Ç–µ–≥–æ–º #ppsupershef",
            'hashtag': '#ppsupershef'
        },
        {
            'type': 'repost',
            'text': "üéÅ –†–µ–ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ - —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–æ–ª–µ–∑–Ω–æ–µ",
            'emoji': "üéÅ"
        },
        {
            'type': 'user_content',
            'text': "üë®‚Äçüç≥ –ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≤–µ—Ä—Å–∏—é —Ä–µ—Ü–µ–ø—Ç–∞! –õ—É—á—à–∏–µ —Ñ–æ—Ç–æ –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª–µ",
            'hashtag': '#–º–æ–π—Ä–µ—Ü–µ–ø—Ç'
        },
        {
            'type': 'question',
            'text': "üí¨ –ö–∞–∫ –≤–∞–º —Ä–µ—Ü–µ–ø—Ç? –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!",
            'emoji': "üí¨"
        },
        {
            'type': 'challenge',
            'text': "üèÜ –ü—Ä–∏–º–∏—Ç–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –≤—ã–∑–æ–≤! –ì–æ—Ç–æ–≤–∏—Ç–µ —ç—Ç–æ –±–ª—é–¥–æ - –æ—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å",
            'hashtag': '#–∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π–≤—ã–∑–æ–≤'
        }
    ]

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    INTERACTIVE_ELEMENTS = {
        'polls': [
            {
                'question': "üìä –ì–æ–ª–æ—Å—É–π—Ç–µ: –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?",
                'options': ['üç≥ –†–µ—Ü–µ–ø—Ç—ã —Å –ö–ë–ñ–£', 'üî¨ –ù–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã', 'üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤', 'üìä –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞'],
                'emoji': 'üìä'
            },
            {
                'question': "ü•ó –ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å?",
                'options': ['üç≥ –ó–∞–≤—Ç—Ä–∞–∫', 'üç≤ –û–±–µ–¥', 'üçΩÔ∏è –£–∂–∏–Ω', 'ü•® –ü–µ—Ä–µ–∫—É—Å—ã'],
                'emoji': 'ü•ó'
            },
            {
                'question': "‚è±Ô∏è –ö–∞–∫ —á–∞—Å—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç–µ –¥–æ–º–∞?",
                'options': ['üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å', 'üíº –í —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏', 'üéâ –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ', 'üçï –†–µ–¥–∫–æ –≥–æ—Ç–æ–≤–ª—é'],
                'emoji': '‚è±Ô∏è'
            }
        ],
        'quizzes': [
            {
                'question': "üß† –¢–µ—Å—Ç: –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ –ø–∏—Ç–∞–Ω–∏–∏?",
                'options': ['üí™ –ü—Ä–æ—Ñ–∏', 'üìö –õ—é–±–∏—Ç–µ–ª—å', 'üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π', '‚ùì –¢–æ–ª—å–∫–æ —É—á—É—Å—å'],
                'emoji': 'üß†'
            }
        ]
    }

    @staticmethod
    def add_emojis_to_text(text):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if not text:
            return text
            
        sentences = text.split('. ')
        formatted_sentences = []
        
        for i, sentence in enumerate(sentences):
            if sentence.strip():
                # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if i == 0:
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['start'])
                elif any(word in sentence.lower() for word in ['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', '—Å–æ—Å—Ç–∞–≤', '–Ω—É–∂–Ω–æ', '–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è']):
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['ingredient'])
                elif any(word in sentence.lower() for word in ['–≥–æ—Ç–æ–≤–∏—Ç—å', '–≤–∞—Ä–∏—Ç—å', '–∂–∞—Ä–∏—Ç—å', '–ø–µ—á—å', '—Ç—É—à–∏—Ç—å', '–º–∏–Ω—É—Ç', '—á–∞—Å']):
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['cooking'])
                elif any(word in sentence.lower() for word in ['–ø–æ–ª—å–∑–∞', '–∑–¥–æ—Ä–æ–≤', '–≤–∏—Ç–∞–º–∏–Ω', '–ø–æ–ª–µ–∑–Ω–æ', '—É–ª—É—á—à–∞–µ—Ç']):
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['health'])
                elif any(word in sentence.lower() for word in ['—Å–æ–≤–µ—Ç', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', '–ø–æ–¥—Å–∫–∞–∑–∫–∞', '–≤–∞–∂–Ω–æ']):
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['tip'])
                elif any(word in sentence.lower() for word in ['—É—Å–∫–æ—Ä—è–µ—Ç', '—É–ª—É—á—à–∞–µ—Ç', '–ø–æ–º–æ–≥–∞–µ—Ç', '—Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç']):
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['benefit'])
                elif any(word in sentence.lower() for word in ['–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—É—á–µ–Ω—ã–µ', '–Ω–∞—É–∫–∞', '–¥–æ–∫–∞–∑–∞–Ω–æ']):
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['science'])
                else:
                    emoji = random.choice(ContentFormatter.EMOJI_MAPPING['start'])
                
                formatted_sentences.append(f"{emoji} {sentence.strip()}.")
        
        return ' '.join(formatted_sentences)
    
    @staticmethod
    def generate_kbju():
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£"""
        calories = random.randint(180, 450)
        proteins = random.randint(8, 25)
        fats = random.randint(5, 20)
        carbs = random.randint(20, 60)
        
        return {
            'calories': calories,
            'proteins': proteins,
            'fats': fats,
            'carbs': carbs
        }
    
    @staticmethod
    def format_kbju(kbju_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ö–ë–ñ–£ –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É"""
        return f"üçΩÔ∏è –ö–ë–ñ–£: {kbju_data['calories']} –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: {kbju_data['proteins']}–≥ ‚Ä¢ –ñ–∏—Ä—ã: {kbju_data['fats']}–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {kbju_data['carbs']}–≥"
    
    @staticmethod
    def format_footer(channel_link="@ppsupershef", group_link="@ppsupershef_chat"):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∞–∫—Ü–∏–π
        reactions_line = " | ".join([f"{reaction['emoji']} {reaction['text']}" for reaction in ContentFormatter.REACTIONS])
        
        footer = f"""
        
üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí {channel_link}
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí {group_link}

{reactions_line}

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí {channel_link}
        """
        return footer

    @staticmethod
    def add_visual_content(content_type='random'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if content_type == 'random':
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = random.choice(list(ContentFormatter.VISUAL_CONTENT.keys()))
        
        if content_type in ContentFormatter.VISUAL_CONTENT:
            item = random.choice(ContentFormatter.VISUAL_CONTENT[content_type])
            return f"\n\n{item['emoji']} <b>{item['title']}</b>\n{item['desc']} - —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏! üìå"
        return ""

    @staticmethod
    def add_engagement_booster():
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""
        booster = random.choice(ContentFormatter.ENGAGEMENT_BOOSTERS)
        
        if booster['type'] == 'social_mention':
            return f"\n\n{booster['text']}"
        elif booster['type'] == 'repost':
            return f"\n\n{booster['emoji']} {booster['text']}"
        elif booster['type'] == 'user_content':
            return f"\n\n{booster['text']}"
        elif booster['type'] == 'question':
            return f"\n\n{booster['text']}"
        elif booster['type'] == 'challenge':
            return f"\n\n{booster['text']}"
        
        return ""

    @staticmethod
    def add_interactive_element(element_type='poll'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        if element_type == 'poll' and ContentFormatter.INTERACTIVE_ELEMENTS['polls']:
            poll = random.choice(ContentFormatter.INTERACTIVE_ELEMENTS['polls'])
            return f"\n\n{poll['emoji']} <b>{poll['question']}</b>"
        return ""

    @staticmethod
    def format_recipe_content(title, content, include_kbju=True):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –ö–ë–ñ–£, —ç–º–æ–¥–∑–∏ –∏ —Ñ—É—Ç–µ—Ä–æ–º"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ö–ë–ñ–£
        if include_kbju:
            kbju_data = ContentFormatter.generate_kbju()
            kbju_line = ContentFormatter.format_kbju(kbju_data) + "\n\n"
        else:
            kbju_line = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç
        formatted_content = ContentFormatter.add_emojis_to_text(content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
        footer = ContentFormatter.format_footer()
        
        return f"{title}\n\n{kbju_line}{formatted_content}{footer}"

    @staticmethod
    def format_recipe_content_enhanced(title, content, include_visual=True, include_engagement=True, include_interactive=True):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted_content = ContentFormatter.format_recipe_content(title, content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if include_visual and random.random() < 0.3:
            visual_block = ContentFormatter.add_visual_content()
            formatted_content += visual_block
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if include_engagement and random.random() < 0.4:
            engagement_block = ContentFormatter.add_engagement_booster()
            formatted_content += engagement_block
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if include_interactive and random.random() < 0.25:
            interactive_block = ContentFormatter.add_interactive_element()
            formatted_content += interactive_block
        
        return formatted_content

class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        kemerovo_time_str: —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM' –ø–æ –ö–µ–º–µ—Ä–æ–≤–æ
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM' –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –ö–µ–º–µ—Ä–æ–≤–æ
            today = datetime.now(Config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TIMEZONE)
            
            return server_dt.strftime('%H:%M')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def server_to_kemerovo_time(server_time_str):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è
        """
        try:
            today = datetime.now(Config.SERVER_TIMEZONE).date()
            server_dt = datetime.combine(today, datetime.strptime(server_time_str, '%H:%M').time())
            server_dt = Config.SERVER_TIMEZONE.localize(server_dt)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è
            kemerovo_dt = server_dt.astimezone(Config.KEMEROVO_TIMEZONE)
            
            return kemerovo_dt.strftime('%H:%M')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {server_time_str}: {e}")
            return server_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        server_now = datetime.now(Config.SERVER_TIMEZONE)
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_timezone': str(Config.SERVER_TIMEZONE),
            'kemerovo_timezone': str(Config.KEMEROVO_TIMEZONE)
        }

class TelegramPolls:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ –≤ Telegram"""
    
    def __init__(self, bot_token):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def create_poll(self, chat_id, question, options, is_anonymous=True, allows_multiple_answers=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendPoll"
            payload = {
                'chat_id': chat_id,
                'question': question,
                'options': options,
                'is_anonymous': is_anonymous,
                'allows_multiple_answers': allows_multiple_answers,
                'type': 'regular'
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {question}")
                return result['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    def send_scheduled_poll(self, chat_id, poll_type='content_preference'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        formatter = ContentFormatter()
        
        if poll_type == 'content_preference':
            poll_data = random.choice(formatter.INTERACTIVE_ELEMENTS['polls'])
            return self.create_poll(chat_id, poll_data['question'], poll_data['options'])
        
        return None

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.group = Config.TELEGRAM_GROUP
        self.polls_manager = TelegramPolls(self.token)
        self.formatter = ContentFormatter()
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.token:
                return {"status": "error", "message": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            return {
                "status": "success", 
                "bot": bot_info['result']['username'],
                "channel_id": self.channel
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def send_poll(self, poll_type='content_preference'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            return self.polls_manager.send_scheduled_poll(self.channel, poll_type)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    def send_visual_content(self, content_type='infographics'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            visual_item = random.choice(self.formatter.VISUAL_CONTENT[content_type])
            message = f"""üé® <b>{visual_item['title']}</b>

{visual_item['desc']}

üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É - –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è!

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ

#–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ #—Å–æ–≤–µ—Ç—ã #–ø–∏—Ç–∞–Ω–∏–µ"""
            
            return self.send_to_telegram(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
            return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.formatter = ContentFormatter()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1000
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': '''–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
                        
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:
- –ü–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
- –£–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
- –û–ø–∏—Å—ã–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –î–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–µ –±–ª—é–¥–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
- –ü–∏—à–∏ –≤ –¥—Ä—É–∂–µ—Å–∫–æ–º –∏ motivating —Ç–æ–Ω–µ'''
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None
    
    def generate_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏ –≤–∫—É—Å–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞. –í–∫–ª—é—á–∏:
1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
2. –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
3. –ü–æ–ª—å–∑–∞ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
4. –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–∞—á–µ –∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º

–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è."""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_recipe_content_enhanced("üç≥ –ó–ê–í–¢–†–ê–ö", content)
        
        # Fallback –∫–æ–Ω—Ç–µ–Ω—Ç
        fallback_content = """–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥, –º–æ–ª–æ–∫–æ - 200–º–ª, –±–∞–Ω–∞–Ω - 1—à—Ç, –º–µ–¥ - 1—á–ª, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20–≥, —è–≥–æ–¥—ã - –≥–æ—Ä—Å—Ç—å. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–∏–º –º–æ–ª–æ–∫–æ–º –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ 5 –º–∏–Ω—É—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –±–∞–Ω–∞–Ω, –º–µ–¥ –∏ –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–µ –æ—Ä–µ—Ö–∏. –£–∫—Ä–∞—Å—å—Ç–µ —Å–≤–µ–∂–∏–º–∏ —è–≥–æ–¥–∞–º–∏. –≠—Ç–æ—Ç –∑–∞–≤—Ç—Ä–∞–∫ –±–æ–≥–∞—Ç –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π –∏ –¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å."""
        return self.formatter.format_recipe_content_enhanced("üç≥ –ó–ê–í–¢–†–ê–ö", fallback_content)
    
    def generate_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞"""
        prompt = """–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–µ–¥–∞. –í–∫–ª—é—á–∏:
1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
2. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
3. –ü–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥–∞
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏

–û–±–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—ã—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_recipe_content_enhanced("üç≤ –û–ë–ï–î", content)
        
        fallback_content = """–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥, –≥—Ä–µ—á–∫–∞ - 100–≥, –º–æ—Ä–∫–æ–≤—å - 1—à—Ç, –ª—É–∫ - 1—à—Ç, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1—Å—Ç–ª, —Å–ø–µ—Ü–∏–∏. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É. –ù–∞—Ä–µ–∂—å—Ç–µ –∫—É—Ä–∏—Ü—É –∫—É–±–∏–∫–∞–º–∏ –∏ –æ–±–∂–∞—Ä—å—Ç–µ —Å –ª—É–∫–æ–º –∏ –º–æ—Ä–∫–æ–≤—å—é. –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∏ –∏ —Ç—É—à–∏—Ç–µ 15 –º–∏–Ω—É—Ç. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –≥—Ä–µ—á–∫–æ–π. –≠—Ç–æ –±–ª—é–¥–æ –±–æ–≥–∞—Ç–æ –±–µ–ª–∫–æ–º –∏ —Å–ª–æ–∂–Ω—ã–º–∏ —É–≥–ª–µ–≤–æ–¥–∞–º–∏."""
        return self.formatter.format_recipe_content_enhanced("üç≤ –û–ë–ï–î", fallback_content)
    
    def generate_science(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompt = "–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ü–∏—Ñ—Ä—ã."
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            formatted_content = self.formatter.add_emojis_to_text(content)
            footer = self.formatter.format_footer()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            enhanced_content = formatted_content
            
            if random.random() < 0.3:
                enhanced_content += self.formatter.add_visual_content()
            
            if random.random() < 0.4:
                enhanced_content += self.formatter.add_engagement_booster()
            
            if random.random() < 0.25:
                enhanced_content += self.formatter.add_interactive_element()
            
            return f"üî¨ –ù–ê–£–ö–ê –û –ü–ò–¢–ê–ù–ò–ò\n\n{enhanced_content}{footer}"
        
        fallback_content = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç —É–ª—É—á—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞. –î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω —Ä—ã–±—É –∏ –æ—Ä–µ—Ö–∏. –£—á–µ–Ω—ã–µ –¥–æ–∫–∞–∑–∞–ª–∏ —á—Ç–æ —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –¥–∏–µ—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —á—Ç–æ –∑–µ–ª–µ–Ω—ã–π —á–∞–π —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º."
        formatted_content = self.formatter.add_emojis_to_text(fallback_content)
        footer = self.formatter.format_footer()
        return f"üî¨ –ù–ê–£–ö–ê –û –ü–ò–¢–ê–ù–ò–ò\n\n{formatted_content}{footer}"
    
    def generate_interval(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
        prompt = "–ù–∞–ø–∏—à–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–º –≥–æ–ª–æ–¥–∞–Ω–∏–∏. –í–∫–ª—é—á–∏ –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            formatted_content = self.formatter.add_emojis_to_text(content)
            footer = self.formatter.format_footer()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            enhanced_content = formatted_content
            
            if random.random() < 0.3:
                enhanced_content += self.formatter.add_visual_content()
            
            if random.random() < 0.4:
                enhanced_content += self.formatter.add_engagement_booster()
            
            if random.random() < 0.25:
                enhanced_content += self.formatter.add_interactive_element()
            
            return f"‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï\n\n{enhanced_content}{footer}"
        
        fallback_content = "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ 3-4 —á–∞—Å–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ 16/8 —É–ª—É—á—à–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏. –í–µ—á–µ—Ä–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –≤ –ø–∏—Ç–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É."
        formatted_content = self.formatter.add_emojis_to_text(fallback_content)
        footer = self.formatter.format_footer()
        return f"‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï\n\n{formatted_content}{footer}"
    
    def generate_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–∂–∏–Ω–∞"""
        prompt = """–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç –ª–µ–≥–∫–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ —É–∂–∏–Ω–∞. –í–∫–ª—é—á–∏:
1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
2. –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è 
3. –ü–æ–ª—å–∑–∞ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
4. –°–æ–≤–µ—Ç—ã –ø–æ –ª–µ–≥–∫–æ–º—É —É—Å–≤–æ–µ–Ω–∏—é

–£–∂–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–∏–º –Ω–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º."""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_recipe_content_enhanced("üçΩÔ∏è –£–ñ–ò–ù", content)
        
        fallback_content = """–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: —Ç–≤–æ—Ä–æ–≥ - 150–≥, —è–π—Ü–æ - 1—à—Ç, –æ–≤—Å—è–Ω—ã–µ –æ—Ç—Ä—É–±–∏ - 2—Å—Ç–ª, —Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å - 0.5—á–ª, —Å–ø–µ—Ü–∏–∏. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –í—ã–ø–µ–∫–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–æ—á–∫–∞—Ö 25 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C. –õ–µ–≥–∫–∏–π —É–∂–∏–Ω –±–æ–≥–∞—Ç –±–µ–ª–∫–æ–º –∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –º—ã—à—Ü. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
        return self.formatter.format_recipe_content_enhanced("üçΩÔ∏è –£–ñ–ò–ù", fallback_content)
    
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        prompt = "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ."
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            formatted_content = self.formatter.add_emojis_to_text(content)
            footer = self.formatter.format_footer()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            enhanced_content = formatted_content
            
            if random.random() < 0.3:
                enhanced_content += self.formatter.add_visual_content()
            
            if random.random() < 0.4:
                enhanced_content += self.formatter.add_engagement_booster()
            
            if random.random() < 0.25:
                enhanced_content += self.formatter.add_interactive_element()
            
            return f"üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê\n\n{enhanced_content}{footer}"
        
        fallback_content = "–ü–µ–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞—Ä–µ–ª–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ä—Ü–∏–π. –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–µ–ª–æ–∫ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏. –ì–æ—Ç–æ–≤—å—Ç–µ –µ–¥—É –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ï—à—å—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ."
        formatted_content = self.formatter.add_emojis_to_text(fallback_content)
        footer = self.formatter.format_footer()
        return f"üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê\n\n{formatted_content}{footer}"

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
class ContentScheduler:
    def __init__(self):
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–∏ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)
        self.kemerovo_schedule = {
            "07:00": {"type": "breakfast", "name": "üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "generator": "generate_breakfast"},
            "12:00": {"type": "lunch", "name": "üç≤ –û–±–µ–¥", "generator": "generate_lunch"},
            "16:00": {"type": "science", "name": "üî¨ –ù–∞—É–∫–∞", "generator": "generate_science"},
            "18:00": {"type": "interval", "name": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª", "generator": "generate_interval"},
            "19:00": {"type": "dinner", "name": "üçΩÔ∏è –£–∂–∏–Ω", "generator": "generate_dinner"},
            "21:00": {"type": "expert_advice", "name": "üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "generator": "generate_expert_advice"}
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Å–æ–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.special_schedule = {
            "15:00": {"type": "visual_content", "name": "üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", "handler": "send_visual_content"},
            "20:00": {"type": "poll", "name": "üìä –û–ø—Ä–æ—Å", "handler": "send_poll"},
            "14:00": {"type": "engagement_post", "name": "üì± –ü–æ—Å—Ç –≤–æ–≤–ª–µ—á–µ–Ω–∏—è", "handler": "send_engagement_post"}
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.server_schedule = self._convert_schedule(self.kemerovo_schedule)
        self.server_special_schedule = self._convert_schedule(self.special_schedule)
        
        self.is_running = False
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    def _convert_schedule(self, schedule):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        converted = {}
        for kemerovo_time, event in schedule.items():
            server_time = TimeZoneConverter.kemerovo_to_server_time(kemerovo_time)
            converted[server_time] = event
            logger.info(f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–µ–º–µ—Ä–æ–≤–æ {kemerovo_time} -> –°–µ—Ä–≤–µ—Ä {server_time} - {event['name']}")
        return converted

    def get_schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        return {
            'kemerovo_schedule': self.kemerovo_schedule,
            'server_schedule': self.server_schedule,
            'special_schedule': self.special_schedule
        }
    
    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
        current_times = TimeZoneConverter.get_current_times()
        current_server_time = current_times['server_time'][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ HH:MM
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        all_events = {**self.server_schedule, **self.server_special_schedule}
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        times_today = [t for t in all_events.keys() if t > current_server_time]
        if times_today:
            next_server_time = min(times_today)
            next_event = all_events[next_server_time]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            next_kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(next_server_time)
            
            return next_server_time, next_kemerovo_time, next_event
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–≤—Ç—Ä–∞
        first_server_time = min(all_events.keys())
        first_event = all_events[first_server_time]
        first_kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(first_server_time)
        
        return first_server_time, first_kemerovo_time, first_event
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
        if self.is_running:
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        for server_time, event in self.server_schedule.items():
            kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(server_time)
            self._schedule_regular_content(server_time, event, kemerovo_time)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        for server_time, event in self.server_special_schedule.items():
            kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(server_time)
            self._schedule_special_content(server_time, event, kemerovo_time)
        
        self.is_running = True
        self._run_scheduler()

    def _schedule_regular_content(self, server_time, event, kemerovo_time):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        method_name = event['generator']
        method = getattr(content_gen, method_name)
        
        def job():
            current_times = TimeZoneConverter.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['type']} (–ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            content = method()
            if content:
                # –£–±—Ä–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
                content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = elite_channel.send_to_telegram(content_with_time)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['type']}")
        
        schedule.every().day.at(server_time).do(job)
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {server_time} - {event['name']}")

    def _schedule_special_content(self, server_time, event, kemerovo_time):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        def job():
            current_times = TimeZoneConverter.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['type']} (–ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time})")
            
            if event['type'] == 'visual_content':
                # –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content_type = random.choice(['infographics', 'checklists', 'guides'])
                elite_channel.send_visual_content(content_type)
                
            elif event['type'] == 'poll':
                elite_channel.send_poll()
                
            elif event['type'] == 'engagement_post':
                self._send_engagement_post()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if random.random() < 0.6:  # 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            schedule.every().day.at(server_time).do(job)
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {server_time} - {event['name']}")

    def _send_engagement_post(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è"""
        booster = random.choice(ContentFormatter.ENGAGEMENT_BOOSTERS)
        message = f"""üì± <b>–í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ê–£–î–ò–¢–û–†–ò–ï–ô</b>

{booster['text']}

üí´ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ!

üéØ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º - –≤–∞—à –æ–ø—ã—Ç –≤–∞–∂–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí @ppsupershef_chat

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""

        elite_channel.send_to_telegram(message)

    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        def run_scheduler():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        
        thread = Thread(target=run_scheduler, daemon=True)
        thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
elite_channel = EliteChannel()
content_gen = ContentGenerator()
content_scheduler = ContentScheduler()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    content_scheduler.start_scheduler()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    current_times = TimeZoneConverter.get_current_times()
    logger.info(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}")
    logger.info(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        next_server_time, next_kemerovo_time, next_event = content_scheduler.get_next_event()
        connection_info = elite_channel.test_connection()
        current_times = TimeZoneConverter.get_current_times()
        schedule_info = content_scheduler.get_schedule()
        
        html = f"""
        <html>
            <head>
                <title>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                    .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                    .time-info {{ background: #3498db; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .schedule-container {{ display: flex; gap: 20px; margin: 20px 0; }}
                    .schedule {{ flex: 1; background: #ecf0f1; padding: 20px; border-radius: 5px; }}
                    .event {{ padding: 10px; margin: 5px 0; background: white; border-left: 4px solid #3498db; }}
                    .event-kemerovo {{ border-left-color: #e74c3c; }}
                    .event-special {{ border-left-color: #9b59b6; }}
                    .status-success {{ color: #27ae60; }}
                    .status-error {{ color: #e74c3c; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; }}
                    .preview {{ background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; border-left: 4px solid #27ae60; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üç≥ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                        <p>ID –∫–∞–Ω–∞–ª–∞: {Config.TELEGRAM_CHANNEL}</p>
                        <p class="status-{'success' if connection_info.get('status') == 'success' else 'error'}">
                            –°—Ç–∞—Ç—É—Å: {connection_info.get('status', 'unknown')}
                        </p>
                    </div>
                    
                    <div class="time-info">
                        <h3>üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏</h3>
                        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: <strong>{current_times['server_time']}</strong> ({current_times['server_timezone']})</p>
                        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: <strong>{current_times['kemerovo_time']}</strong> ({current_times['kemerovo_timezone']})</p>
                        <p>–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: <strong>+{Config.TIME_DIFFERENCE_HOURS} —á–∞—Å–æ–≤</strong> (–ö–µ–º–µ—Ä–æ–≤–æ –≤–ø–µ—Ä–µ–¥)</p>
                    </div>
                    
                    <div class="preview">
                        <h3>üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                        <p><strong>–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∫–ª—é—á–∞–µ—Ç:</strong></p>
                        <ul>
                            <li>üçΩÔ∏è –ö–ë–ñ–£ –≤ –Ω–∞—á–∞–ª–µ —Ä–µ—Ü–µ–ø—Ç–∞</li>
                            <li>üéØ –≠–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
                            <li>üì¢ –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ü–µ</li>
                            <li>üòã –†–µ–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è</li>
                            <li>üîÑ –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"</li>
                            <li>üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞</li>
                            <li>üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã</li>
                            <li>üì± –≠–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏</li>
                        </ul>
                    </div>
                    
                    <div class="schedule-container">
                        <div class="schedule">
                            <h3>üìÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è)</h3>
        """
        
        for time_str, event in schedule_info['kemerovo_schedule'].items():
            is_next = " (–°–ª–µ–¥—É—é—â–∞—è)" if time_str == next_kemerovo_time else ""
            html += f'<div class="event event-kemerovo">{time_str} - {event["name"]}{is_next}</div>'
        
        html += """
                        </div>
                        
                        <div class="schedule">
                            <h3>üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è)</h3>
        """
        
        for time_str, event in schedule_info['special_schedule'].items():
            html += f'<div class="event event-special">{time_str} - {event["name"]}</div>'
        
        html += f"""
                        </div>
                    </div>
                    
                    <div>
                        <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <a class="btn" href="/test-channel">–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</a>
                        <a class="btn" href="/debug">–û—Ç–ª–∞–¥–∫–∞</a>
                        <a class="btn" href="/health">Health Check</a>
                        <a class="btn" href="/time-info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏</a>
                        <a class="btn" href="/preview-format" style="background: #27ae60;">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞</a>
                        <a class="btn" href="/send-poll" style="background: #9b59b6;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å</a>
                        <a class="btn" href="/send-visual-content" style="background: #e67e22;">–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</a>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <h3>üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
        """
        
        for event in schedule_info['kemerovo_schedule'].values():
            html += f'<a class="btn" href="/send-now/{event["type"]}" style="background: #9b59b6;">{event["name"]}</a>'
        
        html += f"""
                    </div>
                    
                    <div style="margin-top: 20px; color: #7f8c8d;">
                        <p>–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: <strong>{next_kemerovo_time} - {next_event['name']}</strong> (–ö–µ–º–µ—Ä–æ–≤–æ)</p>
                        <p>–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: <strong>{next_server_time}</strong></p>
                        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}</p>
                    </div>
                </div>
            </body>
        </html>
        """
        
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return f"""
        <html>
            <body>
                <h1>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                <p>–û—à–∏–±–∫–∞: {str(e)}</p>
                <p><a href="/debug">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–ª–∞–¥–∫–µ</a></p>
            </body>
        </html>
        """

@app.route('/preview-format')
def preview_format():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        example_content = content_gen.generate_breakfast()
        
        html = f"""
        <html>
            <head>
                <title>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞ - @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                    .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
                    .header {{ background: #27ae60; color: white; padding: 20px; border-radius: 5px; }}
                    .preview {{ background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; border: 2px dashed #3498db; }}
                    .preview-content {{ white-space: pre-wrap; font-family: 'Courier New', monospace; line-height: 1.5; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h1>
                        <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram</p>
                    </div>
                    
                    <div>
                        <h3>üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</h3>
                        <ul>
                            <li><strong>üçΩÔ∏è –ö–ë–ñ–£</strong> - –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞</li>
                            <li><strong>üéØ –≠–º–æ–¥–∑–∏</strong> - –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
                            <li><strong>üì¢ –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é</strong> - –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è</li>
                            <li><strong>üòã –†–µ–∞–∫—Ü–∏–∏</strong> - –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏</li>
                            <li><strong>üîÑ –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"</strong> - –¥–ª—è –≤–∏—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è</li>
                            <li><strong>üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</strong> - –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ —á–µ–∫-–ª–∏—Å—Ç—ã</li>
                            <li><strong>üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã</strong> - –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏</li>
                            <li><strong>üì± –≠–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è</strong> - —Ä–µ–ø–æ—Å—Ç—ã, –æ—Ç–º–µ—Ç–∫–∏, —á–µ–ª–ª–µ–Ω–¥–∂–∏</li>
                        </ul>
                    </div>
                    
                    <div class="preview">
                        <h3>üìù –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</h3>
                        <div class="preview-content">{example_content}</div>
                    </div>
                    
                    <div>
                        <a class="btn" href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
                        <a class="btn" href="/send-now/breakfast" style="background: #27ae60;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>
                    </div>
                </div>
            </body>
        </html>
        """
        
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ preview-format: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@app.route('/send-poll')
def send_poll_route():
    """–†—É—á–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
    try:
        result = elite_channel.send_poll()
        if result:
            return jsonify({
                "status": "success",
                "message": "–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                "poll_id": result.get('poll', {}).get('id')
            })
        else:
            return jsonify({
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å"
            })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-visual-content')
def send_visual_content_route():
    """–†—É—á–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content_type = request.args.get('type', 'infographics')
        success = elite_channel.send_visual_content(content_type)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/time-info')
def time_info():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏"""
    current_times = TimeZoneConverter.get_current_times()
    schedule_info = content_scheduler.get_schedule()
    
    return jsonify({
        "current_times": current_times,
        "schedules": schedule_info,
        "time_difference_hours": Config.TIME_DIFFERENCE_HOURS,
        "next_event": content_scheduler.get_next_event()
    })

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    connection_test = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    
    return jsonify({
        "status": "active",
        "telegram_channel_id": Config.TELEGRAM_CHANNEL,
        "channel_username": "@ppsupershef",
        "bot_token_exists": bool(Config.TELEGRAM_BOT_TOKEN),
        "scheduler_status": "running" if content_scheduler.is_running else "stopped",
        "connection_test": connection_test,
        "time_info": current_times,
        "time_difference": f"+{Config.TIME_DIFFERENCE_HOURS} hours (Kemerovo ahead)",
        "environment": "production" if os.getenv('PRODUCTION') else "development"
    })

@app.route('/send-now/<content_type>')
def send_now(content_type):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content = None
        
        if content_type == 'breakfast':
            content = content_gen.generate_breakfast()
        elif content_type == 'lunch':
            content = content_gen.generate_lunch()
        elif content_type == 'science':
            content = content_gen.generate_science()
        elif content_type == 'dinner':
            content = content_gen.generate_dinner()
        elif content_type == 'interval':
            content = content_gen.generate_interval()
        elif content_type == 'expert_advice':
            content = content_gen.generate_expert_advice()
        else:
            return jsonify({
                "status": "error", 
                "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}"
            })
        
        if not content:
            return jsonify({
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞)
        current_times = TimeZoneConverter.get_current_times()
        content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = elite_channel.send_to_telegram(content_with_time)
        
        if success:
            return jsonify({
                "status": "success",
                "message": f"–ö–æ–Ω—Ç–µ–Ω—Ç '{content_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª",
                "channel_id": Config.TELEGRAM_CHANNEL,
                "kemerovo_time": current_times['kemerovo_time'],
                "server_time": current_times['server_time']
            })
        else:
            return jsonify({
                "status": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '{content_type}'"
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send-now: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
    current_times = TimeZoneConverter.get_current_times()
    test_message = f"""‚úÖ –¢–ï–°–¢: –ö–∞–Ω–∞–ª @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç!

üçΩÔ∏è –ö–ë–ñ–£: 250 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 15–≥ ‚Ä¢ –ñ–∏—Ä—ã: 8–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 30–≥

üç≥ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
üë®‚Äçüç≥ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
üí´ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

üìä <b>–ü—Ä–∞–≤–∏–ª–æ —Ç–∞—Ä–µ–ª–∫–∏</b>
–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏! üìå

üì± –û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å –≤ —Å—Ç–æ—Ä–∏—Å! –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –±–ª—é–¥–∞ —Å —Ç–µ–≥–æ–º #ppsupershef

üìä <b>–ì–æ–ª–æ—Å—É–π—Ç–µ: –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?</b>

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí @ppsupershef_chat

üòã –≤–∫—É—Å–Ω–æ | üí™ –ø–æ–ª–µ–∑–Ω–æ | üë®‚Äçüç≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é | üìù –∑–∞–ø–∏—à—É —Å–µ–±–µ | üìö –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef

üïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"""
    
    success = elite_channel.send_to_telegram(test_message)
    
    return jsonify({
        "status": "success" if success else "error",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "channel_id": Config.TELEGRAM_CHANNEL,
        "kemerovo_time": current_times['kemerovo_time'],
        "server_time": current_times['server_time'],
        "timestamp": datetime.now(Config.SERVER_TIMEZONE).isoformat()
    })

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    connection = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now(Config.SERVER_TIMEZONE).isoformat(),
        "telegram_connection": connection,
        "scheduler_running": content_scheduler.is_running,
        "channel": "@ppsupershef",
        "time_info": current_times
    })

@app.route('/content-stats')
def content_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    formatter = ContentFormatter()
    
    return jsonify({
        "visual_content_types": len(formatter.VISUAL_CONTENT),
        "engagement_boosters": len(formatter.ENGAGEMENT_BOOSTERS),
        "interactive_polls": len(formatter.INTERACTIVE_ELEMENTS['polls']),
        "total_variations": len(formatter.VISUAL_CONTENT) + len(formatter.ENGAGEMENT_BOOSTERS)
    })

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞: @ppsupershef")
    logger.info(f"üìã ID –∫–∞–Ω–∞–ª–∞: {Config.TELEGRAM_CHANNEL}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    current_times = TimeZoneConverter.get_current_times()
    logger.info(f"üåç –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {current_times['server_time']}")
    logger.info(f"üåç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
