import os
import requests
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from threading import Thread
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
app = Flask(__name__)

# –ö–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '@ppsupershef')
TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')  # –ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
YANDEX_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')

class CommentManager:
    def __init__(self, ai_generator):
        self.ai_generator = ai_generator
        self.processed_comments = set()  # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –¥–≤–∞–∂–¥—ã
        self.expert_roles = {
            "nutritionist": "üß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º",
            "chef": "üë®‚Äçüç≥ –®–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω", 
            "trainer": "üí™ –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        }
    
    def should_respond(self, comment_text, comment_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        if comment_id in self.processed_comments:
            return False
            
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ/–Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if len(comment_text.strip()) < 10:
            return False
            
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞
        trigger_words = [
            '–≤–æ–ø—Ä–æ—Å', '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '–∫–∞–∫', '–ø–æ—á–µ–º—É', 
            '—á—Ç–æ', '–º–æ–∂–Ω–æ –ª–∏', '—Å—Ç–æ–∏—Ç –ª–∏', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–º–æ–≥–∏',
            '—Ä–µ—Ü–µ–ø—Ç', '–ø–∏—Ç–∞–Ω–∏–µ', '–¥–∏–µ—Ç–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ø–æ—Ö—É–¥–µ–Ω–∏–µ',
            '–±–µ–ª–∫–∏', '–∂–∏—Ä—ã', '—É–≥–ª–µ–≤–æ–¥—ã', '–∫–∞–ª–æ—Ä–∏–∏', '–º–µ—Ç–∞–±–æ–ª–∏–∑–º'
        ]
        
        comment_lower = comment_text.lower()
        return any(word in comment_lower for word in trigger_words)
    
    def generate_ai_response(self, comment_text, username, expert_role="nutritionist"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        
        prompt = f"""
        –¢—ã {self.expert_roles[expert_role]}. –û—Ç–≤–µ—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ.

        –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –û–¢ {username}: "{comment_text}"

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
        - –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
        - –û—Ç–≤–µ—Ç—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç
        - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
        - –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ü–æ–¥–ø–∏—à–∏—Å—å –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ–Ω—Ü–µ

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        [–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç —Å —Å–æ–≤–µ—Ç–æ–º] [–≠–º–æ–¥–∑–∏]

        üíé [–ü–æ–¥–ø–∏—Å—å —ç–∫—Å–ø–µ—Ä—Ç–∞]
        """
        
        response = self.ai_generator.generate_content(prompt, "advice")
        if response:
            return response
        
        # Fallback –æ—Ç–≤–µ—Ç
        return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞. üíé\n\n{self.expert_roles[expert_role]}"
    
    def determine_expert_role(self, comment_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç–∫—Å–ø–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å"""
        comment_lower = comment_text.lower()
        
        # –í–æ–ø—Ä–æ—Å—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä—É
        chef_keywords = ['—Ä–µ—Ü–µ–ø—Ç', '–≥–æ—Ç–æ–≤–∏—Ç—å', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '–±–ª—é–¥–æ', '–≤–∫—É—Å', '–∫—É—Ö–Ω—è', '—à–µ—Ñ']
        if any(word in comment_lower for word in chef_keywords):
            return "chef"
        
        # –í–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–µ—Ä—É
        trainer_keywords = ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Å–ø–æ—Ä—Ç', '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', '—Ñ–∏—Ç–Ω–µ—Å', '–º—ã—à—Ü—ã', '—Å–∏–ª–∞', '–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å']
        if any(word in comment_lower for word in trainer_keywords):
            return "trainer"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥
        return "nutritionist"
    
    def process_comment(self, comment_text, comment_id, username, message_id=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        if not self.should_respond(comment_text, comment_id):
            return None
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞
            expert_role = self.determine_expert_role(comment_text)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.generate_ai_response(comment_text, username, expert_role)
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.processed_comments.add(comment_id)
            
            print(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} –æ—Ç {username}")
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return None

class TelegramWebhookManager:
    def __init__(self, token, comment_manager):
        self.token = token
        self.comment_manager = comment_manager
        self.webhook_url = None
    
    def setup_webhook(self, webhook_url):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram"""
        self.webhook_url = webhook_url
        url = f"https://api.telegram.org/bot{self.token}/setWebhook"
        payload = {
            'url': webhook_url,
            'drop_pending_updates': True
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def send_reply(self, chat_id, message_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'reply_to_message_id': message_id
        }
        
        try:
            response = requests.post(url, json=payload)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–æ–±–∞–≤–∏—Ç—å –≤ EliteContentManager)
class EliteContentManager:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL
        self.timezone_offset = 7
        self.ai_generator = AIContentGenerator()
        self.comment_manager = CommentManager(self.ai_generator)  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
        self.webhook_manager = TelegramWebhookManager(self.token, self.comment_manager)
        self.content_strategy = self._initialize_content_strategy()
        self.last_sent_times = {}
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
elite_channel = EliteContentManager()

# Webhook endpoint –¥–ª—è Telegram
@app.route('/webhook/telegram', methods=['POST'])
def telegram_webhook():
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook –æ—Ç Telegram"""
    try:
        data = request.get_json()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üì® –í—Ö–æ–¥—è—â–∏–π webhook: {json.dumps(data, ensure_ascii=False)[:500]}...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'message' in data:
            message = data['message']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            chat_id = message.get('chat', {}).get('id')
            message_id = message.get('message_id')
            text = message.get('text', '')
            username = message.get('from', {}).get('username', '–ê–Ω–æ–Ω–∏–º')
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (message.get('from', {}).get('is_bot', False) or 
                not text.strip() or
                text.startswith('/')):
                return 'ok'
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            response_text = elite_channel.comment_manager.process_comment(
                text, message_id, username, message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if response_text:
                success = elite_channel.webhook_manager.send_reply(
                    chat_id, message_id, response_text
                )
                if success:
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message_id}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message_id}")
        
        return 'ok'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return 'error', 500

# –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        kemerovo_time = elite_channel.get_kemerovo_time()
        weekday = kemerovo_time.weekday()
        theme = elite_channel.content_strategy["weekly_themes"][weekday]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        now = kemerovo_time
        schedule_status = {
            'breakfast': "‚úÖ" if now.hour >= 7 else "‚è∞",
            'lunch': "‚úÖ" if now.hour >= 12 else "‚è∞", 
            'science': "‚úÖ" if now.hour >= 15 else "‚è∞",
            'visual': "‚úÖ" if now.hour >= 16 and now.day % 2 == 0 else "‚è∞",
            'interactive': "‚úÖ" if now.hour >= 18 else "‚è∞",
            'dinner': "‚úÖ" if now.hour >= 19 else "‚è∞",
            'expert_advice': "‚úÖ" if now.hour >= 21 else "‚è∞"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if elite_channel.webhook_manager.webhook_url else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        return f"""
        <html>
            <head>
                <title>@ppsupershef - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f0f2f5; }}
                    .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                    .status {{ padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid; }}
                    .success {{ background: #e8f5e8; border-color: #4CAF50; }}
                    .warning {{ background: #fff3cd; border-color: #ffc107; }}
                    .error {{ background: #f8d7da; border-color: #dc3545; }}
                    .schedule {{ background: #e9ecef; padding: 15px; border-radius: 8px; margin: 15px 0; }}
                    .schedule-item {{ display: flex; align-items: center; margin: 8px 0; }}
                    .time {{ font-weight: bold; width: 80px; }}
                    .emoji {{ font-size: 20px; margin-right: 10px; }}
                    .buttons {{ margin-top: 20px; }}
                    .btn {{ display: inline-block; padding: 10px 15px; margin: 5px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }}
                    .btn:hover {{ background: #0056b3; }}
                    .feature {{ background: #d1ecf1; padding: 10px; border-radius: 5px; margin: 5px 0; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üç≥ @ppsupershef - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
                    
                    <div class="status success">
                        <strong>üìç –ö–µ–º–µ—Ä–æ–≤–æ:</strong> {kemerovo_time.strftime('%d.%m %H:%M')} | 
                        <strong>üéØ –¢–µ–º–∞:</strong> {theme} |
                        <strong>üì± –ö–∞–Ω–∞–ª:</strong> @ppsupershef
                    </div>
                    
                    <div class="status {'success' if elite_channel.ai_generator.yandex_gpt.is_active else 'warning'}">
                        <strong>ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è:</strong> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if elite_channel.ai_generator.yandex_gpt.is_active or elite_channel.ai_generator.deepseek_gpt.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
                    </div>
                    
                    <div class="status {'success' if elite_channel.webhook_manager.webhook_url else 'warning'}">
                        <strong>ü§ñ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</strong> {webhook_status}
                    </div>
                    
                    <div class="feature">
                        <strong>üéØ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</strong>
                        <br>‚Ä¢ üß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ - –Ω–∞—É—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                        <br>‚Ä¢ üë®‚Äçüç≥ –®–µ—Ñ - —Ä–µ—Ü–µ–ø—Ç—ã –∏ –≥–æ—Ç–æ–≤–∫–∞  
                        <br>‚Ä¢ üí™ –¢—Ä–µ–Ω–µ—Ä - —Ñ–∏—Ç–Ω–µ—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    </div>
                    
                    <div class="schedule">
                        <h3>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</h3>
                        <div class="schedule-item"><span class="emoji">ü•û</span><span class="time">07:00</span> –ó–∞–≤—Ç—Ä–∞–∫ {schedule_status['breakfast']}</div>
                        <div class="schedule-item"><span class="emoji">üçΩÔ∏è</span><span class="time">12:00</span> –û–±–µ–¥ {schedule_status['lunch']}</div>
                        <div class="schedule-item"><span class="emoji">üß¨</span><span class="time">15:00</span> –ù–∞—É–∫–∞ {schedule_status['science']}</div>
                        <div class="schedule-item"><span class="emoji">üé®</span><span class="time">16:00</span> –í–∏–∑—É–∞–ª {schedule_status['visual']}</div>
                        <div class="schedule-item"><span class="emoji">üí¨</span><span class="time">18:00</span> –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ {schedule_status['interactive']}</div>
                        <div class="schedule-item"><span class="emoji">üçΩÔ∏è</span><span class="time">19:00</span> –£–∂–∏–Ω {schedule_status['dinner']}</div>
                        <div class="schedule-item"><span class="emoji">üåü</span><span class="time">21:00</span> –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ {schedule_status['expert_advice']}</div>
                    </div>
                    
                    <div class="buttons">
                        <a href="/test" class="btn">üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã</a>
                        <a href="/setup-webhook" class="btn">üîó –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Webhook</a>
                        <a href="/force/breakfast" class="btn">üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫</a>
                        <a href="/debug" class="btn">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</a>
                    </div>
                </div>
            </body>
        </html>
        """
    except Exception as e:
        return f"<h1>‚ùå –û—à–∏–±–∫–∞: {e}</h1>"

# Endpoint –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
@app.route('/setup-webhook')
def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram"""
    webhook_url = f"https://{request.host}/webhook/telegram"
    success = elite_channel.webhook_manager.setup_webhook(webhook_url)
    
    if success:
        return f"""
        <html>
            <body>
                <h2>‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</h2>
                <p><strong>URL:</strong> {webhook_url}</p>
                <p>–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π.</p>
                <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
            </body>
        </html>
        """
    else:
        return f"""
        <html>
            <body>
                <h2>‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook</h2>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL.</p>
                <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
            </body>
        </html>
        """

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    webhook_url = f"https://food-telegram-bot.onrender.com/webhook/telegram"
    elite_channel.webhook_manager.setup_webhook(webhook_url)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã @ppsupershef –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {elite_channel.get_kemerovo_time().strftime('%d.%m %H:%M')}")
    print(f"üîó Webhook: {webhook_url}")
    app.run(host='0.0.0.0', port=port, debug=False)
