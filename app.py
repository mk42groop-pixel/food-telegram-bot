import os
import requests
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from threading import Thread
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
app = Flask(__name__)

# –ö–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '@ppsupershef')
YANDEX_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')

class AIContentGenerator:
    def __init__(self):
        self.yandex_gpt = YandexGPT()
        self.deepseek_gpt = DeepSeekGPT()
        print(f"ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: YandexGPT - {'‚úÖ' if self.yandex_gpt.is_active else '‚ùå'}, DeepSeek - {'‚úÖ' if self.deepseek_gpt.is_active else '‚ùå'}")
        
    def generate_content(self, prompt, content_type="recipe"):
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI"""
        # –ü—Ä–æ–±—É–µ–º DeepSeek
        if self.deepseek_gpt.is_active:
            content = self.deepseek_gpt.generate_content(prompt, content_type)
            if content:
                return content
        
        # –ü—Ä–æ–±—É–µ–º Yandex GPT
        if self.yandex_gpt.is_active:
            content = self.yandex_gpt.generate_text(prompt)
            if content:
                return content
        
        return None

class YandexGPT:
    def __init__(self):
        self.api_key = YANDEX_API_KEY
        self.folder_id = YANDEX_FOLDER_ID
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.is_active = bool(self.api_key and self.folder_id)
        print(f"ü§ñ Yandex GPT: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
    def generate_text(self, prompt, temperature=0.7):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        if not self.is_active:
            return None
            
        headers = {
            'Authorization': f'Api-Key {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'modelUri': f'gpt://{self.folder_id}/yandexgpt-lite',
            'completionOptions': {
                'stream': False,
                'temperature': temperature,
                'maxTokens': 2000
            },
            'messages': [
                {
                    'role': 'user',
                    'text': prompt
                }
            ]
        }
        
        try:
            print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ Yandex GPT...")
            response = requests.post(self.base_url, headers=headers, json=data, timeout=30)
            if response.status_code == 200:
                result = response.json()
                text = result['result']['alternatives'][0]['message']['text']
                print(f"‚úÖ Yandex GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT API: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Yandex GPT: {e}")
            return None

class DeepSeekGPT:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.base_url = "https://api.deepseek.com/v1/chat/completions"
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.is_active = bool(self.api_key)
        print(f"ü§ñ DeepSeek GPT: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
    def generate_content(self, prompt, content_type="recipe"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek"""
        if not self.is_active:
            return None
            
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        system_prompts = {
            "recipe": """–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.""",
            "science": """–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –û–±—ä—è—Å–Ω—è–π –Ω–∞—É—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.""",
            "advice": """–¢—ã –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —à–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä."""
        }
        
        data = {
            'model': 'deepseek-chat',
            'messages': [
                {
                    'role': 'system',
                    'content': system_prompts.get(content_type, system_prompts["recipe"])
                },
                {
                    'role': 'user', 
                    'content': prompt
                }
            ],
            'temperature': 0.7,
            'max_tokens': 2000
        }
        
        try:
            print(f"üîÑ –ó–∞–ø—Ä–æ—Å –∫ DeepSeek...")
            response = requests.post(self.base_url, headers=headers, json=data, timeout=30)
            if response.status_code == 200:
                result = response.json()
                text = result['choices'][0]['message']['content']
                print(f"‚úÖ DeepSeek –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å DeepSeek: {e}")
            return None

class EliteContentManager:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL
        self.timezone_offset = 7
        self.ai_generator = AIContentGenerator()
        self.content_strategy = self._initialize_content_strategy()
        self.last_sent_times = {}
        
    def get_kemerovo_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)"""
        utc_time = datetime.now(timezone.utc)
        kemerovo_time = utc_time + timedelta(hours=self.timezone_offset)
        return kemerovo_time
    
    def _initialize_content_strategy(self):
        """–≠–ª–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return {
            "weekly_themes": {
                0: "üß¨ –ù–ê–£–ß–ù–´–ô –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö: –ë–∏–æ—Ö–∏–º–∏—è –ø–∏—Ç–∞–Ω–∏—è",
                1: "üë®‚Äçüç≥ TECH CHECK: –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ–∞", 
                2: "üí¨ –°–†–ï–î–ê –û–¢–í–ï–¢–û–í: –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
                3: "üçΩÔ∏è –†–ï–¶–ï–ü–¢ –ù–ï–î–ï–õ–ò: –®–µ–¥–µ–≤—Ä –æ—Ç –ú–∏—à–ª–µ–Ω",
                4: "üìä –¢–†–ï–ù–î–û–í–ê–Ø –ü–Ø–¢–ù–ò–¶–ê: –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π",
                5: "‚ö° –ë–´–°–¢–†–û & –ó–î–û–†–û–í–û: –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                6: "üéØ –í–û–°–ö–†–ï–°–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢: –ò—Ç–æ–≥–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è"
            }
        }
    
    def generate_elite_content(self, content_type, weekday=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if weekday is None:
            weekday = self.get_kemerovo_time().weekday()
            
        theme = self.content_strategy["weekly_themes"][weekday]
        
        # –ü—Ä–æ–±—É–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        ai_content = self._try_ai_generation(content_type, weekday, theme)
        if ai_content:
            return ai_content
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        return self._get_static_content(content_type, weekday, theme)
    
    def _try_ai_generation(self, content_type, weekday, theme):
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        prompts = {
            'breakfast': f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ nutritional info.",
            'lunch': f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–º—É: {theme}. –° —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ë–ñ–£.",
            'dinner': f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ª–µ–≥–∫–æ–≥–æ —É–∂–∏–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É: {theme}.",
            'science': f"–û–±—ä—è—Å–Ω–∏ –Ω–∞—É—á–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –Ω–∞ —Ç–µ–º—É: {theme}.",
            'expert_advice': f"–î–∞–π —Å–æ–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —à–µ—Ñ, —Ç—Ä–µ–Ω–µ—Ä) –Ω–∞ —Ç–µ–º—É: {theme}.",
            'visual': f"–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ —Ç–µ–º—É: {theme}.",
            'interactive': f"–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ —Ç–µ–º—É: {theme}."
        }
        
        prompt = prompts.get(content_type)
        if not prompt:
            return None
            
        content = self.ai_generator.generate_content(prompt, content_type)
        if content:
            emoji = self._get_content_emoji(content_type)
            return f"{emoji} {content_type.upper()} –ü–†–ï–ú–ò–£–ú\n\n{theme}\n\n{content}"
        
        return None
    
    def _get_content_emoji(self, content_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        emojis = {
            'breakfast': 'üåÖ',
            'lunch': 'üçΩÔ∏è', 
            'dinner': 'üåô',
            'science': 'üß¨',
            'visual': 'üé®',
            'interactive': 'üí¨',
            'expert_advice': 'üåü'
        }
        return emojis.get(content_type, 'üìù')
    
    def _get_static_content(self, content_type, weekday, theme):
        """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ fallback"""
        static_content = {
            'breakfast': [
                "üåÖ –≠–õ–ò–¢–ù–´–ô –ó–ê–í–¢–†–ê–ö: –û–≤—Å—è–Ω–∫–∞ —Å —Å—É–ø–µ—Ä—Ñ—É–¥–∞–º–∏\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ - 200–º–ª\n‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.\n‚Ä¢ –Ø–≥–æ–¥—ã –≥–æ–¥–∂–∏ - 1 —Å—Ç.–ª.\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –í–∞—Ä–∏—Ç—å –æ–≤—Å—è–Ω–∫—É 5 –º–∏–Ω—É—Ç\n2. –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä—Ñ—É–¥—ã\n3. –ü–æ–¥–∞–≤–∞—Ç—å —Ç–µ–ø–ª—ã–º\n\nüìä –ö–ë–ñ–£: 280 –∫–∫–∞–ª",
                "üåÖ –≠–õ–ò–¢–ù–´–ô –ó–ê–í–¢–†–ê–ö: –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º-–ø–∞—à–æ—Ç\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - 2 –ª–æ–º—Ç–∏–∫–∞\n‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç\n‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç\n‚Ä¢ –°–µ–º–µ–Ω–∞ –∫—É–Ω–∂—É—Ç–∞\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –ü–æ–¥–∂–∞—Ä–∏—Ç—å —Ö–ª–µ–±\n2. –†–∞–∑–º—è—Ç—å –∞–≤–æ–∫–∞–¥–æ\n3. –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —è–π—Ü–∞-–ø–∞—à–æ—Ç\n4. –°–æ–±—Ä–∞—Ç—å —Ç–æ—Å—Ç—ã\n\nüìä –ö–ë–ñ–£: 320 –∫–∫–∞–ª"
            ],
            'lunch': [
                "üçΩÔ∏è –û–ë–ï–î –î–õ–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò: –ö–∏–Ω–æ–∞ —Å –æ–≤–æ—â–∞–º–∏\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –ö–∏–Ω–æ–∞ - 100–≥\n‚Ä¢ –û–≤–æ—â–∏ –≥—Ä–∏–ª—å - 200–≥\n‚Ä¢ –ù—É—Ç - 100–≥\n‚Ä¢ –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –û—Ç–≤–∞—Ä–∏—Ç—å –∫–∏–Ω–æ–∞\n2. –û–±–∂–∞—Ä–∏—Ç—å –æ–≤–æ—â–∏\n3. –°–º–µ—à–∞—Ç—å —Å –Ω—É—Ç–æ–º\n4. –ó–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫–æ–º\n\nüìä –ö–ë–ñ–£: 350 –∫–∫–∞–ª",
                "üçΩÔ∏è –û–ë–ï–î –î–õ–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò: –°–∞–ª–∞—Ç —Å –ª–æ—Å–æ—Å–µ–º\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –õ–æ—Å–æ—Å—å - 150–≥\n‚Ä¢ –†—É–∫–∫–æ–ª–∞ - 100–≥\n‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç\n‚Ä¢ –û—Ä–µ—Ö–∏ –≥—Ä–µ—Ü–∫–∏–µ - 30–≥\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –ó–∞–ø–µ—á—å –ª–æ—Å–æ—Å—å\n2. –°–º–µ—à–∞—Ç—å –∑–µ–ª–µ–Ω—å\n3. –î–æ–±–∞–≤–∏—Ç—å –∞–≤–æ–∫–∞–¥–æ\n4. –ü–æ—Å—ã–ø–∞—Ç—å –æ—Ä–µ—Ö–∞–º–∏\n\nüìä –ö–ë–ñ–£: 380 –∫–∫–∞–ª"
            ],
            'dinner': [
                "üåô –£–ñ–ò–ù –î–õ–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: –†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –ú–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 150–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç\n‚Ä¢ –ò–º–±–∏—Ä—å\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –ø–∞—Ä—É 15 –º–∏–Ω\n2. –ü–æ–¥–∞—Ç—å —Å –æ–≤–æ—â–∞–º–∏\n3. –°–±—Ä—ã–∑–Ω—É—Ç—å —Å–æ–µ–≤—ã–º —Å–æ—É—Å–æ–º\n\nüìä –ö–ë–ñ–£: 250 –∫–∫–∞–ª",
                "üåô –£–ñ–ò–ù –î–õ–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: –¢—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏ —Å —Ç–æ—Ñ—É\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –¢–æ—Ñ—É - 150–≥\n‚Ä¢ –¶—É–∫–∏–Ω–∏ - 1 —à—Ç\n‚Ä¢ –ì—Ä–∏–±—ã - 100–≥\n‚Ä¢ –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –û–±–∂–∞—Ä–∏—Ç—å —Ç–æ—Ñ—É\n2. –î–æ–±–∞–≤–∏—Ç—å –æ–≤–æ—â–∏\n3. –¢—É—à–∏—Ç—å 20 –º–∏–Ω—É—Ç\n\nüìä –ö–ë–ñ–£: 280 –∫–∫–∞–ª"
            ],
            'science': [
                "üß¨ –ù–ê–£–ö–ê –ü–ò–¢–ê–ù–ò–Ø: –¶–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã\n\nüìö –§–∞–∫—Ç: –ü—Ä–∏–µ–º –ø–∏—â–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –Ω–∞ 10-15%\n\nüí° –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–≤—Ç—Ä–∞–∫–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è\n\nüéØ –≠–∫—Å–ø–µ—Ä—Ç: –°–æ–±–ª—é–¥–∞–π—Ç–µ 12-—á–∞—Å–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
                "üß¨ –ù–ê–£–ö–ê –ü–ò–¢–ê–ù–ò–Ø: –ú–∏–∫—Ä–æ–±–∏–æ–º\n\nüìö –§–∞–∫—Ç: –ö–∏—à–µ—á–Ω—ã–µ –±–∞–∫—Ç–µ—Ä–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n\nüí° –ü—Ä–∞–∫—Ç–∏–∫–∞: –ï—à—å—Ç–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n\nüéØ –≠–∫—Å–ø–µ—Ä—Ç: –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å—Ç–µ —Ä–∞—Ü–∏–æ–Ω –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π"
            ],
            'visual': [
                "üé® –ò–ù–§–û–ì–†–ê–§–ò–ö–ê: –ü—Ä–∞–≤–∏–ª–æ —Ç–∞—Ä–µ–ª–∫–∏\n\nüìä –ò–¥–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è:\n‚Ä¢ ¬Ω –¢–∞—Ä–µ–ª–∫–∏ - –û–≤–æ—â–∏\n‚Ä¢ ¬º –¢–∞—Ä–µ–ª–∫–∏ - –ë–µ–ª–∫–∏\n‚Ä¢ ¬º –¢–∞—Ä–µ–ª–∫–∏ - –£–≥–ª–µ–≤–æ–¥—ã\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã\n\nüè∑Ô∏è #–ü—Ä–∞–≤–∏–ª–æ–¢–∞—Ä–µ–ª–∫–∏ #–ë–∞–ª–∞–Ω—Å",
                "üé® –ò–ù–§–û–ì–†–ê–§–ò–ö–ê: –í—Ä–µ–º—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n\n‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫:\n‚Ä¢ üïó 7-9: –ó–∞–≤—Ç—Ä–∞–∫\n‚Ä¢ üïõ 12-14: –û–±–µ–¥\n‚Ä¢ üïê 16-17: –ü–µ—Ä–µ–∫—É—Å\n‚Ä¢ üï¢ 18-20: –£–∂–∏–Ω\n\nüè∑Ô∏è #–¢–∞–π–º–∏–Ω–≥ #–ú–µ—Ç–∞–±–æ–ª–∏–∑–º"
            ],
            'interactive': [
                "üí¨ –û–ü–†–û–°: –í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é?\n\n‚Ä¢ üïí –°—Ç—Ä–æ–≥–∏–π –≥—Ä–∞—Ñ–∏–∫\n‚Ä¢ üçΩÔ∏è –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n‚Ä¢ üìä –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n‚Ä¢ üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n\nüí≠ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!",
                "üéØ –ß–ï–õ–õ–ï–ù–î–ñ –ù–ï–î–ï–õ–ò\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π —É–∂–∏–Ω –∏:\n1. üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ\n2. üí¨ –û–ø–∏—à–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç\n3. üè∑Ô∏è –û—Ç–º–µ—Ç—å—Ç–µ @ppsupershef\n\nüèÜ –õ—É—á—à–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã - –≤ —Å—Ç–æ—Ä–∏—Å!"
            ],
            'expert_advice': [
                "üåü –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–û–í\n\nüß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: '–ü–µ–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã'\nüë®‚Äçüç≥ –®–µ—Ñ: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Ç—Ä–∞–≤—ã –≤–º–µ—Å—Ç–æ —Å–æ–ª–∏'\nüí™ –¢—Ä–µ–Ω–µ—Ä: '–°–æ—á–µ—Ç–∞–π—Ç–µ –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'",
                "üåü –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–û–í\n\nüß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: '–°–ª—É—à–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≥–æ–ª–æ–¥–∞'\nüë®‚Äçüç≥ –®–µ—Ñ: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ —Å–ø–µ—Ü–∏—è–º–∏'\nüí™ –¢—Ä–µ–Ω–µ—Ä: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–∫ –∂–µ –≤–∞–∂–Ω–æ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'"
            ]
        }
        
        content_list = static_content.get(content_type, ["üìù –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"])
        content = content_list[weekday % len(content_list)]
        emoji = self._get_content_emoji(content_type)
        
        return f"{emoji} {content_type.upper()}\n\n{theme}\n\n{content}"
    
    def _get_elite_call_to_action(self):
        """–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"""
        return """

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üíé **–ü–û–î–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!** üëâ @ppsupershef

üí¨ **–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï!** –≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üëá **–†–ï–ê–ö–¶–ò–ò:**
‚ù§Ô∏è - –ù—Ä–∞–≤–∏—Ç—Å—è | üî• - –ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é | üìö - –ü–æ–ª–µ–∑–Ω–æ

üì§ **–ü–û–î–ï–õ–ò–¢–ï–°–¨** —Å –¥—Ä—É–∑—å—è–º–∏!

üè∑Ô∏è #ppsupershef #–ó–¥–æ—Ä–æ–≤–æ–µ–ü–∏—Ç–∞–Ω–∏–µ #–†–µ—Ü–µ–ø—Ç—ã
"""

    def run_elite_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
        schedule.clear()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ UTC+7)
        schedule.every().day.at("07:00").do(lambda: self.publish_content('breakfast'))
        schedule.every().day.at("12:00").do(lambda: self.publish_content('lunch')) 
        schedule.every().day.at("15:00").do(lambda: self.publish_content('science'))
        schedule.every().day.at("18:00").do(lambda: self.publish_content('interactive'))
        schedule.every().day.at("19:00").do(lambda: self.publish_content('dinner'))
        schedule.every().day.at("21:00").do(lambda: self.publish_content('expert_advice'))
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –¥–µ–Ω—å
        if self.get_kemerovo_time().day % 2 == 0:
            schedule.every().day.at("16:00").do(lambda: self.publish_content('visual'))
        
        kemerovo_time = self.get_kemerovo_time()
        print(f"üéØ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û!")
        print(f"üìç –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time.strftime('%H:%M')}")
        print(f"üì± –ö–∞–Ω–∞–ª: @ppsupershef")
        print("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("ü•û 07:00 - –ó–∞–≤—Ç—Ä–∞–∫")
        print("üçΩÔ∏è 12:00 - –û–±–µ–¥") 
        print("üß¨ 15:00 - –ù–∞—É–∫–∞")
        print("üé® 16:00 - –í–∏–∑—É–∞–ª (—á–µ—Ä–µ–∑ –¥–µ–Ω—å)")
        print("üí¨ 18:00 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤")
        print("üçΩÔ∏è 19:00 - –£–∂–∏–Ω")
        print("üåü 21:00 - –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        print("=" * 50)
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...")
        self.publish_content('breakfast')
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)
    
    def publish_content(self, content_type):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            kemerovo_time = self.get_kemerovo_time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
            last_sent = self.last_sent_times.get(content_type)
            if last_sent and (kemerovo_time - last_sent).total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                print(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {content_type} - –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ")
                return
                
            print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {content_type}... ({kemerovo_time.strftime('%H:%M')})")
            
            message = self.generate_elite_content(content_type)
            message += self._get_elite_call_to_action()
            
            success = self.send_to_telegram(message)
            
            if success:
                print(f"‚úÖ {content_type.upper()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ @ppsupershef!")
                self.last_sent_times[content_type] = kemerovo_time
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {content_type}")
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ publish_content: {e}")
    
    def send_to_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return False
            
        if not self.channel:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª!")
            return False
            
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.channel,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @ppsupershef")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
elite_channel = EliteContentManager()

def start_elite_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        elite_channel.run_elite_scheduler()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler_thread = Thread(target=start_elite_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        kemerovo_time = elite_channel.get_kemerovo_time()
        weekday = kemerovo_time.weekday()
        theme = elite_channel.content_strategy["weekly_themes"][weekday]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        now = kemerovo_time
        schedule_status = {
            'breakfast': "‚úÖ" if now.hour >= 7 else "‚è∞",
            'lunch': "‚úÖ" if now.hour >= 12 else "‚è∞", 
            'science': "‚úÖ" if now.hour >= 15 else "‚è∞",
            'visual': "‚úÖ" if now.hour >= 16 and now.day % 2 == 0 else "‚è∞",
            'interactive': "‚úÖ" if now.hour >= 18 else "‚è∞",
            'dinner': "‚úÖ" if now.hour >= 19 else "‚è∞",
            'expert_advice': "‚úÖ" if now.hour >= 21 else "‚è∞"
        }
        
        return f"""
        <html>
            <head>
                <title>@ppsupershef - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f0f2f5; }}
                    .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                    .status {{ padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid; }}
                    .success {{ background: #e8f5e8; border-color: #4CAF50; }}
                    .warning {{ background: #fff3cd; border-color: #ffc107; }}
                    .error {{ background: #f8d7da; border-color: #dc3545; }}
                    .schedule {{ background: #e9ecef; padding: 15px; border-radius: 8px; margin: 15px 0; }}
                    .schedule-item {{ display: flex; align-items: center; margin: 8px 0; }}
                    .time {{ font-weight: bold; width: 80px; }}
                    .emoji {{ font-size: 20px; margin-right: 10px; }}
                    .buttons {{ margin-top: 20px; }}
                    .btn {{ display: inline-block; padding: 10px 15px; margin: 5px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }}
                    .btn:hover {{ background: #0056b3; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üç≥ @ppsupershef - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
                    
                    <div class="status success">
                        <strong>üìç –ö–µ–º–µ—Ä–æ–≤–æ:</strong> {kemerovo_time.strftime('%d.%m %H:%M')} | 
                        <strong>üéØ –¢–µ–º–∞:</strong> {theme} |
                        <strong>üì± –ö–∞–Ω–∞–ª:</strong> @ppsupershef
                    </div>
                    
                    <div class="status {'success' if elite_channel.ai_generator.yandex_gpt.is_active else 'warning'}">
                        <strong>ü§ñ Yandex GPT:</strong> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if elite_channel.ai_generator.yandex_gpt.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                    </div>
                    
                    <div class="status {'success' if elite_channel.ai_generator.deepseek_gpt.is_active else 'warning'}">
                        <strong>ü§ñ DeepSeek:</strong> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if elite_channel.ai_generator.deepseek_gpt.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                    </div>
                    
                    <div class="schedule">
                        <h3>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</h3>
                        <div class="schedule-item"><span class="emoji">ü•û</span><span class="time">07:00</span> –ó–∞–≤—Ç—Ä–∞–∫ {schedule_status['breakfast']}</div>
                        <div class="schedule-item"><span class="emoji">üçΩÔ∏è</span><span class="time">12:00</span> –û–±–µ–¥ {schedule_status['lunch']}</div>
                        <div class="schedule-item"><span class="emoji">üß¨</span><span class="time">15:00</span> –ù–∞—É–∫–∞ {schedule_status['science']}</div>
                        <div class="schedule-item"><span class="emoji">üé®</span><span class="time">16:00</span> –í–∏–∑—É–∞–ª {schedule_status['visual']}</div>
                        <div class="schedule-item"><span class="emoji">üí¨</span><span class="time">18:00</span> –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ {schedule_status['interactive']}</div>
                        <div class="schedule-item"><span class="emoji">üçΩÔ∏è</span><span class="time">19:00</span> –£–∂–∏–Ω {schedule_status['dinner']}</div>
                        <div class="schedule-item"><span class="emoji">üåü</span><span class="time">21:00</span> –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ {schedule_status['expert_advice']}</div>
                    </div>
                    
                    <div class="buttons">
                        <a href="/test" class="btn">üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã</a>
                        <a href="/force/breakfast" class="btn">üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫</a>
                        <a href="/force/science" class="btn">üî¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—É–∫—É</a>
                        <a href="/debug" class="btn">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</a>
                    </div>
                </div>
            </body>
        </html>
        """
    except Exception as e:
        return f"<h1>‚ùå –û—à–∏–±–∫–∞: {e}</h1>"

@app.route('/test')
def test():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    test_message = "üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´\n\n–°–∏—Å—Ç–µ–º–∞ @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ\n\n–í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: " + elite_channel.get_kemerovo_time().strftime('%H:%M')
    success = elite_channel.send_to_telegram(test_message)
    return f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}"

@app.route('/force/<content_type>')
def force_publish(content_type):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    valid_types = ['breakfast', 'lunch', 'dinner', 'science', 'visual', 'interactive', 'expert_advice']
    if content_type not in valid_types:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(valid_types)}"
    
    elite_channel.publish_content(content_type)
    return f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {content_type}"

@app.route('/debug')
def debug():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
    kemerovo_time = elite_channel.get_kemerovo_time()
    return jsonify({
        "system": "@ppsupershef",
        "status": "active",
        "kemerovo_time": kemerovo_time.strftime('%Y-%m-%d %H:%M:%S'),
        "ai_services": {
            "yandex_gpt": elite_channel.ai_generator.yandex_gpt.is_active,
            "deepseek": elite_channel.ai_generator.deepseek_gpt.is_active
        },
        "telegram": {
            "token_set": bool(TELEGRAM_TOKEN),
            "channel_set": bool(TELEGRAM_CHANNEL)
        }
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã @ppsupershef –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {elite_channel.get_kemerovo_time().strftime('%d.%m %H:%M')}")
    app.run(host='0.0.0.0', port=port, debug=False)
