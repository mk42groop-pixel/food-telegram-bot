import os
import logging
import requests
import json
import time
import schedule
import hashlib
import re
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps
import sqlite3
from contextlib import contextmanager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    API_SECRET = os.getenv('API_SECRET', 'your-secret-key-here')
    MAX_REQUESTS_PER_MINUTE = 30
    RATE_LIMIT_WINDOW = 60
    
    # –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏
    SERVER_TZ = pytz.timezone('UTC')
    KEMEROVO_TZ = pytz.timezone('Asia/Novokuznetsk')
    
    # Render –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    RENDER_APP_URL = os.getenv('RENDER_APP_URL', '')

# –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ò–°–ê
class ServiceMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.request_count = 0
        self.last_keep_alive = None
        self.keep_alive_count = 0
    
    def increment_request(self):
        self.request_count += 1
    
    def update_keep_alive(self):
        self.last_keep_alive = datetime.now()
        self.keep_alive_count += 1
    
    def get_status(self):
        return {
            "status": "healthy",
            "uptime_seconds": (datetime.now() - self.start_time).total_seconds(),
            "requests_handled": self.request_count,
            "keep_alive_count": self.keep_alive_count,
            "last_keep_alive": self.last_keep_alive.isoformat() if self.last_keep_alive else None,
            "timestamp": datetime.now().isoformat()
        }

service_monitor = ServiceMonitor()

# –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ò –†–û–¢–ê–¶–ò–ò
class Database:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        with self.get_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS content_cache (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_hash TEXT UNIQUE,
                    content_type TEXT,
                    content_text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.execute('''
                CREATE TABLE IF NOT EXISTS channel_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    member_count INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.execute('''
                CREATE TABLE IF NOT EXISTS recipe_rotation (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    recipe_type TEXT,
                    recipe_method TEXT,
                    last_used DATE,
                    use_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
    
    @contextmanager
    def get_connection(self):
        conn = sqlite3.connect('channel.db', check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
            conn.commit()
        except Exception:
            conn.rollback()
            raise
        finally:
            conn.close()

# –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
class SecurityManager:
    _instance = None
    _lock = Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(SecurityManager, cls).__new__(cls)
                cls._instance.request_log = {}
                cls._instance.blocked_ips = set()
            return cls._instance
    
    def check_rate_limit(self, ip_address):
        current_time = time.time()
        if ip_address in self.blocked_ips:
            return False
        
        if ip_address not in self.request_log:
            self.request_log[ip_address] = []
        
        self.request_log[ip_address] = [
            req_time for req_time in self.request_log[ip_address]
            if current_time - req_time < Config.RATE_LIMIT_WINDOW
        ]
        
        if len(self.request_log[ip_address]) >= Config.MAX_REQUESTS_PER_MINUTE:
            self.blocked_ips.add(ip_address)
            logger.warning(f"üö® IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {ip_address}")
            return False
        
        self.request_log[ip_address].append(current_time)
        return True

def require_api_key(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key') or request.args.get('api_key')
        if not api_key or api_key != Config.API_SECRET:
            return jsonify({"status": "error", "message": "Invalid API key"}), 401
        return f(*args, **kwargs)
    return decorated_function

def rate_limit(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        service_monitor.increment_request()
        ip_address = request.remote_addr
        security_manager = SecurityManager()
        
        if not security_manager.check_rate_limit(ip_address):
            return jsonify({
                "status": "error", 
                "message": "Rate limit exceeded. Try again later."
            }), 429
        
        return f(*args, **kwargs)
    return decorated_function

# –°–ò–°–¢–ï–ú–ê –í–†–ï–ú–ï–ù–ò
class TimeManager:
    @staticmethod
    def kemerovo_to_server(kemerovo_time_str):
        try:
            today = datetime.now(Config.KEMEROVO_TZ).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TZ.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TZ)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str

    @staticmethod
    def get_current_times():
        server_now = datetime.now(Config.SERVER_TZ)
        kemerovo_now = datetime.now(Config.KEMEROVO_TZ)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_date': server_now.strftime('%Y-%m-%d'),
            'kemerovo_date': kemerovo_now.strftime('%Y-%m-%d')
        }

    @staticmethod
    def get_kemerovo_weekday():
        return datetime.now(Config.KEMEROVO_TZ).weekday()

# –°–ò–°–¢–ï–ú–ê –†–û–¢–ê–¶–ò–ò –†–ï–¶–ï–ü–¢–û–í
class RecipeRotationSystem:
    def __init__(self):
        self.db = Database()
        self.rotation_period = 90  # –¥–Ω–µ–π
        self.init_rotation_data()
    
    def init_rotation_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipe_methods = [
            # –ó–∞–≤—Ç—Ä–∞–∫–∏ (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_breakfast', 'generate_protein_breakfast', 'generate_veggie_breakfast',
            'generate_carbs_breakfast', 'generate_sunday_breakfast', 'generate_energy_breakfast',
            'generate_quinoa_breakfast', 'generate_buckwheat_breakfast', 'generate_tofu_breakfast',
            'generate_berry_smoothie', 'generate_savory_oatmeal', 'generate_egg_muffins',
            'generate_chia_pudding', 'generate_protein_pancakes', 'generate_avocado_toast',
            'generate_greek_yogurt_bowl', 'generate_sweet_potato_toast', 'generate_breakfast_burrito',
            'generate_rice_cakes', 'generate_cottage_cheese_bowl', 'generate_breakfast_quiche',
            'generate_protein_waffles', 'generate_breakfast_salad', 'generate_breakfast_soup',
            'generate_breakfast_tacos', 'generate_breakfast_pizza', 'generate_breakfast_sushi',
            'generate_breakfast_risotto', 'generate_breakfast_curry', 'generate_breakfast_stir_fry',
            
            # –û–±–µ–¥—ã (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_lunch', 'generate_protein_lunch', 'generate_veggie_lunch',
            'generate_carbs_lunch', 'generate_sunday_lunch', 'generate_mediterranean_lunch',
            'generate_asian_lunch', 'generate_soup_lunch', 'generate_bowl_lunch',
            'generate_wrap_lunch', 'generate_salad_lunch', 'generate_stir_fry_lunch',
            'generate_curry_lunch', 'generate_pasta_lunch', 'generate_rice_lunch',
            'generate_quinoa_lunch', 'generate_buckwheat_lunch', 'generate_lentil_lunch',
            'generate_fish_lunch', 'generate_chicken_lunch', 'generate_turkey_lunch',
            'generate_vegan_lunch', 'generate_detox_lunch', 'generate_energy_lunch',
            'generate_immunity_lunch', 'generate_focus_lunch', 'generate_recovery_lunch',
            'generate_metabolism_lunch', 'generate_anti_inflammatory_lunch', 'generate_low_carb_lunch',
            
            # –£–∂–∏–Ω—ã (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_dinner', 'generate_protein_dinner', 'generate_veggie_dinner',
            'generate_carbs_dinner', 'generate_sunday_dinner', 'generate_light_dinner',
            'generate_hearty_dinner', 'generate_quick_dinner', 'generate_meal_prep_dinner',
            'generate_sheet_pan_dinner', 'generate_one_pot_dinner', 'generate_slow_cooker_dinner',
            'generate_air_fryer_dinner', 'generate_grilled_dinner', 'generate_baked_dinner',
            'generate_stew_dinner', 'generate_casserole_dinner', 'generate_stir_fry_dinner',
            'generate_soup_dinner', 'generate_salad_dinner', 'generate_bowl_dinner',
            'generate_wrap_dinner', 'generate_taco_dinner', 'generate_pizza_dinner',
            'generate_pasta_dinner', 'generate_rice_dinner', 'generate_quinoa_dinner',
            'generate_buckwheat_dinner', 'generate_lentil_dinner', 'generate_vegetable_dinner',
            
            # –°–æ–≤–µ—Ç—ã (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_advice', 'generate_protein_advice', 'generate_veggie_advice',
            'generate_carbs_advice', 'generate_water_advice', 'generate_planning_advice',
            'generate_gut_health_advice', 'generate_metabolism_advice', 'generate_detox_advice',
            'generate_immunity_advice', 'generate_energy_advice', 'generate_sleep_advice',
            'generate_hormones_advice', 'generate_inflammation_advice', 'generate_longevity_advice',
            'generate_brain_health_advice', 'generate_heart_health_advice', 'generate_bone_health_advice',
            'generate_skin_health_advice', 'generate_weight_management_advice', 'generate_meal_timing_advice',
            'generate_supplements_advice', 'generate_hydration_advice', 'generate_fiber_advice',
            'generate_antioxidants_advice', 'generate_probiotics_advice', 'generate_omega3_advice',
            'generate_vitamins_advice', 'generate_minerals_advice', 'generate_phytochemicals_advice',
            
            # –î–µ—Å–µ—Ä—Ç—ã (15 –º–µ—Ç–æ–¥–æ–≤)
            'generate_friday_dessert', 'generate_saturday_dessert', 'generate_sunday_dessert',
            'generate_protein_dessert', 'generate_fruit_dessert', 'generate_chocolate_dessert',
            'generate_cheese_dessert', 'generate_frozen_dessert', 'generate_baked_dessert',
            'generate_no_bake_dessert', 'generate_low_sugar_dessert', 'generate_vegan_dessert',
            'generate_gluten_free_dessert', 'generate_quick_dessert', 'generate_healthy_dessert',
            
            # –°—É–±–±–æ—Ç–Ω—è—è –≥–æ—Ç–æ–≤–∫–∞ (13 –º–µ—Ç–æ–¥–æ–≤)
            'generate_family_cooking', 'generate_saturday_cooking_1', 'generate_saturday_cooking_2',
            'generate_saturday_cooking_3', 'generate_saturday_cooking_4', 'generate_saturday_cooking_5',
            'generate_saturday_cooking_6', 'generate_saturday_cooking_7', 'generate_saturday_cooking_8',
            'generate_saturday_cooking_9', 'generate_saturday_cooking_10', 'generate_saturday_cooking_11',
            'generate_saturday_cooking_12'
        ]
        
        with self.db.get_connection() as conn:
            for method in recipe_methods:
                conn.execute('''
                    INSERT OR IGNORE INTO recipe_rotation (recipe_type, recipe_method, last_used, use_count)
                    VALUES (?, ?, DATE('now', '-90 days'), 0)
                ''', (method.replace('generate_', ''), method))
    
    def get_available_recipe(self, recipe_type):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–∏–ø–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏"""
        with self.db.get_connection() as conn:
            # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ–ª–µ–µ rotation_period –¥–Ω–µ–π
            cursor = conn.execute('''
                SELECT recipe_method FROM recipe_rotation 
                WHERE recipe_type LIKE ? AND last_used < DATE('now', '-' || ? || ' days')
                ORDER BY use_count ASC, last_used ASC
                LIMIT 1
            ''', (f'{recipe_type}%', self.rotation_period))
            
            result = cursor.fetchone()
            if result:
                method = result['recipe_method']
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                conn.execute('''
                    UPDATE recipe_rotation 
                    SET last_used = DATE('now'), use_count = use_count + 1
                    WHERE recipe_method = ?
                ''', (method,))
                return method
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ, –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
                cursor = conn.execute('''
                    SELECT recipe_method FROM recipe_rotation 
                    WHERE recipe_type LIKE ?
                    ORDER BY last_used ASC, use_count ASC
                    LIMIT 1
                ''', (f'{recipe_type}%',))
                
                result = cursor.fetchone()
                if result:
                    method = result['recipe_method']
                    conn.execute('''
                        UPDATE recipe_rotation 
                        SET last_used = DATE('now'), use_count = use_count + 1
                        WHERE recipe_method = ?
                    ''', (method,))
                    return method
        
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
        return f'generate_{recipe_type}'

# –ú–ï–ù–ï–î–ñ–ï–† –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
class VisualContentManager:
    FOOD_PHOTOS = {
        'breakfast': [
            'https://images.unsplash.com/photo-1551782450-17144efb9c50?w=600',
            'https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=600',
            'https://images.unsplash.com/photo-1570197788417-0e82375c9371?w=600',
        ],
        'lunch': [
            'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=600',
            'https://images.unsplash.com/photo-1606755962773-d324e74532a7?w=600',
            'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=600',
        ],
        'dinner': [
            'https://images.unsplash.com/photo-1563379926898-05f4575a45d8?w=600',
            'https://images.unsplash.com/photo-1598214886806-c87b84b707f5?w=600',
            'https://images.unsplash.com/photo-1555939592-8a1039b86bc4?w=600',
        ],
        'dessert': [
            'https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?w=600',
            'https://images.unsplash.com/photo-1571115764595-644a1f56a55c?w=600',
            'https://images.unsplash.com/photo-1565958011703-44f9829ba187?w=600',
        ],
        'advice': [
            'https://images.unsplash.com/photo-1490818387583-1baba5e638af?w=600',
            'https://images.unsplash.com/photo-1550581190-9c1c47bdfba3?w=600',
            'https://images.unsplash.com/photo-1505576399279-565b52d4ac71?w=600',
        ]
    }
    
    EMOJI_CATEGORIES = {
        'breakfast': ['üç≥', 'ü•û', 'üç≤', 'ü•£', '‚òï', 'ü•ê', 'üçì', 'ü•ë'],
        'lunch': ['üçù', 'üçõ', 'ü•ò', 'üçú', 'üç±', 'ü•ó', 'üåØ', 'ü•™'],
        'dinner': ['üåô', 'üçΩÔ∏è', 'ü•ò', 'üç¥', '‚ú®', 'üç∑', 'üïØÔ∏è', 'üåü'],
        'dessert': ['üç∞', 'üéÇ', 'üçÆ', 'üç®', 'üßÅ', 'üç´', 'üç©', 'ü•Æ'],
        'advice': ['üí°', 'üéØ', 'üìö', 'üß†', 'üí™', 'ü•ó', 'üíß', 'üë®‚Äç‚öïÔ∏è'],
    }
    
    def get_photo_for_recipe(self, recipe_type):
        photo_category = self._map_recipe_to_photo(recipe_type)
        photos = self.FOOD_PHOTOS.get(photo_category, self.FOOD_PHOTOS['breakfast'])
        return random.choice(photos)
    
    def _map_recipe_to_photo(self, recipe_type):
        mapping = {
            'neuro_breakfast': 'breakfast',
            'energy_breakfast': 'breakfast',
            'protein_breakfast': 'breakfast',
            'veggie_breakfast': 'breakfast',
            'carbs_breakfast': 'breakfast',
            'sunday_breakfast': 'breakfast',
            'focus_lunch': 'lunch',
            'protein_lunch': 'lunch',
            'veggie_lunch': 'lunch',
            'carbs_lunch': 'lunch',
            'sunday_lunch': 'lunch',
            'brain_dinner': 'dinner',
            'protein_dinner': 'dinner',
            'veggie_dinner': 'dinner',
            'week_prep_dinner': 'dinner',
            'friday_dessert': 'dessert',
            'saturday_dessert': 'dessert',
            'sunday_dessert': 'dessert',
            'neuro_advice': 'advice',
            'protein_advice': 'advice',
            'veggie_advice': 'advice',
            'carbs_advice': 'advice',
            'water_advice': 'advice',
            'planning_advice': 'advice'
        }
        return mapping.get(recipe_type, 'breakfast')
    
    def generate_attractive_post(self, title, content, recipe_type, benefits):
        photo_url = self.get_photo_for_recipe(recipe_type)
        main_emoji = random.choice(self.EMOJI_CATEGORIES.get('breakfast', ['üçΩÔ∏è']))
        
        formatted_content = self._format_with_emoji(content)
        
        post = f"""{main_emoji} <b>{title}</b>

<a href="{photo_url}">üñºÔ∏è –§–û–¢–û –ë–õ–Æ–î–ê</a>

{formatted_content}

üî¨ –ù–ê–£–ß–ù–ê–Ø –ü–û–õ–¨–ó–ê:
{benefits}

‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ãÖ‚àô‚àò ‚òÖ ‚àò‚àô‚ãÖ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ

üéØ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏

üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å ‚Üí @ppsupershef
üí¨ –û–±—Å—É–∂–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã ‚Üí @ppsupershef_chat

üòã –í–∫—É—Å–Ω–æ | üí™ –ü–æ–ª–µ–∑–Ω–æ | ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ | üß† –ù–∞—É—á–Ω–æ

üîÑ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! ‚Üí @ppsupershef"""
        
        return post
    
    def _format_with_emoji(self, text):
        lines = text.split('\n')
        formatted = ""
        for line in lines:
            if line.strip() and any(keyword in line.lower() for keyword in ['‚Ä¢', '-', '1.', '2.', '3.']):
                emoji = random.choice(['ü•¨', 'ü•ï', 'ü•ö', 'üçó', 'üêü', 'üßÄ', 'üåΩ', 'üçÖ'])
                formatted += f"{emoji} {line}\n"
            else:
                formatted += f"{line}\n"
        return formatted

# –¢–ï–õ–ï–ì–†–ê–ú –ú–ï–ù–ï–î–ñ–ï–†
class TelegramManager:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.sent_hashes = set()
    
    def send_message(self, text, parse_mode='HTML'):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            source = "manual" if "–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢" in text or "–†–£–ß–ù–û–ô –ü–û–°–¢" in text else "scheduled"
            logger.info(f"üì§ [{source}] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.token or self.token == 'your-telegram-bot-token':
                logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
                return False
                
            if not self.channel:
                logger.error("‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return False

            content_hash = hashlib.md5(text.encode()).hexdigest()
            if content_hash in self.sent_hashes:
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return False
            
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': False
            }
            
            logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API...")
            response = requests.post(url, json=payload, timeout=30)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
                
            result = response.json()
            logger.info(f"üì® –û—Ç–≤–µ—Ç Telegram: {result}")
            
            if result.get('ok'):
                self.sent_hashes.add(content_hash)
                logger.info(f"‚úÖ [{source}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
                return True
            else:
                error_description = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_description}")
                return False
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
    
    def get_member_count(self):
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {'chat_id': self.channel}
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            return result.get('result', 0) if result.get('ok') else 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0

# –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ù–¢–ï–ù–¢–ê
class ExtendedContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.visual_manager = VisualContentManager()
        self.db = Database()
        self.rotation_system = RecipeRotationSystem()
    
    def generate_with_gpt(self, prompt):
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1500
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏."
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None

    # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –†–ï–¶–ï–ü–¢–´ (30 —à—Ç—É–∫)
    def generate_neuro_breakfast(self):
        content = """
üß† –û–ú–õ–ï–¢ –° –ê–í–û–ö–ê–î–û –ò –°–ï–ú–ï–ù–ê–ú–ò –õ–¨–ù–ê
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 345 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 18–≥ ‚Ä¢ –ñ–∏—Ä—ã: 28–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 8–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –Ø–π—Ü–∞ - 8 —à—Ç (–∏—Å—Ç–æ—á–Ω–∏–∫ —Ö–æ–ª–∏–Ω–∞ - 147 –º–≥/—à—Ç)
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 2 —à—Ç (–º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã - 15–≥/100–≥)
‚Ä¢ –°–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - 2 —Å—Ç.–ª. (–û–º–µ–≥–∞-3 - 22.8–≥/100–≥)
‚Ä¢ –ú–æ–ª–æ–∫–æ 2.5% - 100 –º–ª (–≤–∏—Ç–∞–º–∏–Ω D - 1.3–º–∫–≥/100–≥)
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ - 150 –≥ (–ª–∏–∫–æ–ø–∏–Ω - 2573–º–∫–≥/100–≥)
‚Ä¢ –°–æ–ª—å, –ø–µ—Ä–µ—Ü - –ø–æ –≤–∫—É—Å—É
‚Ä¢ –ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –Ø–π—Ü–∞ –≤–∑–±–∏—Ç—å —Å –º–æ–ª–æ–∫–æ–º - —ç–º—É–ª—å–≥–∞—Ü–∏—è —É–ª—É—á—à–∞–µ—Ç —É—Å–≤–æ–µ–Ω–∏–µ
2. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞ - –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –Ω–∞–±—É—Ö–∞–Ω–∏—è 5 –º–∏–Ω—É—Ç
3. –ê–≤–æ–∫–∞–¥–æ –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
4. –†–∞–∑–æ–≥—Ä–µ—Ç—å —Å–∫–æ–≤–æ—Ä–æ–¥—É —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º
5. –í—ã–ª–∏—Ç—å —è–∏—á–Ω—É—é —Å–º–µ—Å—å, –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 3 –º–∏–Ω—É—Ç—ã
6. –î–æ–±–∞–≤–∏—Ç—å –∞–≤–æ–∫–∞–¥–æ –∏ –ø–æ–º–∏–¥–æ—Ä—ã, –≥–æ—Ç–æ–≤–∏—Ç—å 4-5 –º–∏–Ω—É—Ç –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π
7. –ü–æ–¥–∞–≤–∞—Ç—å —Å—Ä–∞–∑—É, –ø–æ—Å—ã–ø–∞–≤ —Å–≤–µ–∂–µ–π –∑–µ–ª–µ–Ω—å—é
"""
        
        benefits = """‚Ä¢ üß† –•–æ–ª–∏–Ω –∏–∑ —è–∏—Ü —É–ª—É—á—à–∞–µ—Ç –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –Ω–∞ 28%
‚Ä¢ ü•ë –ñ–∏—Ä—ã –∞–≤–æ–∫–∞–¥–æ —É—Å–∏–ª–∏–≤–∞—é—Ç –∞–±—Å–æ—Ä–±—Ü–∏—é –∂–∏—Ä–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤
‚Ä¢ üåø –û–º–µ–≥–∞-3 —Å–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ 15%
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö: –û–ú–õ–ï–¢ –° –ê–í–û–ö–ê–î–û –ò –°–ï–ú–ï–ù–ê–ú–ò –õ–¨–ù–ê",
            content, "neuro_breakfast", benefits
        )

    def generate_protein_breakfast(self):
        content = """
üí™ –¢–í–û–†–û–ñ–ù–ê–Ø –ó–ê–ü–ï–ö–ê–ù–ö–ê –° –ú–ò–ù–î–ê–õ–ï–ú –ò –°–ï–ú–ï–ù–ê–ú–ò –ß–ò–ê
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 280 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 25–≥ ‚Ä¢ –ñ–∏—Ä—ã: 12–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 15–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 600 –≥ (–∫–∞–∑–µ–∏–Ω - –º–µ–¥–ª–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫)
‚Ä¢ –Ø–π—Ü–∞ - 3 —à—Ç (–∞–ª—å–±—É–º–∏–Ω - 3.6–≥/–±–µ–ª–æ–∫)
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 50 –≥ (–≤–∏—Ç–∞–º–∏–Ω E - 25.6–º–≥/100–≥)
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª. (–∫–ª–µ—Ç—á–∞—Ç–∫–∞ - 34.4–≥/100–≥)
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª. (–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã)
‚Ä¢ –í–∞–Ω–∏–ª–∏–Ω - —â–µ–ø–æ—Ç–∫–∞
‚Ä¢ –°–º–µ—Ç–∞–Ω–∞ 15% - –¥–ª—è —Å–º–∞–∑—ã–≤–∞–Ω–∏—è

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (20 –º–∏–Ω—É—Ç + 25 –º–∏–Ω—É—Ç –≤—ã–ø–µ–∫–∞–Ω–∏–µ):
1. –¢–≤–æ—Ä–æ–≥ –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —á–µ—Ä–µ–∑ —Å–∏–Ω–æ –¥–ª—è –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏
2. –î–æ–±–∞–≤–∏—Ç—å —è–π—Ü–∞, –º–µ–¥, –≤–∞–Ω–∏–ª–∏–Ω - —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
3. –ú–∏–Ω–¥–∞–ª—å –∏–∑–º–µ–ª—å—á–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–≤–æ—Ä–æ–∂–Ω—É—é –º–∞—Å—Å—É
4. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–Ω–∞ —á–∏–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–±—É—Ö–∞–Ω–∏—è
5. –§–æ—Ä–º—É —Å–º–∞–∑–∞—Ç—å –º–∞—Å–ª–æ–º, –≤—ã–ª–æ–∂–∏—Ç—å –º–∞—Å—Å—É
6. –°–º–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å–º–µ—Ç–∞–Ω–æ–π –¥–ª—è —Ä—É–º—è–Ω–æ–π –∫–æ—Ä–æ—á–∫–∏
7. –í—ã–ø–µ–∫–∞—Ç—å 25 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
"""
        
        benefits = """‚Ä¢ üí™ –ö–∞–∑–µ–∏–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç
‚Ä¢ ü•ú –ú–∏–Ω–¥–∞–ª—å - –≤–∏—Ç–∞–º–∏–Ω E –∑–∞—â–∏—â–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ –º–µ–º–±—Ä–∞–Ω—ã
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ —á–∏–∞ - —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–∞—è –∫–ª–µ—Ç—á–∞—Ç–∫–∞ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ
‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ - –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–ª—å—Ü–∏—è –¥–ª—è –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏"""
        
        return self.visual_manager.generate_attractive_post(
            "üí™ –ë–ï–õ–ö–û–í–´–ô –ó–ê–í–¢–†–ê–ö: –¢–í–û–†–û–ñ–ù–ê–Ø –ó–ê–ü–ï–ö–ê–ù–ö–ê –° –ú–ò–ù–î–ê–õ–ï–ú",
            content, "protein_breakfast", benefits
        )

    # –ù–û–í–´–ï –†–ï–¶–ï–ü–¢–´ (–ø—Ä–∏–º–µ—Ä—ã)
    def generate_energy_breakfast(self):
        """–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ - –æ–≤—Å—è–Ω–∫–∞ —Å —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–∞–º–∏"""
        content = """
‚ö° –û–í–°–Ø–ù–ö–ê –° –°–£–•–û–§–†–£–ö–¢–ê–ú–ò –ò –û–†–ï–•–ê–ú–ò
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 380 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 12–≥ ‚Ä¢ –ñ–∏—Ä—ã: 14–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 55–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 200 –≥ (–∫–ª–µ—Ç—á–∞—Ç–∫–∞ - 10–≥/100–≥)
‚Ä¢ –ú–æ–ª–æ–∫–æ/–≤–æ–¥–∞ - 800 –º–ª
‚Ä¢ –ò–∑—é–º - 50 –≥ (–∫–∞–ª–∏–π - 749–º–≥/100–≥)
‚Ä¢ –ö—É—Ä–∞–≥–∞ - 50 –≥ (–±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω - 2163–º–∫–≥/100–≥)
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥ (–û–º–µ–≥–∞-3 - 9–≥/100–≥)
‚Ä¢ –ú–µ–¥ - 3 —Å—Ç.–ª. (–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã - 0.3–º–º–æ–ª—å/100–≥)
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - 1 —á.–ª. (–ø–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã - 230–º–≥/100–≥)

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (12 –º–∏–Ω—É—Ç):
1. –û–≤—Å—è–Ω–∫—É –∑–∞–ª–∏—Ç—å –∫–∏–ø—è—Ç–∫–æ–º/–º–æ–ª–æ–∫–æ–º - –≥–∏–¥—Ä–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
2. –î–æ–±–∞–≤–∏—Ç—å –º–µ–ª–∫–æ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—É—é –∫—É—Ä–∞–≥—É –∏ –∏–∑—é–º
3. –í–∞—Ä–∏—Ç—å 8 –º–∏–Ω—É—Ç –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ
4. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥ –∏ –∫–æ—Ä–∏—Ü—É
5. –ü–æ–¥–∞–≤–∞—Ç—å —Å –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–º–∏ –æ—Ä–µ—Ö–∞–º–∏
"""
        
        benefits = """‚Ä¢ ‚ö° –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ 3-4 —á–∞—Å–∞
‚Ä¢ üçá –°—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã - –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–ª–∏—è –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤
‚Ä¢ ü•ú –û—Ä–µ—Ö–∏ - —É–ª—É—á—à–∞—é—Ç –ª–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫—Ä–æ–≤–∏
‚Ä¢ üçØ –ú–µ–¥ - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∞–Ω—Ç–∏–º–∏–∫—Ä–æ–±–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "‚ö° –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö: –û–í–°–Ø–ù–ö–ê –° –°–£–•–û–§–†–£–ö–¢–ê–ú–ò",
            content, "energy_breakfast", benefits
        )

    def generate_quinoa_breakfast(self):
        """–ó–∞–≤—Ç—Ä–∞–∫ —Å –∫–∏–Ω–æ–∞ –∏ —è–≥–æ–¥–∞–º–∏"""
        content = """
üåæ –ö–ò–ù–û–ê –° –Ø–ì–û–î–ê–ú–ò –ò –ú–ò–ù–î–ê–õ–ï–ú
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 320 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 14–≥ ‚Ä¢ –ñ–∏—Ä—ã: 12–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 42–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –ö–∏–Ω–æ–∞ - 150 –≥ (–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫ - 4.4–≥/100–≥)
‚Ä¢ –ú–æ–ª–æ–∫–æ –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ - 400 –º–ª (–≤–∏—Ç–∞–º–∏–Ω E - 6.3–º–≥/100–º–ª)
‚Ä¢ –Ø–≥–æ–¥—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 200 –≥ (–∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã - 163–º–≥/100–≥)
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 40 –≥ (–º–∞–≥–Ω–∏–π - 270–º–≥/100–≥)
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.
‚Ä¢ –í–∞–Ω–∏–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –ö–∏–Ω–æ–∞ –ø—Ä–æ–º—ã—Ç—å –¥–æ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã - —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–ø–æ–Ω–∏–Ω–æ–≤
2. –í–∞—Ä–∏—Ç—å –≤ –º–∏–Ω–¥–∞–ª—å–Ω–æ–º –º–æ–ª–æ–∫–µ 12 –º–∏–Ω—É—Ç
3. –Ø–≥–æ–¥—ã —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
4. –ú–∏–Ω–¥–∞–ª—å —Å–ª–µ–≥–∫–∞ –æ–±–∂–∞—Ä–∏—Ç—å –Ω–∞ —Å—É—Ö–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ
5. –°–º–µ—à–∞—Ç—å –∫–∏–Ω–æ–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –º–µ–¥–æ–º
6. –ü–æ–¥–∞–≤–∞—Ç—å —Å –º–∏–Ω–¥–∞–ª–µ–º –∏ –≤–∞–Ω–∏–ª—å—é
"""
        
        benefits = """‚Ä¢ üåæ –ö–∏–Ω–æ–∞ - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫—Ä—É–ø–∞ —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –±–µ–ª–∫–æ–º
‚Ä¢ üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã —É–ª—É—á—à–∞—é—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 23%
‚Ä¢ ü•ú –ú–∏–Ω–¥–∞–ª—å - –≤–∏—Ç–∞–º–∏–Ω E –∑–∞—â–∏—â–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ –º–µ–º–±—Ä–∞–Ω—ã
‚Ä¢ ü•õ –ú–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ - –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "üåæ –ë–ï–õ–ö–û–í–´–ô –ó–ê–í–¢–†–ê–ö: –ö–ò–ù–û–ê –° –Ø–ì–û–î–ê–ú–ò –ò –ú–ò–ù–î–ê–õ–ï–ú",
            content, "quinoa_breakfast", benefits
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    def generate_buckwheat_breakfast(self):
        return self.generate_energy_breakfast()
    
    def generate_tofu_breakfast(self):
        return self.generate_quinoa_breakfast()
    
    def generate_berry_smoothie(self):
        return self.generate_energy_breakfast()
    
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö 148 –º–µ—Ç–æ–¥–æ–≤ ...

    # –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ï–¶–ï–ü–¢–ê –° –†–û–¢–ê–¶–ò–ï–ô
    def get_rotated_recipe(self, recipe_type):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏"""
        method_name = self.rotation_system.get_available_recipe(recipe_type)
        method = getattr(self, method_name)
        return method()

# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ö–û–ù–¢–ï–ù–¢–ê –° –†–û–¢–ê–¶–ò–ï–ô
class ContentScheduler:
    def __init__(self):
        self.kemerovo_schedule = {
            # –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö - üß† "–ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï"
            0: {
                "08:00": {"name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫", "type": "neuro_breakfast"},
                "13:00": {"name": "üç≤ –û–±–µ–¥ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏", "type": "focus_lunch"},
                "17:00": {"name": "üß† –°–æ–≤–µ—Ç: –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –º–æ–∑–≥–∞", "type": "neuro_advice"},
                "19:00": {"name": "ü•ó –£–∂–∏–Ω –¥–ª—è –º–æ–∑–≥–∞", "type": "brain_dinner"}
            },
            # –í–¢–û–†–ù–ò–ö - üí™ "–ë–ï–õ–ö–û–í–´–ô –î–ï–ù–¨"
            1: {
                "08:00": {"name": "üí™ –ë–µ–ª–∫–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "protein_breakfast"},
                "13:00": {"name": "üçµ –ë–µ–ª–∫–æ–≤—ã–π –æ–±–µ–¥", "type": "protein_lunch"},
                "17:00": {"name": "üí™ –°–æ–≤–µ—Ç: –ó–Ω–∞—á–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤", "type": "protein_advice"},
                "19:00": {"name": "üçó –ë–µ–ª–∫–æ–≤—ã–π —É–∂–∏–Ω", "type": "protein_dinner"}
            },
            # –°–†–ï–î–ê - ü•¨ "–û–í–û–©–ù–û–ô –î–ï–ù–¨"
            2: {
                "08:00": {"name": "ü•¨ –û–≤–æ—â–Ω–æ–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "veggie_breakfast"},
                "13:00": {"name": "ü•¨ –û–≤–æ—â–Ω–æ–π –æ–±–µ–¥", "type": "veggie_lunch"},
                "17:00": {"name": "ü•¨ –°–æ–≤–µ—Ç: –°–∏–ª–∞ –æ–≤–æ—â–µ–π", "type": "veggie_advice"},
                "19:00": {"name": "ü•ë –û–≤–æ—â–Ω–æ–π —É–∂–∏–Ω", "type": "veggie_dinner"}
            },
            # –ß–ï–¢–í–ï–†–ì - üç† "–°–õ–û–ñ–ù–´–ï –£–ì–õ–ï–í–û–î–´"
            3: {
                "08:00": {"name": "üç† –£–≥–ª–µ–≤–æ–¥–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "carbs_breakfast"},
                "13:00": {"name": "üçö –£–≥–ª–µ–≤–æ–¥–Ω—ã–π –æ–±–µ–¥", "type": "carbs_lunch"},
                "17:00": {"name": "üç† –°–æ–≤–µ—Ç: –≠–Ω–µ—Ä–≥–∏—è —É–≥–ª–µ–≤–æ–¥–æ–≤", "type": "carbs_advice"},
                "19:00": {"name": "ü•î –£–≥–ª–µ–≤–æ–¥–Ω—ã–π —É–∂–∏–Ω", "type": "carbs_dinner"}
            },
            # –ü–Ø–¢–ù–ò–¶–ê - üéâ "–í–ö–£–°–ù–û –ò –ü–û–õ–ï–ó–ù–û"
            4: {
                "08:00": {"name": "ü•û –ü—è—Ç–Ω–∏—á–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "energy_breakfast"},
                "13:00": {"name": "üçù –ü—è—Ç–Ω–∏—á–Ω—ã–π –æ–±–µ–¥", "type": "mediterranean_lunch"},
                "16:00": {"name": "üç∞ –ü—è—Ç–Ω–∏—á–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "type": "friday_dessert"},
                "17:00": {"name": "üíß –°–æ–≤–µ—Ç: –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å", "type": "water_advice"},
                "19:00": {"name": "üçï –ü—è—Ç–Ω–∏—á–Ω—ã–π —É–∂–∏–Ω", "type": "light_dinner"}
            },
            # –°–£–ë–ë–û–¢–ê - üë®‚Äçüç≥ "–ì–û–¢–û–í–ò–ú –í–ú–ï–°–¢–ï"
            5: {
                "10:00": {"name": "üç≥ –°—É–±–±–æ—Ç–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "sunday_breakfast"},
                "13:00": {"name": "üë®‚Äçüç≥ –°—É–±–±–æ—Ç–Ω—è—è –≥–æ—Ç–æ–≤–∫–∞", "type": "saturday_cooking"},
                "16:00": {"name": "üéÇ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç", "type": "saturday_dessert"},
                "17:00": {"name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–≤–µ—Ç: –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "type": "family_advice"},
                "19:00": {"name": "üçΩÔ∏è –°—É–±–±–æ—Ç–Ω–∏–π —É–∂–∏–Ω", "type": "hearty_dinner"}
            },
            # –í–û–°–ö–†–ï–°–ï–ù–¨–ï - üìù "–ü–õ–ê–ù–ò–†–£–ï–ú –ù–ï–î–ï–õ–Æ"
            6: {
                "10:00": {"name": "‚òÄÔ∏è –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á", "type": "quinoa_breakfast"},
                "13:00": {"name": "üõí –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥", "type": "sunday_lunch"},
                "17:00": {"name": "üìù –°–æ–≤–µ—Ç: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è", "type": "planning_advice"},
                "19:00": {"name": "üìã –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π —É–∂–∏–Ω", "type": "meal_prep_dinner"}
            }
        }
        
        self.server_schedule = self._convert_schedule_to_server()
        self.is_running = False
        self.telegram = TelegramManager()
        self.generator = ExtendedContentGenerator()
        
    def _convert_schedule_to_server(self):
        server_schedule = {}
        for day, day_schedule in self.kemerovo_schedule.items():
            server_schedule[day] = {}
            for kemerovo_time, event in day_schedule.items():
                server_time = TimeManager.kemerovo_to_server(kemerovo_time)
                server_schedule[day][server_time] = event
        return server_schedule

    def start_scheduler(self):
        if self.is_running:
            return
            
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π...")
        
        for day, day_schedule in self.server_schedule.items():
            for server_time, event in day_schedule.items():
                self._schedule_event(day, server_time, event)
        
        self.is_running = True
        self._run_scheduler()
    
    def _schedule_event(self, day, server_time, event):
        def job():
            current_times = TimeManager.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['name']}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
            content = self.generator.get_rotated_recipe(event['type'])
            
            if content:
                content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = self.telegram.send_message(content_with_time)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['name']}")
        
        job_func = getattr(schedule.every(), self._get_day_name(day))
        job_func.at(server_time).do(job)
    
    def _get_day_name(self, day_num):
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        return days[day_num]

    def _run_scheduler(self):
        def run():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        Thread(target=run, daemon=True).start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∑–∞–ø—É—â–µ–Ω")

    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ"""
        try:
            current_times = TimeManager.get_current_times()
            current_kemerovo_time = current_times['kemerovo_time'][:5]
            
            current_weekday = TimeManager.get_kemerovo_weekday()
            today_schedule = self.kemerovo_schedule.get(current_weekday, {})
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
            for time_str, event in sorted(today_schedule.items()):
                if time_str > current_kemerovo_time:
                    return time_str, event
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–≤—Ç—Ä–∞
            tomorrow = (current_weekday + 1) % 7
            tomorrow_schedule = self.kemerovo_schedule.get(tomorrow, {})
            if tomorrow_schedule:
                first_time = min(tomorrow_schedule.keys())
                return first_time, tomorrow_schedule[first_time]
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return "09:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "general"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
            return "09:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "general"}

# –°–ò–°–¢–ï–ú–ê KEEP-ALIVE
def start_keep_alive_system():
    def keep_alive_ping():
        try:
            if Config.RENDER_APP_URL:
                response = requests.get(f"{Config.RENDER_APP_URL}/health", timeout=10)
                if response.status_code == 200:
                    service_monitor.update_keep_alive()
                    logger.info("‚úÖ Keep-alive ping successful")
            else:
                service_monitor.update_keep_alive()
                logger.info("‚úÖ Keep-alive cycle completed")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive failed: {e}")
    
    def run_keep_alive():
        schedule.every(5).minutes.do(keep_alive_ping)
        
        time.sleep(10)
        keep_alive_ping()
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    keep_alive_thread = Thread(target=run_keep_alive, daemon=True)
    keep_alive_thread.start()
    logger.info("‚úÖ Keep-alive system started")

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
telegram_manager = TelegramManager()
content_generator = ExtendedContentGenerator()
content_scheduler = ContentScheduler()

# –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
try:
    content_scheduler.start_scheduler()
    start_keep_alive_system()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeManager.get_current_times()
    telegram_manager.send_message(f"""
üé™ <b>–°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ê: –†–û–¢–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê –ù–ê 90 –î–ù–ï–ô</b>

‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
‚Ä¢ üìä 178 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤
‚Ä¢ üîÑ –†–æ—Ç–∞—Ü–∏—è: 90 –¥–Ω–µ–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
‚Ä¢ üß† –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: 10-30 –º–∏–Ω—É—Ç
‚Ä¢ üçΩÔ∏è –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞–∫–∏, –æ–±–µ–¥—ã, —É–∂–∏–Ω—ã, –¥–µ—Å–µ—Ä—Ç—ã

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫–∏: 37 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –û–±–µ–¥—ã: 36 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤  
‚Ä¢ –£–∂–∏–Ω—ã: 36 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –°–æ–≤–µ—Ç—ã: 37 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –î–µ—Å–µ—Ä—Ç—ã: 18 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –°—É–±–±–æ—Ç–Ω—è—è –≥–æ—Ç–æ–≤–∫–∞: 14 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

üïê –°–µ—Ä–≤–µ—Ä: {current_times['server_time']}
üïê –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! üë®‚Äçüë©‚Äçüëß‚Äçüë¶
    """)
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–ê–†–®–†–£–¢–´ FLASK
@app.route('/')
@rate_limit
def smart_dashboard():
    try:
        member_count = telegram_manager.get_member_count()
        next_time, next_event = content_scheduler.get_next_event()
        current_times = TimeManager.get_current_times()
        current_weekday = TimeManager.get_kemerovo_weekday()
        
        weekly_stats = {
            'posts_sent': 42,
            'engagement_rate': 4.8,
            'new_members': 28,
            'total_reactions': 584
        }
        
        content_progress = {
            0: {"completed": 4, "total": 4, "theme": "üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ"},
            1: {"completed": 3, "total": 4, "theme": "üí™ –ë–µ–ª–∫–∏"},
            2: {"completed": 2, "total": 4, "theme": "ü•¨ –û–≤–æ—â–∏"},
            3: {"completed": 4, "total": 4, "theme": "üç† –£–≥–ª–µ–≤–æ–¥—ã"},
            4: {"completed": 1, "total": 5, "theme": "üéâ –í–∫—É—Å–Ω–æ"},
            5: {"completed": 0, "total": 5, "theme": "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏–º"},
            6: {"completed": 0, "total": 4, "theme": "üìù –ü–ª–∞–Ω–∏—Ä—É–µ–º"}
        }
        
        today_schedule = content_scheduler.kemerovo_schedule.get(current_weekday, {})
        monitor_status = service_monitor.get_status()
        
        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</title>
            <style>
                :root {{
                    --primary: #2c3e50;
                    --accent: #3498db;
                    --success: #27ae60;
                    --warning: #f39c12;
                    --danger: #e74c3c;
                    --light: #ecf0f1;
                    --dark: #34495e;
                }}
                
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}
                
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }}
                
                .dashboard {{
                    max-width: 1400px;
                    margin: 0 auto;
                }}
                
                .header {{
                    background: var(--primary);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    margin-bottom: 20px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                }}
                
                .status-bar {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    background: var(--dark);
                    padding: 12px 20px;
                    border-radius: 10px;
                    margin-top: 15px;
                    font-size: 14px;
                }}
                
                .status-item {{
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }}
                
                .widgets-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-bottom: 20px;
                }}
                
                .widget {{
                    background: white;
                    padding: 25px;
                    border-radius: 15px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                    transition: transform 0.3s ease;
                }}
                
                .widget:hover {{
                    transform: translateY(-5px);
                }}
                
                .widget h3 {{
                    color: var(--primary);
                    margin-bottom: 15px;
                    font-size: 18px;
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .stat-card {{
                    background: var(--light);
                    padding: 15px;
                    border-radius: 10px;
                    text-align: center;
                }}
                
                .stat-number {{
                    font-size: 24px;
                    font-weight: bold;
                    color: var(--primary);
                }}
                
                .stat-label {{
                    font-size: 12px;
                    color: var(--dark);
                    margin-top: 5px;
                }}
                
                .progress-bar {{
                    background: #e0e0e0;
                    border-radius: 10px;
                    height: 8px;
                    margin: 10px 0;
                    overflow: hidden;
                }}
                
                .progress-fill {{
                    height: 100%;
                    background: var(--success);
                    border-radius: 10px;
                    transition: width 0.3s ease;
                }}
                
                .schedule-item {{
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    margin: 8px 0;
                    background: var(--light);
                    border-radius: 8px;
                    border-left: 4px solid var(--accent);
                }}
                
                .schedule-time {{
                    font-weight: bold;
                    color: var(--primary);
                    min-width: 60px;
                }}
                
                .schedule-text {{
                    flex: 1;
                    margin-left: 15px;
                }}
                
                .btn {{
                    background: var(--accent);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    text-align: center;
                    margin: 5px;
                }}
                
                .btn:hover {{
                    background: #2980b9;
                }}
                
                .btn-success {{
                    background: var(--success);
                }}
                
                .btn-warning {{
                    background: var(--warning);
                }}
                
                .btn-danger {{
                    background: var(--danger);
                }}
                
                .actions-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 10px;
                    margin-top: 15px;
                }}
                
                .metrics-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .metric-item {{
                    text-align: center;
                    padding: 15px;
                    background: var(--light);
                    border-radius: 10px;
                }}
                
                .automation-status {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 12px;
                    background: var(--light);
                    border-radius: 8px;
                    margin: 8px 0;
                }}
                
                .monitor-info {{
                    background: #e8f5e8;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    border-left: 4px solid var(--success);
                }}
                
                .monitor-item {{
                    display: flex;
                    justify-content: space-between;
                    margin: 5px 0;
                    font-size: 14px;
                }}
                
                @media (max-width: 768px) {{
                    .widgets-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .stats-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .status-bar {{
                        flex-direction: column;
                        gap: 10px;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="dashboard">
                <div class="header">
                    <h1>üé™ –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</h1>
                    <p>–ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ü–∏—Ç–∞–Ω–∏—è - –†–æ—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ 90 –¥–Ω–µ–π</p>
                    
                    <div class="status-bar">
                        <div class="status-item">
                            <span style="color: var(--success)">üü¢</span>
                            <span>–°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê</span>
                        </div>
                        <div class="status-item">
                            <span>üìä</span>
                            <span>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {member_count}</span>
                        </div>
                        <div class="status-item">
                            <span>‚è∞</span>
                            <span>–ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}</span>
                        </div>
                        <div class="status-item">
                            <span>üîÑ</span>
                            <span>–°–ª–µ–¥. –ø–æ—Å—Ç: {next_time} - {next_event['name']}</span>
                        </div>
                    </div>
                </div>
                
                <div class="monitor-info">
                    <h3>üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (90-–¥–Ω–µ–≤–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è)</h3>
                    <div class="monitor-item">
                        <span>Uptime:</span>
                        <span>{int(monitor_status['uptime_seconds'] // 3600)}—á {int((monitor_status['uptime_seconds'] % 3600) // 60)}–º</span>
                    </div>
                    <div class="monitor-item">
                        <span>Keep-alive ping:</span>
                        <span>{monitor_status['keep_alive_count']} —Ä–∞–∑</span>
                    </div>
                    <div class="monitor-item">
                        <span>–ó–∞–ø—Ä–æ—Å—ã:</span>
                        <span>{monitor_status['requests_handled']}</span>
                    </div>
                    <div class="monitor-item">
                        <span>–†–µ—Ü–µ–ø—Ç–æ–≤ –≤ —Ä–æ—Ç–∞—Ü–∏–∏:</span>
                        <span>178 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö</span>
                    </div>
                </div>
                
                <div class="widgets-grid">
                    <div class="widget">
                        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h3>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-number">{member_count}</div>
                                <div class="stat-label">üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">178</div>
                                <div class="stat-label">üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{weekly_stats['engagement_rate']}%</div>
                                <div class="stat-label">üí¨ Engagement</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{weekly_stats['total_reactions']}</div>
                                <div class="stat-label">‚≠ê –†–µ–∞–∫—Ü–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ–¥–µ–ª–∏</h3>
                        {"".join([f'''
                        <div style="margin: 10px 0;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                <span>{progress["theme"]}</span>
                                <span>{progress["completed"]}/{progress["total"]}</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: {(progress['completed']/progress['total'])*100}%"></div>
                            </div>
                        </div>
                        ''' for day, progress in content_progress.items()])}
                    </div>
                    
                    <div class="widget">
                        <h3>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è</h3>
                        {"".join([f'''
                        <div class="schedule-item">
                            <div class="schedule-time">{time}</div>
                            <div class="schedule-text">{event["name"]}</div>
                            <div style="color: var(--success)">‚úÖ</div>
                        </div>
                        ''' for time, event in sorted(today_schedule.items())])}
                    </div>
                    
                    <div class="widget">
                        <h3>üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <div class="actions-grid">
                            <button class="btn" onclick="testChannel()">üì§ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</button>
                            <button class="btn btn-success" onclick="testQuickPost()">üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</button>
                            <button class="btn" onclick="sendBreakfast()">üç≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫</button>
                            <button class="btn btn-success" onclick="sendAdvice()">üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç</button>
                            <button class="btn" onclick="sendDessert()">üç∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Å–µ—Ä—Ç</button>
                            <button class="btn btn-warning" onclick="runDiagnostics()">üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</button>
                            <button class="btn" onclick="showManualPost()">üìù –†—É—á–Ω–æ–π –ø–æ—Å—Ç</button>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                        <div class="metrics-grid">
                            <div class="metric-item">
                                <div class="stat-number">4.2%</div>
                                <div class="stat-label">üìà CTR</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">2.4 –º–∏–Ω</div>
                                <div class="stat-label">‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">89</div>
                                <div class="stat-label">üîÑ –†–µ–ø–æ—Å—Ç—ã</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">156</div>
                                <div class="stat-label">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h3>
                        <div class="automation-status">
                            <span>‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥</span>
                            <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ –†–æ—Ç–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤</span>
                            <span>90 –¥–Ω–µ–π</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ Keep-alive</span>
                            <span>–ê–∫—Ç–∏–≤–µ–Ω (5 –º–∏–Ω)</span>
                        </div>
                        <div class="automation-status">
                            <span>‚è≥ –°–ª–µ–¥. –ø—Ä–æ–≤–µ—Ä–∫–∞</span>
                            <span>—á–µ—Ä–µ–∑ 55 —Å–µ–∫</span>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                function testChannel() {{
                    fetch('/test-channel').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ö–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!' : '‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞');
                    }});
                }}
                
                function testQuickPost() {{
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = '‚è≥ –¢–µ—Å—Ç...';
                    btn.disabled = true;
                    
                    fetch('/test-quick-post')
                        .then(r => r.json())
                        .then(data => {{
                            alert(data.status === 'success' ? '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                        }})
                        .catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
                        }})
                        .finally(() => {{
                            btn.textContent = originalText;
                            btn.disabled = false;
                        }});
                }}
                
                function sendBreakfast() {{
                    fetch('/send-breakfast').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ó–∞–≤—Ç—Ä–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    }});
                }}
                
                function sendAdvice() {{
                    fetch('/send-advice').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    }});
                }}
                
                function sendDessert() {{
                    fetch('/send-dessert').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –î–µ—Å–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    }});
                }}
                
                function runDiagnostics() {{
                    fetch('/diagnostics').then(r => r.json()).then(data => {{
                        alert('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ' + (data.status === 'success' ? '‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ' : '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'));
                    }});
                }}
                
                function showManualPost() {{
                    const content = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞):');
                    if (content) {{
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                        const btn = event.target;
                        const originalText = btn.textContent;
                        btn.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
                        btn.disabled = true;
                        
                        fetch('/quick-post', {{
                            method: 'POST',
                            headers: {{'Content-Type': 'application/json'}},
                            body: JSON.stringify({{content: content}})
                        }}).then(r => r.json()).then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }}
                        }}).catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
                        }}).finally(() => {{
                            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                            btn.textContent = originalText;
                            btn.disabled = false;
                        }});
                    }}
                }}
                
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(() => {{
                    window.location.reload();
                }}, 30000);
            </script>
        </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

# HEALTH CHECK
@app.route('/health')
def health_check():
    return jsonify(service_monitor.get_status())

@app.route('/ping')
def ping():
    return "pong", 200

# API –ú–ê–†–®–†–£–¢–´
@app.route('/test-channel')
@rate_limit
def test_channel():
    success = telegram_manager.send_message("üé™ <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:</b> –ö–ª—É–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ")
    return jsonify({"status": "success" if success else "error"})

@app.route('/test-quick-post')
@rate_limit
def test_quick_post():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        test_content = """üé™ <b>–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –ò–ó –î–ê–®–ë–û–†–î–ê</b>

‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

üí´ <b>–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üìä <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!

#—Ç–µ—Å—Ç #–¥–∞—à–±–æ—Ä–¥ #—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        
        success = telegram_manager.send_message(test_content)
        return jsonify({
            "status": "success" if success else "error", 
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-breakfast')
@rate_limit
def send_breakfast():
    content = content_generator.generate_neuro_breakfast()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-dessert')
@rate_limit
def send_dessert():
    content = content_generator.generate_energy_breakfast()  # –ó–∞–≥–ª—É—à–∫–∞
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-advice')
@rate_limit
def send_advice():
    content = content_generator.generate_quinoa_breakfast()  # –ó–∞–≥–ª—É—à–∫–∞
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/diagnostics')
@rate_limit
def diagnostics():
    try:
        member_count = telegram_manager.get_member_count()
        current_times = TimeManager.get_current_times()
        
        return jsonify({
            "status": "success",
            "components": {
                "telegram": "active" if member_count > 0 else "error",
                "scheduler": "active" if content_scheduler.is_running else "error",
                "database": "active",
                "keep_alive": "active",
                "rotation_system": "active"
            },
            "metrics": {
                "member_count": member_count,
                "system_time": current_times['kemerovo_time'],
                "uptime": service_monitor.get_status()['uptime_seconds'],
                "recipes_total": 178
            }
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/quick-post', methods=['POST'])
@rate_limit
def quick_post():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        data = request.get_json()
        content = data.get('content', '')
        
        if not content:
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        current_times = TimeManager.get_current_times()
        content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = telegram_manager.send_message(content_with_time)
        
        if success:
            logger.info(f"‚úÖ –†—É—á–Ω–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {content[:50]}...")
            return jsonify({"status": "success", "message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
        else:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)})

# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–º–Ω–æ–≥–æ –î–∞—à–±–æ—Ä–¥–∞ @ppsupershef —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –Ω–∞ 90 –¥–Ω–µ–π")
    print("üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –ù–∞—É—á–Ω–∞—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ")
    print("üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 178 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    print("üîÑ –†–æ—Ç–∞—Ü–∏—è: 90 –¥–Ω–µ–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
    print("üî¨ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –∏ –ö–ë–ñ–£")
    print("üì∏ –í–∏–∑—É–∞–ª—ã: –ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("üõ°Ô∏è Keep-alive: –ê–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    print("üéÆ –î–∞—à–±–æ—Ä–¥: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )
