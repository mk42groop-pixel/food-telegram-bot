import os
import logging
from flask import Flask, request, jsonify, render_template
import requests
import json
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-100362423055')  # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô ID
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID
        self.group = Config.TELEGRAM_GROUP
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
elite_channel = EliteChannel()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.deepseek_key = Config.DEEPSEEK_API_KEY
    
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1000
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.'
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None
    
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        prompts = [
            "–°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é",
            "–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ–∑–Ω–æ–≥–æ –±–ª—é–¥–∞"
        ]
        
        import random
        prompt = random.choice(prompts)
        content = self.generate_with_yandex_gpt(prompt)
        
        if content:
            return f"üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê:\n\n{content}\n\n#—Å–æ–≤–µ—Ç #–∫—É–ª–∏–Ω–∞—Ä–∏—è #–∑–¥–æ—Ä–æ–≤–æ–µ–ø–∏—Ç–∞–Ω–∏–µ"
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
content_gen = ContentGenerator()

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    return jsonify({
        "telegram_channel_id": Config.TELEGRAM_CHANNEL,
        "bot_token_exists": bool(Config.TELEGRAM_BOT_TOKEN),
        "current_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "status": "active"
    })

@app.route('/send-now/<content_type>')
def send_now(content_type):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        if content_type == 'expert_advice':
            content = content_gen.generate_expert_advice()
            if not content:
                return jsonify({
                    "status": "error",
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
                })
        else:
            return jsonify({
                "status": "error", 
                "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}"
            })
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        success = elite_channel.send_to_telegram(content)
        
        if success:
            return jsonify({
                "status": "success",
                "message": f"–ö–æ–Ω—Ç–µ–Ω—Ç {content_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª",
                "channel_id": Config.TELEGRAM_CHANNEL
            })
        else:
            return jsonify({
                "status": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {content_type}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send-now: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
    test_message = f"‚úÖ –¢–ï–°–¢: –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω! ID: {Config.TELEGRAM_CHANNEL}\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
    
    success = elite_channel.send_to_telegram(test_message)
    
    return jsonify({
        "status": "success" if success else "error",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "channel_id": Config.TELEGRAM_CHANNEL,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/channel-info')
def channel_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ"""
    return jsonify({
        "channel_id": Config.TELEGRAM_CHANNEL,
        "channel_username": "@ppsupershef",
        "bot_token_preview": Config.TELEGRAM_BOT_TOKEN[:10] + "..." if Config.TELEGRAM_BOT_TOKEN else "Not set",
        "environment": "production" if os.getenv('PRODUCTION') else "development"
    })

# –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@app.route('/force-fix')
def force_fix():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID"""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º ID
    elite_channel.channel = '-100362423055'
    
    test_message = f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢\nID: {elite_channel.channel}\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
    
    success = elite_channel.send_to_telegram(test_message)
    
    return jsonify({
        "status": "success" if success else "error",
        "channel_used": elite_channel.channel,
        "message": "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –∫–∞–Ω–∞–ª–∞" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
    })

@app.route('/check-connection')
def check_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
    import requests
    
    bot_token = Config.TELEGRAM_BOT_TOKEN
    channel_id = Config.TELEGRAM_CHANNEL
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
        bot_url = f"https://api.telegram.org/bot{bot_token}/getMe"
        bot_response = requests.get(bot_url, timeout=10).json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
        chat_url = f"https://api.telegram.org/bot{bot_token}/getChat"
        chat_response = requests.post(chat_url, json={'chat_id': channel_id}, timeout=10).json()
        
        return jsonify({
            "bot_status": "valid" if bot_response.get('ok') else "invalid",
            "channel_status": "accessible" if chat_response.get('ok') else "inaccessible",
            "channel_id": channel_id,
            "bot_username": bot_response.get('result', {}).get('username') if bot_response.get('ok') else None,
            "channel_title": chat_response.get('result', {}).get('title') if chat_response.get('ok') else None
        })
        
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–æ–º ID: {Config.TELEGRAM_CHANNEL}")
    app.run(host='0.0.0.0', port=10000, debug=True)
