import os
import logging
import requests
import json
import time
import schedule
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps
import secrets

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET', secrets.token_hex(32))

# üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class SecureConfig:
    def __init__(self):
        load_dotenv()
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        self.TELEGRAM_BOT_TOKEN = self._get_secure_env('TELEGRAM_BOT_TOKEN')
        self.YANDEX_GPT_API_KEY = self._get_secure_env('YANDEX_GPT_API_KEY')
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.TELEGRAM_CHANNEL = self._get_secure_env('TELEGRAM_CHANNEL', '-1003152210862')
        self.TELEGRAM_GROUP = self._get_secure_env('TELEGRAM_GROUP', '@ppsupershef_chat')
        self.YANDEX_FOLDER_ID = self._get_secure_env('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
        self.DEEPSEEK_API_KEY = self._get_secure_env('DEEPSEEK_API_KEY', '')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        self.SERVER_TIMEZONE = pytz.timezone('UTC')
        self.KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')
        
        self._validate_config()
    
    def _get_secure_env(self, key, default=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key, default)
        if value is None:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {key}")
        return value
    
    def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.TELEGRAM_BOT_TOKEN:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        if not self.YANDEX_GPT_API_KEY:
            logger.warning("‚ö†Ô∏è YANDEX_GPT_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# üîí –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def rate_limit(requests_per_minute=30):
    def decorator(f):
        requests = []
        lock = Lock()
        
        @wraps(f)
        def decorated_function(*args, **kwargs):
            with lock:
                now = time.time()
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                requests[:] = [req for req in requests if now - req < 60]
                
                if len(requests) >= requests_per_minute:
                    return jsonify({
                        "status": "error", 
                        "message": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
                    }), 429
                
                requests.append(now)
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = SecureConfig()
    logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# üé® –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class ModernContentFormatter:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    THEMES = {
        'neuro': {
            'emoji': 'üß†',
            'name': '–ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ',
            'color': '#8B5CF6',
            'triggers': [
                "–Ø—Å–Ω–æ—Å—Ç—å —É–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≤—Ç—Ä–∞–∫–∞",
                "–ù–µ–π—Ä–æ–Ω—ã –ª—é–±—è—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∏—â—É",
                "–ú–æ–∑–≥ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ç–æ–ø–ª–∏–≤–∞"
            ]
        },
        'energy': {
            'emoji': '‚ö°', 
            'name': '–≠–Ω–µ—Ä–≥–∏—è',
            'color': '#F59E0B',
            'triggers': [
                "–ó–∞—Ä—è–¥–∏—Ç–µ—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å",
                "–¢–æ–ø–ª–∏–≤–æ –¥–ª—è –≤–∞—à–∏—Ö –∞–º–±–∏—Ü–∏–π",
                "–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π"
            ]
        },
        'longevity': {
            'emoji': 'üõ°Ô∏è',
            'name': '–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ', 
            'color': '#10B981',
            'triggers': [
                "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤–æ–µ –±—É–¥—É—â–µ–µ",
                "–ö–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ - —à–∞–≥ –∫ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é",
                "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è"
            ]
        },
        'gastronomy': {
            'emoji': 'üçΩÔ∏è',
            'name': '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'color': '#EC4899', 
            'triggers': [
                "–ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
                "–ò–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π —Ç–∞—Ä–µ–ª–∫–µ",
                "–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ"
            ]
        },
        'analytics': {
            'emoji': 'üìä',
            'name': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'color': '#3B82F6',
            'triggers': [
                "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π", 
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è"
            ]
        },
        'shopping': {
            'emoji': 'üõí',
            'name': '–ü–æ–∫—É–ø–∫–∏',
            'color': '#8B5CF6',
            'triggers': [
                "–£–º–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ - –≤–∞—à –≤—ã–±–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è"
            ]
        },
        'rituals': {
            'emoji': 'üìà',
            'name': '–†–∏—Ç—É–∞–ª—ã',
            'color': '#F59E0B',
            'triggers': [
                "–°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
                "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ù–∞—á–Ω–∏—Ç–µ –Ω–µ–¥–µ–ª—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è"
            ]
        }
    }
    
    @staticmethod
    def create_modern_message(theme_type, title, content, recipe_type):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        theme = ModernContentFormatter.THEMES.get(theme_type, ModernContentFormatter.THEMES['neuro'])
        
        header = f"""üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø</b>

{theme['emoji']} <b>{theme['name'].upper()}</b>

{random.choice(theme['triggers'])}

<b>{title}</b>"""
        
        footer = f"""
---
üí´ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è!</b>

üì¢ <b>–ö–∞–Ω–∞–ª:</b> @ppsupershef
üí¨ <b>–ß–∞—Ç:</b> @ppsupershef_chat

üòã –í–∫—É—Å–Ω–æ | üí™ –ü–æ–ª–µ–∑–Ω–æ | üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é

#–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #{theme_type}"""
        
        return header + "\n\n" + content + footer

# üïê –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(config.SERVER_TIMEZONE)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        try:
            server_now = datetime.now(config.SERVER_TIMEZONE)
            kemerovo_now = datetime.now(config.KEMEROVO_TIMEZONE)
            
            return {
                'server_time': server_now.strftime('%H:%M:%S'),
                'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
                'server_timezone': str(config.SERVER_TIMEZONE),
                'kemerovo_timezone': str(config.KEMEROVO_TIMEZONE)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return {
                'server_time': '00:00:00',
                'kemerovo_time': '00:00:00',
                'server_timezone': 'UTC',
                'kemerovo_timezone': 'Asia/Novokuznetsk'
            }

# üîß –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Telegram
class SecureTelegramManager:
    def __init__(self):
        self.token = config.TELEGRAM_BOT_TOKEN
        self.channel = config.TELEGRAM_CHANNEL
        self.session = requests.Session()
        self.session.timeout = (10, 30)  # 10s connect, 30s read
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.message_cache = set()
        self.cache_lock = Lock()
    
    def _create_message_hash(self, content):
        """–°–æ–∑–¥–∞–µ—Ç —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import hashlib
        return hashlib.md5(content.encode()).hexdigest()
    
    @rate_limit(requests_per_minute=20)
    def send_message(self, content, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            message_hash = self._create_message_hash(content)
            with self.cache_lock:
                if message_hash in self.message_cache:
                    logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    return False
                self.message_cache.add(message_hash)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if len(self.message_cache) > 100:
                    self.message_cache.clear()
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': content,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = self.session.post(url, json=payload)
            
            if response.status_code == 429:
                # Rate limiting - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                retry_after = response.json().get('parameters', {}).get('retry_after', 30)
                logger.warning(f"‚ö†Ô∏è Rate limit, –∂–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥")
                time.sleep(retry_after)
                return self.send_message(content, parse_mode)
            
            result = response.json()
            
            if result.get('ok'):
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {result.get('description')}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                with self.cache_lock:
                    self.message_cache.discard(message_hash)
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            with self.cache_lock:
                self.message_cache.discard(message_hash)
            return False
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = self.session.get(url)
            result = response.json()
            
            if result.get('ok'):
                return {
                    "status": "success",
                    "bot_username": result['result']['username'],
                    "bot_id": result['result']['id']
                }
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"}
        except Exception as e:
            return {"status": "error", "message": str(e)}

# üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class EfficientContentGenerator:
    def __init__(self):
        self.formatter = ModernContentFormatter()
        self.telegram = SecureTelegramManager()
    
    def generate_daily_content(self, day_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É –¥–Ω—è"""
        content_map = {
            'monday': ('neuro', 'üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê'),
            'tuesday': ('energy', '‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø'),
            'wednesday': ('longevity', 'üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø'),
            'thursday': ('gastronomy', 'üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö'),
            'friday': ('analytics', 'üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö'),
            'saturday': ('shopping', 'ü•ó –°–£–ë–ë–û–¢–ù–ò–ô –ë–†–ê–ù–ß'),
            'sunday': ('rituals', 'üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –†–ò–¢–£–ê–õ')
        }
        
        theme, title = content_map.get(day_type, ('neuro', 'üç≥ –£–ú–ù–´–ô –ó–ê–í–¢–†–ê–ö'))
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI
        content = self._generate_fallback_content(theme, title)
        
        return self.formatter.create_modern_message(theme, title, content, "breakfast")
    
    def _generate_fallback_content(self, theme, title):
        """–§–æ–ª–±—ç–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        recipes = {
            'neuro': """ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (1 –ø–æ—Ä—Ü–∏—è):
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ ü•¨ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å–æ —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –∞–≤–æ–∫–∞–¥–æ –∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ü–æ–ª—å–∑–∞: –£–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞—â–∏—â–∞–µ—Ç –º–æ–∑–≥""",
            
            'energy': """ü•£ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–≤—Å—è–Ω–∫–∞

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (1 –ø–æ—Ä—Ü–∏—è):
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50 –≥  
‚Ä¢ üçå –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ üå∞ –ú–∏–Ω–¥–∞–ª—å - 20 –≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ üü§ –ö–æ—Ä–∏—Ü–∞ - ¬Ω —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (5 –º–∏–Ω—É—Ç):
1. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π
2. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ —Å–µ–º–µ–Ω–∞
3. –ü–æ—Å—ã–ø—å—Ç–µ –æ—Ä–µ—Ö–∞–º–∏ –∏ –∫–æ—Ä–∏—Ü–µ–π

üí° –ü–æ–ª—å–∑–∞: –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ 4-5 —á–∞—Å–æ–≤""",
            
            'longevity': """üç≤ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å –∫—É—Ä–∫—É–º–æ–π

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (1 –ø–æ—Ä—Ü–∏—è):
‚Ä¢ üü§ –ì—Ä–µ—á–∫–∞ - 50 –≥
‚Ä¢ üü° –ö—É—Ä–∫—É–º–∞ - 1 —á.–ª.
‚Ä¢ üçì –Ø–≥–æ–¥—ã - 100 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ üíö –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –°–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–Ω–µ–≤—É—é –∫–∞—à—É
2. –î–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∫—É–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —è–≥–æ–¥–∞–º–∏ –∏ –º–∞—Å–ª–æ–º

üí° –ü–æ–ª—å–∑–∞: –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è""",
            
            'gastronomy': """üç≥ –ì—Ä–µ–Ω–∫–∏ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —è–π—Ü–æ–º-–ø–∞—à–æ—Ç

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (1 –ø–æ—Ä—Ü–∏—è):
‚Ä¢ üçû –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - 2 –ª–æ–º—Ç–∏–∫–∞
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 1 —à—Ç
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•¨ –†—É–∫–∫–æ–ª–∞ - 30 –≥
‚Ä¢ ‚ö´ –°–µ–º–µ–Ω–∞ –∫—É–Ω–∂—É—Ç–∞ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –ü–æ–¥—Å—É—à–∏—Ç–µ —Ö–ª–µ–± –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ
2. –†–∞–∑–æ–º–Ω–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ —Å —Å–æ–ª—å—é
3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —è–π—Ü–∞-–ø–∞—à–æ—Ç (3 –º–∏–Ω—É—Ç—ã)
4. –°–æ–±–µ—Ä–∏—Ç–µ: —Ö–ª–µ–± + –∞–≤–æ–∫–∞–¥–æ + —Ä—É–∫–∫–æ–ª–∞ + —è–π—Ü–æ

üí° –ü–æ–ª—å–∑–∞: –ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π –≤–∫—É—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π""",
            
            'analytics': """ü•£ –¢–≤–æ—Ä–æ–∂–Ω–∞—è –º–∞—Å—Å–∞ —Å –æ—Ä–µ—Ö–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (1 –ø–æ—Ä—Ü–∏—è):
‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ 5% - 150 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥
‚Ä¢ üçØ –ú–µ–¥ - 1 —Å—Ç.–ª.
‚Ä¢ üü£ –ò–∑—é–º - 20 –≥
‚Ä¢ üçã –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (5 –º–∏–Ω—É—Ç):
1. –°–º–µ—à–∞–π—Ç–µ —Ç–≤–æ—Ä–æ–≥ —Å –º–µ–¥–æ–º –∏ —Å–æ–∫–æ–º
2. –î–æ–±–∞–≤—å—Ç–µ –æ—Ä–µ—Ö–∏ –∏ –∏–∑—é–º
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ö–ª–µ–±—Ü–∞–º–∏

üí° –ü–æ–ª—å–∑–∞: –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è"""
        }
        
        return recipes.get(theme, recipes['neuro'])
    
    def generate_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
        season = self._get_current_season()
        
        shopping_list = f"""üõí <b>–£–ú–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ù–ê –ù–ï–î–ï–õ–Æ</b>

üéØ –û—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è ({season})

üß† <b>–î–õ–Ø –ú–û–ó–ì–ê –ò –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´:</b>
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 200 –≥
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 3-4 —à—Ç
‚Ä¢ üêü –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ - 500 –≥
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 10 —à—Ç
‚Ä¢ üç´ –¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ 85% - 100 –≥

üí™ <b>–î–õ–Ø –≠–ù–ï–†–ì–ò–ò –ò –¢–û–ù–£–°–ê:</b>
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 500 g
‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 1 –∫–≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 100 –≥
‚Ä¢ üçó –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 1 –∫–≥
‚Ä¢ üü§ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 500 –≥

üõ°Ô∏è <b>–î–õ–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø:</b>
‚Ä¢ üü° –ö—É—Ä–∫—É–º–∞ - 50 –≥
‚Ä¢ üü† –ò–º–±–∏—Ä—å - 100 –≥
‚Ä¢ ‚ö™ –ß–µ—Å–Ω–æ–∫ - 3 –≥–æ–ª–æ–≤–∫–∏
‚Ä¢ üçì –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 500 –≥
‚Ä¢ ü•¨ –ó–µ–ª–µ–Ω—ã–µ –æ–≤–æ—â–∏ - 1 –∫–≥

üí° <b>–°–û–í–ï–¢–´ –û–¢ –®–ï–§-–ü–û–í–ê–†–ê:</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã - –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –æ—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ

üéØ <b>–§–ò–õ–û–°–û–§–ò–Ø –ü–û–ö–£–ü–û–ö:</b>
–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!

#—á–µ–∫–ª–∏—Å—Ç #—É–º–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏ #{season}"""
        
        return shopping_list
    
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        advice = """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–ï–®–¨–¢–ï –¶–í–ï–¢–ê –†–ê–î–£–ì–ò"</b>

üéØ <b>–§–û–†–ú–£–õ–ò–†–û–í–ö–ê:</b> –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏ - –∫—Ä–∞—Å–Ω—ã–µ, –æ—Ä–∞–Ω–∂–µ–≤—ã–µ, –∂–µ–ª—Ç—ã–µ, –∑–µ–ª–µ–Ω—ã–µ, —Å–∏–Ω–∏–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ.

üî¨ <b>–ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:</b>
‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–µ - –ª–∏–∫–æ–ø–∏–Ω –ø—Ä–æ—Ç–∏–≤ —Ä–∞–∫–∞
‚Ä¢ üü† –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω –¥–ª—è –∑—Ä–µ–Ω–∏—è  
‚Ä¢ üü° –ñ–µ–ª—Ç—ã–µ - –≤–∏—Ç–∞–º–∏–Ω C –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–µ - –ª—é—Ç–µ–∏–Ω –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ üîµ –°–∏–Ω–∏–µ - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞
‚Ä¢ üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ - —Ä–µ—Å–≤–µ—Ä–∞—Ç—Ä–æ–ª –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è

‚ö° <b>–ú–ï–•–ê–ù–ò–ó–ú –î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ–∏—Ç–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
‚Ä¢ –£–∫—Ä–µ–ø–ª—è–µ—Ç –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—É—é –∑–∞—â–∏—Ç—É
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ–±–∏–æ–º

üí° <b>–ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:</b> –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –æ–±–µ–¥ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º - —Å–∞–ª–∞—Ç –∏–∑ –ø–æ–º–∏–¥–æ—Ä–æ–≤, –º–æ—Ä–∫–æ–≤–∏, –ø–µ—Ä—Ü–∞, –æ–≥—É—Ä—Ü–æ–≤ –∏ –∫–∞–ø—É—Å—Ç—ã.

üìà <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´:</b> –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üéØ <b>–ü–†–û–°–¢–û–ô –®–ê–ì:</b> –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏."""
        
        return advice
    
    def _get_current_season(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"

# üåê –°–û–í–†–ï–ú–ï–ù–ù–´–ô FLASK –ò–ù–¢–ï–†–§–ï–ô–°
@app.route('/')
def modern_dashboard():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        current_time = datetime.now(config.KEMEROVO_TIMEZONE)
        weekday = current_time.strftime('%A').lower()
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
        day_name_ru = {
            'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 
            'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
            'wednesday': '–°—Ä–µ–¥–∞', 
            'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday': '–ü—è—Ç–Ω–∏—Ü–∞', 
            'saturday': '–°—É–±–±–æ—Ç–∞', 
            'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }.get(weekday, '–î–µ–Ω—å')
        
        # –¢–µ–º–∞ –¥–Ω—è
        day_theme = {
            'monday': 'üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ',
            'tuesday': '‚ö° –≠–Ω–µ—Ä–≥–∏—è', 
            'wednesday': 'üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ',
            'thursday': 'üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'friday': 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'saturday': 'üõí –ü–æ–∫—É–ø–∫–∏',
            'sunday': 'üìà –†–∏—Ç—É–∞–ª—ã'
        }.get(weekday, 'üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        telegram = SecureTelegramManager()
        bot_info = telegram.test_connection()
        bot_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if bot_info.get('status') == 'success' else "‚ùå –û—à–∏–±–∫–∞"
        
        html = f'''
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>@ppsupershef - –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</title>
            <style>
                :root {{
                    --primary: #8B5CF6;
                    --secondary: #F59E0B;
                    --success: #10B981;
                    --danger: #EF4444;
                    --dark: #1F2937;
                    --light: #F9FAFB;
                }}
                
                * {{ margin: 0; padding: 0; box-sizing: border-box; }}
                
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    color: var(--dark);
                    line-height: 1.6;
                }}
                
                .container {{
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                }}
                
                .header {{
                    background: white;
                    border-radius: 20px;
                    padding: 40px 30px;
                    margin-bottom: 24px;
                    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                    text-align: center;
                }}
                
                .header h1 {{
                    font-size: 2.5rem;
                    margin-bottom: 16px;
                    color: var(--dark);
                }}
                
                .header p {{
                    font-size: 1.2rem;
                    color: #6B7280;
                    font-weight: 500;
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }}
                
                .stat-card {{
                    background: white;
                    padding: 30px 24px;
                    border-radius: 16px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                    text-align: center;
                    transition: transform 0.2s ease;
                }}
                
                .stat-card:hover {{
                    transform: translateY(-5px);
                }}
                
                .stat-icon {{
                    font-size: 3rem;
                    margin-bottom: 16px;
                }}
                
                .stat-card h3 {{
                    font-size: 1.3rem;
                    margin-bottom: 8px;
                    color: var(--dark);
                }}
                
                .stat-card p {{
                    color: #6B7280;
                    font-size: 1.1rem;
                }}
                
                .status-success {{
                    color: var(--success);
                    font-weight: bold;
                }}
                
                .status-error {{
                    color: var(--danger);
                    font-weight: bold;
                }}
                
                .actions-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 16px;
                    margin: 30px 0;
                }}
                
                .btn {{
                    background: var(--primary);
                    color: white;
                    border: none;
                    padding: 18px 24px;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 10px;
                    text-decoration: none;
                }}
                
                .btn:hover {{
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
                }}
                
                .btn-success {{ background: var(--success); }}
                .btn-warning {{ background: var(--secondary); }}
                .btn-danger {{ background: var(--danger); }}
                
                .content-preview {{
                    background: white;
                    border-radius: 16px;
                    padding: 30px;
                    margin: 30px 0;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                }}
                
                .content-preview h3 {{
                    margin-bottom: 20px;
                    color: var(--dark);
                    font-size: 1.4rem;
                }}
                
                .footer {{
                    text-align: center;
                    margin-top: 40px;
                    color: white;
                    opacity: 0.8;
                }}
                
                @media (max-width: 768px) {{
                    .container {{ padding: 15px; }}
                    .header {{ padding: 30px 20px; }}
                    .header h1 {{ font-size: 2rem; }}
                    .stat-card {{ padding: 20px 16px; }}
                    .btn {{ padding: 16px 20px; }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è</h1>
                    <p>–ü–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏</p>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">üìÖ</div>
                        <h3>{day_name_ru}</h3>
                        <p>–¢–µ–º–∞: {day_theme}</p>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">ü§ñ</div>
                        <h3>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</h3>
                        <p class="{'status-success' if bot_info.get('status') == 'success' else 'status-error'}">
                            {bot_status}
                        </p>
                        {f'<p><small>@{bot_info.get("bot_username", "")}</small></p>' if bot_info.get('bot_username') else ''}
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-icon">üìä</div>
                        <h3>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω</h3>
                        <p>45 –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é</p>
                    </div>
                </div>
                
                <div class="actions-grid">
                    <button class="btn" onclick="sendContent('breakfast')">
                        üç≥ –ó–∞–≤—Ç—Ä–∞–∫
                    </button>
                    <button class="btn btn-success" onclick="sendContent('shopping')">
                        üõí –ß–µ–∫-–ª–∏—Å—Ç
                    </button>
                    <button class="btn btn-warning" onclick="testConnection()">
                        üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    </button>
                    <button class="btn" onclick="sendContent('advice')">
                        üí° –°–æ–≤–µ—Ç—ã
                    </button>
                </div>
                
                <div class="content-preview">
                    <h3>üéØ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                    <button class="btn btn-success" onclick="sendPreview()">
                        üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
                    </button>
                </div>
                
                <div class="footer">
                    <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º @ppsupershef</p>
                    <p>üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ‚Ä¢ üí´ –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ ‚Ä¢ üß† –ù–µ–π—Ä–æ–Ω–∞—É–∫–∞</p>
                </div>
            </div>
            
            <script>
                async function testConnection() {{
                    try {{
                        const response = await fetch('/health');
                        const data = await response.json();
                        if (data.status === 'healthy') {{
                            alert('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!\\\\nü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\\\\nüìä –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã');
                        }} else {{
                            alert('‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π');
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
                    }}
                }}
                
                async function sendContent(type) {{
                    const endpoints = {{
                        'breakfast': '/send-breakfast',
                        'shopping': '/send-shopping-list', 
                        'advice': '/send-advice'
                    }};
                    
                    if (endpoints[type]) {{
                        try {{
                            const response = await fetch(endpoints[type]);
                            const data = await response.json();
                            if (data.status === 'success') {{
                                alert('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }}
                        }} catch (error) {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
                        }}
                    }}
                }}
                
                async function sendPreview() {{
                    try {{
                        const response = await fetch('/test-channel');
                        const data = await response.json();
                        if (data.status === 'success') {{
                            alert('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!\\\\nüì® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª @ppsupershef');
                        }} else {{
                            alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞');
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞');
                    }}
                }}
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                window.addEventListener('load', function() {{
                    console.log('‚úÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                }});
            </script>
        </body>
        </html>
        '''
        return html
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–û—à–∏–±–∫–∞ - –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    text-align: center;
                }
                .error-container {
                    background: rgba(255,255,255,0.1);
                    padding: 40px;
                    border-radius: 20px;
                    backdrop-filter: blur(10px);
                }
            </style>
        </head>
        <body>
            <div class="error-container">
                <h1>‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</p>
            </div>
        </body>
        </html>
        """

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        telegram = SecureTelegramManager()
        bot_info = telegram.test_connection()
        
        return jsonify({
            "status": "healthy" if bot_info.get('status') == 'success' else "degraded",
            "bot_status": bot_info.get('status'),
            "bot_username": bot_info.get('bot_username'),
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "message": "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if bot_info.get('status') == 'success' else "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "timestamp": datetime.now().strftime("%H:%M:%S")
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        telegram = SecureTelegramManager()
        current_times = TimeZoneConverter.get_current_times()
        
        test_message = f"""üé™ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø</b>

‚úÖ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef
ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—é
üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –ü–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏

üí´ <b>–†–ê–°–ü–ò–°–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê:</b>
‚Ä¢ üß† –ü–Ω: –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —É–º–∞
‚Ä¢ ‚ö° –í—Ç: –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π  
‚Ä¢ üõ°Ô∏è –°—Ä: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è
‚Ä¢ üçΩÔ∏è –ß—Ç: –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è —Å –ø–æ–ª—å–∑–æ–π
‚Ä¢ üìä –ü—Ç: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–ª–∞–Ω—ã
‚Ä¢ üõí –°–±: –£–º–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ üìà –í—Å: –†–∏—Ç—É–∞–ª—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

üïê <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {current_times['kemerovo_time']}

#—Ç–µ—Å—Ç #–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
        
        success = telegram.send_message(test_message)
        return jsonify({
            "status": "success" if success else "error", 
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-breakfast')
@rate_limit()
def send_breakfast():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
    try:
        telegram = SecureTelegramManager()
        content_gen = EfficientContentGenerator()
        
        current_time = datetime.now(config.KEMEROVO_TIMEZONE)
        weekday = current_time.strftime('%A').lower()
        
        content = content_gen.generate_daily_content(weekday)
        success = telegram.send_message(content)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "–ó–∞–≤—Ç—Ä–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-shopping-list')
@rate_limit()
def send_shopping_list():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
    try:
        telegram = SecureTelegramManager()
        content_gen = EfficientContentGenerator()
        
        content = content_gen.generate_shopping_list()
        success = telegram.send_message(content)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "–ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-advice')
@rate_limit()
def send_advice():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    try:
        telegram = SecureTelegramManager()
        content_gen = EfficientContentGenerator()
        
        content = content_gen.generate_expert_advice()
        success = telegram.send_message(content)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "–°–æ–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-manual-content', methods=['POST'])
@rate_limit()
def send_manual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        telegram = SecureTelegramManager()
        data = request.get_json()
        
        if not data or 'content' not in data:
            return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"})
            
        content = data['content']
        if not content.strip():
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        current_times = TimeZoneConverter.get_current_times()
        content_with_footer = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = telegram.send_message(content_with_footer)
        return jsonify({"status": "success" if success else "error"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.errorhandler(404)
def not_found(error):
    return jsonify({"status": "error", "message": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {str(error)}")
    return jsonify({"status": "error", "message": "Internal server error"}), 500

# üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    telegram = SecureTelegramManager()
    bot_test = telegram.test_connection()
    
    if bot_test.get('status') == 'success':
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_test.get('bot_username')} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º: {bot_test.get('message')}")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
