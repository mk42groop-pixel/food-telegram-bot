import os
import requests
import time
import random
from datetime import datetime, timedelta, timezone
from threading import Thread
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import json
import logging
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
app = Flask(__name__)

# –ö–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
YANDEX_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')

class YandexGPT:
    def __init__(self):
        self.api_key = YANDEX_API_KEY
        self.folder_id = YANDEX_FOLDER_ID
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.is_active = bool(self.api_key and self.folder_id)
        print(f"ü§ñ Yandex GPT: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
    def generate_text(self, prompt, temperature=0.7):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        if not self.is_active:
            return None
            
        headers = {
            'Authorization': f'Api-Key {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'modelUri': f'gpt://{self.folder_id}/yandexgpt-lite',
            'completionOptions': {
                'stream': False,
                'temperature': temperature,
                'maxTokens': 2000
            },
            'messages': [
                {
                    'role': 'user',
                    'text': prompt
                }
            ]
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data, timeout=30)
            if response.status_code == 200:
                result = response.json()
                return result['result']['alternatives'][0]['message']['text']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT API: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Yandex GPT: {e}")
            return None

class DeepSeekGPT:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.base_url = "https://api.deepseek.com/v1/chat/completions"
        self.is_active = bool(self.api_key)
        print(f"ü§ñ DeepSeek GPT: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
    def generate_content(self, prompt, content_type="recipe"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek"""
        if not self.is_active:
            return None
            
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        system_prompts = {
            "recipe": """–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.""",
            "science": """–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –û–±—ä—è—Å–Ω—è–π –Ω–∞—É—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.""",
            "advice": """–¢—ã –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —à–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä."""
        }
        
        data = {
            'model': 'deepseek-chat',
            'messages': [
                {
                    'role': 'system',
                    'content': system_prompts.get(content_type, system_prompts["recipe"])
                },
                {
                    'role': 'user', 
                    'content': prompt
                }
            ],
            'temperature': 0.7,
            'max_tokens': 2000
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data, timeout=30)
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å DeepSeek: {e}")
            return None

class AIContentGenerator:
    def __init__(self):
        self.yandex_gpt = YandexGPT()
        self.deepseek_gpt = DeepSeekGPT()
        print(f"ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: YandexGPT - {'‚úÖ' if self.yandex_gpt.is_active else '‚ùå'}, DeepSeek - {'‚úÖ' if self.deepseek_gpt.is_active else '‚ùå'}")
        
    def generate_content(self, prompt, content_type="recipe"):
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI"""
        # –ü—Ä–æ–±—É–µ–º DeepSeek
        if self.deepseek_gpt.is_active:
            content = self.deepseek_gpt.generate_content(prompt, content_type)
            if content:
                return content
        
        # –ü—Ä–æ–±—É–µ–º Yandex GPT
        if self.yandex_gpt.is_active:
            content = self.yandex_gpt.generate_text(prompt)
            if content:
                return content
        
        return None

class CommentManager:
    def __init__(self, ai_generator):
        self.ai_generator = ai_generator
        self.processed_comments = set()
        self.expert_roles = {
            "nutritionist": "üß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º",
            "chef": "üë®‚Äçüç≥ –®–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω", 
            "trainer": "üí™ –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        }
    
    def should_respond(self, comment_text, comment_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        if comment_id in self.processed_comments:
            return False
            
        if len(comment_text.strip()) < 10:
            return False
            
        trigger_words = [
            '–≤–æ–ø—Ä–æ—Å', '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '–∫–∞–∫', '–ø–æ—á–µ–º—É', 
            '—á—Ç–æ', '–º–æ–∂–Ω–æ –ª–∏', '—Å—Ç–æ–∏—Ç –ª–∏', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–º–æ–≥–∏',
            '—Ä–µ—Ü–µ–ø—Ç', '–ø–∏—Ç–∞–Ω–∏–µ', '–¥–∏–µ—Ç–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ø–æ—Ö—É–¥–µ–Ω–∏–µ'
        ]
        
        comment_lower = comment_text.lower()
        return any(word in comment_lower for word in trigger_words)
    
    def generate_ai_response(self, comment_text, username, expert_role="nutritionist"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        
        prompt = f"""
        –¢—ã {self.expert_roles[expert_role]}. –û—Ç–≤–µ—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –û–¢ {username}: "{comment_text}"

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
        - –û—Ç–≤–µ—Ç—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç
        - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
        - –ü–æ–¥–ø–∏—à–∏—Å—å –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç

        –§–æ—Ä–º–∞—Ç:
        [–û—Ç–≤–µ—Ç —Å —Å–æ–≤–µ—Ç–æ–º] [–≠–º–æ–¥–∑–∏]

        üíé [–ü–æ–¥–ø–∏—Å—å —ç–∫—Å–ø–µ—Ä—Ç–∞]
        """
        
        response = self.ai_generator.generate_content(prompt, "advice")
        if response:
            return response
        
        return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. üíé\n\n{self.expert_roles[expert_role]}"
    
    def determine_expert_role(self, comment_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç–∫—Å–ø–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å"""
        comment_lower = comment_text.lower()
        
        chef_keywords = ['—Ä–µ—Ü–µ–ø—Ç', '–≥–æ—Ç–æ–≤–∏—Ç—å', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '–±–ª—é–¥–æ', '–≤–∫—É—Å']
        if any(word in comment_lower for word in chef_keywords):
            return "chef"
        
        trainer_keywords = ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Å–ø–æ—Ä—Ç', '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', '—Ñ–∏—Ç–Ω–µ—Å', '–º—ã—à—Ü—ã']
        if any(word in comment_lower for word in trainer_keywords):
            return "trainer"
        
        return "nutritionist"
    
    def process_comment(self, comment_text, comment_id, username, message_id=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        if not self.should_respond(comment_text, comment_id):
            return None
            
        try:
            expert_role = self.determine_expert_role(comment_text)
            response = self.generate_ai_response(comment_text, username, expert_role)
            self.processed_comments.add(comment_id)
            
            print(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id}")
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return None

class TelegramWebhookManager:
    def __init__(self, token, comment_manager):
        self.token = token
        self.comment_manager = comment_manager
        self.webhook_url = None
    
    def setup_webhook(self, webhook_url):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram"""
        self.webhook_url = webhook_url
        url = f"https://api.telegram.org/bot{self.token}/setWebhook"
        payload = {
            'url': webhook_url,
            'drop_pending_updates': True
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def send_reply(self, chat_id, message_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'reply_to_message_id': message_id
        }
        
        try:
            response = requests.post(url, json=payload)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False

class EliteContentManager:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL
        self.timezone_offset = 7
        self.ai_generator = AIContentGenerator()
        self.comment_manager = CommentManager(self.ai_generator)
        self.webhook_manager = TelegramWebhookManager(self.token, self.comment_manager)
        self.content_strategy = self._initialize_content_strategy()
        self.last_sent_times = {}
        self.scheduler = None
        
    def get_kemerovo_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)"""
        utc_time = datetime.now(timezone.utc)
        kemerovo_time = utc_time + timedelta(hours=self.timezone_offset)
        return kemerovo_time
    
    def _initialize_content_strategy(self):
        """–≠–ª–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return {
            "weekly_themes": {
                0: "üß¨ –ù–ê–£–ß–ù–´–ô –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö: –ë–∏–æ—Ö–∏–º–∏—è –ø–∏—Ç–∞–Ω–∏—è",
                1: "üë®‚Äçüç≥ TECH CHECK: –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ–∞", 
                2: "üí¨ –°–†–ï–î–ê –û–¢–í–ï–¢–û–í: –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
                3: "üçΩÔ∏è –†–ï–¶–ï–ü–¢ –ù–ï–î–ï–õ–ò: –®–µ–¥–µ–≤—Ä –æ—Ç –ú–∏—à–ª–µ–Ω",
                4: "üìä –¢–†–ï–ù–î–û–í–ê–Ø –ü–Ø–¢–ù–ò–¶–ê: –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π",
                5: "‚ö° –ë–´–°–¢–†–û & –ó–î–û–†–û–í–û: –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                6: "üéØ –í–û–°–ö–†–ï–°–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢: –ò—Ç–æ–≥–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è"
            }
        }
    
    def generate_elite_content(self, content_type, weekday=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if weekday is None:
            weekday = self.get_kemerovo_time().weekday()
            
        theme = self.content_strategy["weekly_themes"][weekday]
        
        # –ü—Ä–æ–±—É–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        ai_content = self._try_ai_generation(content_type, weekday, theme)
        if ai_content:
            return ai_content
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        return self._get_static_content(content_type, weekday, theme)
    
    def _try_ai_generation(self, content_type, weekday, theme):
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        prompts = {
            'breakfast': f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏ –ö–ë–ñ–£.",
            'lunch': f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏ –ö–ë–ñ–£.",
            'dinner': f"–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ª–µ–≥–∫–æ–≥–æ —É–∂–∏–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏ –ö–ë–ñ–£.",
            'science': f"–û–±—ä—è—Å–Ω–∏ –Ω–∞—É—á–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Ç–µ–º—É: {theme}. –°–¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.",
            'expert_advice': f"–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –º–Ω–µ–Ω–∏–µ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞, —à–µ—Ñ–∞ –∏ —Ç—Ä–µ–Ω–µ—Ä–∞.",
            'interactive': f"–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É: {theme}. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
        }
        
        prompt = prompts.get(content_type)
        if not prompt:
            return None
            
        content = self.ai_generator.generate_content(prompt, content_type)
        if content:
            emoji = self._get_content_emoji(content_type)
            return f"{emoji} {content_type.upper()}\n\n{theme}\n\n{content}"
        
        return None
    
    def _get_content_emoji(self, content_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        emojis = {
            'breakfast': 'üåÖ',
            'lunch': 'üçΩÔ∏è', 
            'dinner': 'üåô',
            'science': 'üß¨',
            'visual': 'üé®',
            'interactive': 'üí¨',
            'expert_advice': 'üåü'
        }
        return emojis.get(content_type, 'üìù')
    
    def _get_static_content(self, content_type, weekday, theme):
        """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ fallback"""
        static_content = {
            'breakfast': [
                "üåÖ –ó–ê–í–¢–†–ê–ö: –û–≤—Å—è–Ω–∫–∞ —Å —Å—É–ø–µ—Ä—Ñ—É–¥–∞–º–∏\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ –º–∏–Ω–¥–∞–ª—å–Ω–æ–µ - 200–º–ª\n‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.\n‚Ä¢ –Ø–≥–æ–¥—ã –≥–æ–¥–∂–∏ - 1 —Å—Ç.–ª.\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –í–∞—Ä–∏—Ç—å –æ–≤—Å—è–Ω–∫—É 5 –º–∏–Ω—É—Ç\n2. –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä—Ñ—É–¥—ã\n\nüìä –ö–ë–ñ–£: 280 –∫–∫–∞–ª",
                "üåÖ –ó–ê–í–¢–†–ê–ö: –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º-–ø–∞—à–æ—Ç\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - 2 –ª–æ–º—Ç–∏–∫–∞\n‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç\n‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –ü–æ–¥–∂–∞—Ä–∏—Ç—å —Ö–ª–µ–±\n2. –†–∞–∑–º—è—Ç—å –∞–≤–æ–∫–∞–¥–æ\n3. –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —è–π—Ü–∞-–ø–∞—à–æ—Ç\n\nüìä –ö–ë–ñ–£: 320 –∫–∫–∞–ª"
            ],
            'lunch': [
                "üçΩÔ∏è –û–ë–ï–î: –ö–∏–Ω–æ–∞ —Å –æ–≤–æ—â–∞–º–∏\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –ö–∏–Ω–æ–∞ - 100–≥\n‚Ä¢ –û–≤–æ—â–∏ –≥—Ä–∏–ª—å - 200–≥\n‚Ä¢ –ù—É—Ç - 100–≥\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –û—Ç–≤–∞—Ä–∏—Ç—å –∫–∏–Ω–æ–∞\n2. –û–±–∂–∞—Ä–∏—Ç—å –æ–≤–æ—â–∏\n3. –°–º–µ—à–∞—Ç—å —Å –Ω—É—Ç–æ–º\n\nüìä –ö–ë–ñ–£: 350 –∫–∫–∞–ª"
            ],
            'dinner': [
                "üåô –£–ñ–ò–ù: –†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –ú–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å - 200–≥\n‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏ - 150–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n1. –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –ø–∞—Ä—É 15 –º–∏–Ω\n2. –ü–æ–¥–∞—Ç—å —Å –æ–≤–æ—â–∞–º–∏\n\nüìä –ö–ë–ñ–£: 250 –∫–∫–∞–ª"
            ],
            'science': [
                "üß¨ –ù–ê–£–ö–ê: –¶–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã\n\nüìö –§–∞–∫—Ç: –ü—Ä–∏–µ–º –ø–∏—â–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º\n\nüí° –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–≤—Ç—Ä–∞–∫–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"
            ],
            'interactive': [
                "üí¨ –ò–ù–¢–ï–†–ê–ö–¢–ò–í: –í–∞—à –æ–ø—ã—Ç\n\n‚ùì –ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é?\n\nüëá –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!\n\n‚ù§Ô∏è - –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞—Ä–∞–Ω–µ–µ\nüî• - –ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä—É—é\nüìö - –°–ª–µ–∂—É –∑–∞ –ö–ë–ñ–£"
            ],
            'expert_advice': [
                "üåü –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–û–í\n\nüß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: '–ü–µ–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã'\nüë®‚Äçüç≥ –®–µ—Ñ: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Ç—Ä–∞–≤—ã'\nüí™ –¢—Ä–µ–Ω–µ—Ä: '–°–æ—á–µ—Ç–∞–π—Ç–µ –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ'"
            ]
        }
        
        content_list = static_content.get(content_type, ["üìù –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"])
        content = content_list[weekday % len(content_list)]
        emoji = self._get_content_emoji(content_type)
        
        return f"{emoji} {content_type.upper()}\n\n{theme}\n\n{content}"
    
    def _get_elite_call_to_action(self):
        """–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"""
        return """

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üíé **–ü–û–î–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!** üëâ @ppsupershef

üí¨ **–û–ë–°–£–ñ–î–ê–ï–ú –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–•!**

üëá **–†–ï–ê–ö–¶–ò–ò:**
‚ù§Ô∏è - –í–∫—É—Å–Ω–æ | üî• - –ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é | üìö - –ü–æ–ª–µ–∑–Ω–æ

üì§ **–ü–û–î–ï–õ–ò–¢–ï–°–¨** —Å –¥—Ä—É–∑—å—è–º–∏!

üè∑Ô∏è #ppsupershef #–ó–¥–æ—Ä–æ–≤–æ–µ–ü–∏—Ç–∞–Ω–∏–µ
"""

    def run_elite_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        if self.scheduler and self.scheduler.running:
            self.scheduler.shutdown()
            
        self.scheduler = BackgroundScheduler()
        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–µ–º–µ—Ä–æ–≤–æ (Asia/Novokuznetsk –∏–ª–∏ Asia/Krasnoyarsk)
        self.scheduler.configure(timezone='Asia/Novokuznetsk')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        self.scheduler.add_job(
            lambda: self.publish_content('breakfast'),
            trigger=CronTrigger(hour=7, minute=0),
            id='breakfast',
            replace_existing=True
        )
        self.scheduler.add_job(
            lambda: self.publish_content('lunch'),
            trigger=CronTrigger(hour=12, minute=0),
            id='lunch',
            replace_existing=True
        )
        self.scheduler.add_job(
            lambda: self.publish_content('science'),
            trigger=CronTrigger(hour=15, minute=0),
            id='science',
            replace_existing=True
        )
        self.scheduler.add_job(
            lambda: self.publish_content('interactive'),
            trigger=CronTrigger(hour=18, minute=0),
            id='interactive',
            replace_existing=True
        )
        self.scheduler.add_job(
            lambda: self.publish_content('dinner'),
            trigger=CronTrigger(hour=19, minute=0),
            id='dinner',
            replace_existing=True
        )
        self.scheduler.add_job(
            lambda: self.publish_content('expert_advice'),
            trigger=CronTrigger(hour=21, minute=0),
            id='expert_advice',
            replace_existing=True
        )
        
        self.scheduler.start()
        
        kemerovo_time = self.get_kemerovo_time()
        print(f"üéØ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û!")
        print(f"üìç –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time.strftime('%d.%m.%Y %H:%M')}")
        print("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("ü•û 07:00 - –ó–∞–≤—Ç—Ä–∞–∫")
        print("üçΩÔ∏è 12:00 - –û–±–µ–¥") 
        print("üß¨ 15:00 - –ù–∞—É–∫–∞")
        print("üí¨ 18:00 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤")
        print("üçΩÔ∏è 19:00 - –£–∂–∏–Ω")
        print("üåü 21:00 - –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
        print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...")
        self.publish_content('breakfast')
        
        return self.scheduler
    
    def publish_content(self, content_type):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            kemerovo_time = self.get_kemerovo_time()
            
            last_sent = self.last_sent_times.get(content_type)
            if last_sent and (kemerovo_time - last_sent).total_seconds() < 300:
                print(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {content_type} - —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ")
                return
                
            print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {content_type}... ({kemerovo_time.strftime('%H:%M')})")
            
            message = self.generate_elite_content(content_type)
            if not message:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {content_type}")
                return
                
            message += self._get_elite_call_to_action()
            
            success = self.send_to_telegram(message)
            
            if success:
                print(f"‚úÖ {content_type.upper()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                self.last_sent_times[content_type] = kemerovo_time
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {content_type}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_content: {e}")
    
    def send_to_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token or not self.channel:
            print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª")
            return False
            
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.channel,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload, timeout=30)
            if response.status_code == 200:
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
elite_channel = EliteContentManager()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
scheduler = elite_channel.run_elite_scheduler()

@app.route('/')
def home():
    try:
        kemerovo_time = elite_channel.get_kemerovo_time()
        weekday = kemerovo_time.weekday()
        theme = elite_channel.content_strategy["weekly_themes"][weekday]
        
        now = kemerovo_time
        schedule_status = {
            'breakfast': "‚úÖ" if now.hour >= 7 else "‚è∞",
            'lunch': "‚úÖ" if now.hour >= 12 else "‚è∞", 
            'science': "‚úÖ" if now.hour >= 15 else "‚è∞",
            'interactive': "‚úÖ" if now.hour >= 18 else "‚è∞",
            'dinner': "‚úÖ" if now.hour >= 19 else "‚è∞",
            'expert_advice': "‚úÖ" if now.hour >= 21 else "‚è∞"
        }
        
        webhook_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if elite_channel.webhook_manager.webhook_url else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_jobs = []
        if elite_channel.scheduler:
            for job in elite_channel.scheduler.get_jobs():
                next_run = job.next_run_time.astimezone(pytz.timezone('Asia/Novokuznetsk')) if job.next_run_time else "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
                scheduler_jobs.append(f"{job.id}: {next_run}")
        
        return f"""
        <html>
            <head>
                <title>@ppsupershef - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f0f2f5; }}
                    .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }}
                    .status {{ padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid; }}
                    .success {{ background: #e8f5e8; border-color: #4CAF50; }}
                    .warning {{ background: #fff3cd; border-color: #ffc107; }}
                    .schedule {{ background: #e9ecef; padding: 15px; border-radius: 8px; margin: 15px 0; }}
                    .schedule-item {{ display: flex; align-items: center; margin: 8px 0; }}
                    .time {{ font-weight: bold; width: 80px; }}
                    .emoji {{ font-size: 20px; margin-right: 10px; }}
                    .btn {{ display: inline-block; padding: 10px 15px; margin: 5px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }}
                    .jobs {{ background: #f8f9fa; padding: 10px; border-radius: 5px; margin: 10px 0; font-family: monospace; font-size: 12px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üç≥ @ppsupershef - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
                    
                    <div class="status success">
                        <strong>üìç –ö–µ–º–µ—Ä–æ–≤–æ:</strong> {kemerovo_time.strftime('%d.%m.%Y %H:%M')} | 
                        <strong>üéØ –¢–µ–º–∞:</strong> {theme} |
                        <strong>üì± –ö–∞–Ω–∞–ª:</strong> @ppsupershef
                    </div>
                    
                    <div class="status {'success' if elite_channel.ai_generator.yandex_gpt.is_active or elite_channel.ai_generator.deepseek_gpt.is_active else 'warning'}">
                        <strong>ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è:</strong> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if elite_channel.ai_generator.yandex_gpt.is_active or elite_channel.ai_generator.deepseek_gpt.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
                    </div>
                    
                    <div class="status {'success' if elite_channel.webhook_manager.webhook_url else 'warning'}">
                        <strong>ü§ñ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</strong> {webhook_status}
                    </div>
                    
                    <div class="schedule">
                        <h3>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</h3>
                        <div class="schedule-item"><span class="emoji">ü•û</span><span class="time">07:00</span> –ó–∞–≤—Ç—Ä–∞–∫ {schedule_status['breakfast']}</div>
                        <div class="schedule-item"><span class="emoji">üçΩÔ∏è</span><span class="time">12:00</span> –û–±–µ–¥ {schedule_status['lunch']}</div>
                        <div class="schedule-item"><span class="emoji">üß¨</span><span class="time">15:00</span> –ù–∞—É–∫–∞ {schedule_status['science']}</div>
                        <div class="schedule-item"><span class="emoji">üí¨</span><span class="time">18:00</span> –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ {schedule_status['interactive']}</div>
                        <div class="schedule-item"><span class="emoji">üçΩÔ∏è</span><span class="time">19:00</span> –£–∂–∏–Ω {schedule_status['dinner']}</div>
                        <div class="schedule-item"><span class="emoji">üåü</span><span class="time">21:00</span> –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ {schedule_status['expert_advice']}</div>
                    </div>
                    
                    <div class="jobs">
                        <strong>üìã –ó–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</strong><br>
                        {('<br>'.join(scheduler_jobs)) if scheduler_jobs else '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}
                    </div>
                    
                    <div>
                        <a href="/test" class="btn">üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã</a>
                        <a href="/setup-webhook" class="btn">üîó –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Webhook</a>
                        <a href="/restart-scheduler" class="btn">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</a>
                        <a href="/debug" class="btn">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</a>
                    </div>
                </div>
            </body>
        </html>
        """
    except Exception as e:
        return f"<h1>‚ùå –û—à–∏–±–∫–∞: {e}</h1>"

@app.route('/webhook/telegram', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json()
        
        if 'message' in data:
            message = data['message']
            chat_id = message.get('chat', {}).get('id')
            message_id = message.get('message_id')
            text = message.get('text', '')
            username = message.get('from', {}).get('username', '–ê–Ω–æ–Ω–∏–º')
            
            if (message.get('from', {}).get('is_bot', False) or 
                not text.strip() or
                text.startswith('/')):
                return 'ok'
            
            response_text = elite_channel.comment_manager.process_comment(
                text, message_id, username, message_id
            )
            
            if response_text:
                success = elite_channel.webhook_manager.send_reply(
                    chat_id, message_id, response_text
                )
                if success:
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message_id}")
        
        return 'ok'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return 'error', 500

@app.route('/setup-webhook')
def setup_webhook():
    webhook_url = f"https://{request.host}/webhook/telegram"
    success = elite_channel.webhook_manager.setup_webhook(webhook_url)
    
    if success:
        return f"<h2>‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</h2><p>URL: {webhook_url}</p><a href='/'>‚Üê –ù–∞–∑–∞–¥</a>"
    else:
        return f"<h2>‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook</h2><a href='/'>‚Üê –ù–∞–∑–∞–¥</a>"

@app.route('/restart-scheduler')
def restart_scheduler():
    try:
        global scheduler
        if elite_channel.scheduler:
            elite_channel.scheduler.shutdown()
        
        scheduler = elite_channel.run_elite_scheduler()
        return "<h2>‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</h2><a href='/'>‚Üê –ù–∞–∑–∞–¥</a>"
    except Exception as e:
        return f"<h2>‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}</h2><a href='/'>‚Üê –ù–∞–∑–∞–¥</a>"

@app.route('/test')
def test():
    test_message = "üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´\n\n–°–∏—Å—Ç–µ–º–∞ @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ\n–í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: " + elite_channel.get_kemerovo_time().strftime('%d.%m.%Y %H:%M') + "\n\nü§ñ AI —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!"
    success = elite_channel.send_to_telegram(test_message)
    return f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}<br><a href='/'>‚Üê –ù–∞–∑–∞–¥</a>"

@app.route('/debug')
def debug():
    kemerovo_time = elite_channel.get_kemerovo_time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
    telegram_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    try:
        response = requests.get(f"https://api.telegram.org/bot{elite_channel.token}/getMe", timeout=10)
        if response.status_code != 200:
            telegram_status = f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}"
    except Exception as e:
        telegram_status = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    return jsonify({
        "system": "@ppsupershef",
        "status": "active",
        "kemerovo_time": kemerovo_time.strftime('%Y-%m-%d %H:%M:%S'),
        "telegram_api": telegram_status,
        "ai_services": {
            "yandex_gpt": elite_channel.ai_generator.yandex_gpt.is_active,
            "deepseek": elite_channel.ai_generator.deepseek_gpt.is_active
        },
        "scheduler": {
            "running": elite_channel.scheduler.running if elite_channel.scheduler else False,
            "jobs": len(elite_channel.scheduler.get_jobs()) if elite_channel.scheduler else 0
        },
        "last_sent": {k: v.strftime('%H:%M') for k, v in elite_channel.last_sent_times.items()}
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    webhook_url = f"https://food-telegram-bot.onrender.com/webhook/telegram"
    elite_channel.webhook_manager.setup_webhook(webhook_url)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã @ppsupershef –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {elite_channel.get_kemerovo_time().strftime('%d.%m.%Y %H:%M')}")
    print(f"ü§ñ AI —Å–µ—Ä–≤–∏—Å—ã: YandexGPT - {'‚úÖ' if elite_channel.ai_generator.yandex_gpt.is_active else '‚ùå'}, DeepSeek - {'‚úÖ' if elite_channel.ai_generator.deepseek_gpt.is_active else '‚ùå'}")
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if scheduler.running else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}")
    
    app.run(host='0.0.0.0', port=port, debug=False)

