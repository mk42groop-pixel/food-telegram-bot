import os
import logging
import requests
import json
import time
import schedule
import hashlib
import re
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps
import sqlite3
from contextlib import contextmanager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    API_SECRET = os.getenv('API_SECRET', 'your-secret-key-here')
    MAX_REQUESTS_PER_MINUTE = 30
    RATE_LIMIT_WINDOW = 60
    
    # –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏
    SERVER_TZ = pytz.timezone('UTC')
    KEMEROVO_TZ = pytz.timezone('Asia/Novokuznetsk')
    
    # Render –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    RENDER_APP_URL = os.getenv('RENDER_APP_URL', '')  # –î–æ–±–∞–≤—å—Ç–µ –≤ .env –≤–∞—à URL

# –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ò–°–ê
class ServiceMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.request_count = 0
        self.last_keep_alive = None
        self.keep_alive_count = 0
    
    def increment_request(self):
        self.request_count += 1
    
    def update_keep_alive(self):
        self.last_keep_alive = datetime.now()
        self.keep_alive_count += 1
    
    def get_status(self):
        return {
            "status": "healthy",
            "uptime_seconds": (datetime.now() - self.start_time).total_seconds(),
            "requests_handled": self.request_count,
            "keep_alive_count": self.keep_alive_count,
            "last_keep_alive": self.last_keep_alive.isoformat() if self.last_keep_alive else "Never",
            "timestamp": datetime.now().isoformat()
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
service_monitor = ServiceMonitor()

# –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
class Database:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self.get_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS content_cache (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_hash TEXT UNIQUE,
                    content_type TEXT,
                    content_text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.execute('''
                CREATE TABLE IF NOT EXISTS channel_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    member_count INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        conn = sqlite3.connect('channel.db', check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
            conn.commit()
        except Exception:
            conn.rollback()
            raise
        finally:
            conn.close()

# –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
class SecurityManager:
    _instance = None
    _lock = Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(SecurityManager, cls).__new__(cls)
                cls._instance.request_log = {}
                cls._instance.blocked_ips = set()
            return cls._instance
    
    def check_rate_limit(self, ip_address):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        if ip_address in self.blocked_ips:
            return False
        
        if ip_address not in self.request_log:
            self.request_log[ip_address] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.request_log[ip_address] = [
            req_time for req_time in self.request_log[ip_address]
            if current_time - req_time < Config.RATE_LIMIT_WINDOW
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.request_log[ip_address]) >= Config.MAX_REQUESTS_PER_MINUTE:
            self.blocked_ips.add(ip_address)
            logger.warning(f"üö® IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: {ip_address}")
            return False
        
        self.request_log[ip_address].append(current_time)
        return True

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
def require_api_key(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key') or request.args.get('api_key')
        if not api_key or api_key != Config.API_SECRET:
            return jsonify({"status": "error", "message": "Invalid API key"}), 401
        return f(*args, **kwargs)
    return decorated_function

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting
def rate_limit(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        service_monitor.increment_request()
        ip_address = request.remote_addr
        security_manager = SecurityManager()
        
        if not security_manager.check_rate_limit(ip_address):
            return jsonify({
                "status": "error", 
                "message": "Rate limit exceeded. Try again later."
            }), 429
        
        return f(*args, **kwargs)
    return decorated_function

# –°–ò–°–¢–ï–ú–ê –í–†–ï–ú–ï–ù–ò –° –ö–û–ù–í–ï–†–¢–ê–¶–ò–ï–ô
class TimeManager:
    @staticmethod
    def kemerovo_to_server(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(Config.KEMEROVO_TZ).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TZ.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TZ)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str

    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö –ø–æ—è—Å–∞—Ö"""
        server_now = datetime.now(Config.SERVER_TZ)
        kemerovo_now = datetime.now(Config.KEMEROVO_TZ)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_date': server_now.strftime('%Y-%m-%d'),
            'kemerovo_date': kemerovo_now.strftime('%Y-%m-%d')
        }

    @staticmethod
    def get_kemerovo_weekday():
        """–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –ö–µ–º–µ—Ä–æ–≤–æ (0-6, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0)"""
        return datetime.now(Config.KEMEROVO_TZ).weekday()

# –ú–ï–ù–ï–î–ñ–ï–† –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê –° –§–û–¢–û
class VisualContentManager:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ"""
    
    # –ë–∞–Ω–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –±–ª—é–¥
    FOOD_PHOTOS = {
        # üç≥ –ó–ê–í–¢–†–ê–ö–ò
        'breakfast': [
            'https://images.unsplash.com/photo-1551782450-17144efb9c50?w=600',
            'https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=600',
            'https://images.unsplash.com/photo-1570197788417-0e82375c9371?w=600',
        ],
        # üç≤ –û–ë–ï–î–´
        'lunch': [
            'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=600',
            'https://images.unsplash.com/photo-1606755962773-d324e74532a7?w=600',
            'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=600',
        ],
        # üåô –£–ñ–ò–ù–´
        'dinner': [
            'https://images.unsplash.com/photo-1563379926898-05f4575a45d8?w=600',
            'https://images.unsplash.com/photo-1598214886806-c87b84b707f5?w=600',
            'https://images.unsplash.com/photo-1555939592-8a1039b86bc4?w=600',
        ],
        # üç∞ –î–ï–°–ï–†–¢–´
        'dessert': [
            'https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?w=600',
            'https://images.unsplash.com/photo-1571115764595-644a1f56a55c?w=600',
            'https://images.unsplash.com/photo-1565958011703-44f9829ba187?w=600',
        ],
        # üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–ï–ú–ï–ô–ù–´–ï –ë–õ–Æ–î–ê
        'family': [
            'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=600',
            'https://images.unsplash.com/photo-1546833999-b9f581a1996d?w=600',
        ]
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    EMOJI_CATEGORIES = {
        'breakfast': ['üç≥', 'ü•û', 'üç≤', 'ü•£', '‚òï', 'ü•ê', 'üçì', 'ü•ë'],
        'lunch': ['üçù', 'üçõ', 'ü•ò', 'üçú', 'üç±', 'ü•ó', 'üåØ', 'ü•™'],
        'dinner': ['üåô', 'üçΩÔ∏è', 'ü•ò', 'üç¥', '‚ú®', 'üç∑', 'üïØÔ∏è', 'üåü'],
        'dessert': ['üç∞', 'üéÇ', 'üçÆ', 'üç®', 'üßÅ', 'üç´', 'üç©', 'ü•Æ'],
        'family': ['üë®‚Äçüë©‚Äçüëß‚Äçüë¶', '‚ù§Ô∏è', 'üè†', 'üíï', '‚ú®', 'üéâ', 'ü§ó', 'üíù'],
    }
    
    def get_photo_for_recipe(self, recipe_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ—Ü–µ–ø—Ç–∞"""
        photo_category = self._map_recipe_to_photo(recipe_type)
        photos = self.FOOD_PHOTOS.get(photo_category, self.FOOD_PHOTOS['breakfast'])
        return random.choice(photos)
    
    def _map_recipe_to_photo(self, recipe_type):
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ñ–æ—Ç–æ"""
        mapping = {
            'neuro_breakfast': 'breakfast',
            'energy_breakfast': 'breakfast',
            'longevity_breakfast': 'breakfast',
            'creative_breakfast': 'breakfast',
            'analytical_breakfast': 'breakfast',
            'family_breakfast': 'family',
            'sunday_breakfast': 'breakfast',
            
            'focus_lunch': 'lunch',
            'protein_lunch': 'lunch',
            'antiage_lunch': 'lunch',
            'gourmet_lunch': 'lunch',
            'results_lunch': 'lunch',
            'family_lunch': 'family',
            'sunday_lunch': 'lunch',
            
            'brain_dinner': 'dinner',
            'energy_dinner': 'dinner',
            'cellular_dinner': 'dinner',
            'gourmet_dinner': 'dinner',
            'weekend_prep_dinner': 'dinner',
            'family_dinner': 'family',
            'week_prep_dinner': 'dinner',
            
            'friday_dessert': 'dessert',
            'saturday_dessert': 'dessert'
        }
        return mapping.get(recipe_type, 'breakfast')
    
    def generate_attractive_post(self, title, content, recipe_type, benefits):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        photo_url = self.get_photo_for_recipe(recipe_type)
        main_emoji = random.choice(self.EMOJI_CATEGORIES.get('breakfast', ['üçΩÔ∏è']))
        family_emoji = random.choice(self.EMOJI_CATEGORIES['family'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —ç–º–æ–¥–∑–∏
        formatted_content = self._format_with_emoji(content)
        
        post = f"""üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –°–ï–ú–¨–ò</b>

{main_emoji} <b>{title}</b> {family_emoji}

<a href="{photo_url}">üñºÔ∏è –§–û–¢–û –ë–õ–Æ–î–ê</a>

{formatted_content}

üí° <b>–ü–û–õ–¨–ó–ê –î–õ–Ø –°–ï–ú–¨–ò:</b>
{benefits}

‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ãÖ‚àô‚àò ‚òÖ ‚àò‚àô‚ãÖ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ

üí´ <b>–ü–∏—Ç–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏ —É–∫—Ä–µ–ø–ª—è–µ—Ç —Å–µ–º—å—é!</b>

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã!</b> ‚Üí @ppsupershef_chat

üòã –í–∫—É—Å–Ω–æ | üí™ –ü–æ–ª–µ–∑–Ω–æ | üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º—å–∏ | ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ | üí∞ –î–æ—Å—Ç—É–ø–Ω–æ

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""
        
        return post
    
    def _format_with_emoji(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏"""
        lines = text.split('\n')
        formatted = ""
        for line in lines:
            if line.strip() and any(keyword in line.lower() for keyword in ['‚Ä¢', '-', '1.', '2.', '3.']):
                emoji = random.choice(['ü•¨', 'ü•ï', 'ü•ö', 'üçó', 'üêü', 'üßÄ', 'üåΩ', 'üçÖ'])
                formatted += f"{emoji} {line}\n"
            else:
                formatted += f"{line}\n"
        return formatted

# –¢–ï–õ–ï–ì–†–ê–ú –ú–ï–ù–ï–î–ñ–ï–†
class TelegramManager:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.sent_hashes = set()
    
    def send_message(self, text, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            content_hash = hashlib.md5(text.encode()).hexdigest()
            if content_hash in self.sent_hashes:
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return False
            
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': False
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                self.sent_hashes.add(content_hash)
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
    
    def get_member_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {'chat_id': self.channel}
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            return result.get('result', 0) if result.get('ok') else 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0

# –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ù–¢–ï–ù–¢–ê
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.visual_manager = VisualContentManager()
        self.db = Database()
    
    def generate_with_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1500
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': """–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ–º–µ–π. 
–°–æ–∑–¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç—ã–µ, –≤–∫—É—Å–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None
    
    def generate_family_breakfast(self):
        """–°—É–±–±–æ—Ç–Ω–∏–π —Å–µ–º–µ–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —Å—É–±–±–æ—Ç–Ω–µ–≥–æ —Å–µ–º–µ–π–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫."""
        
        content = self.generate_with_gpt(prompt)
        if not content:
            content = """
ü•û –¢–≤–æ—Ä–æ–∂–Ω—ã–µ –æ–ª–∞–¥—å–∏ —Å —è–±–ª–æ–∫–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 500 –≥
‚Ä¢ –Ø–π—Ü–∞ - 3 —à—Ç  
‚Ä¢ –ú—É–∫–∞ - 200 –≥
‚Ä¢ –Ø–±–ª–æ–∫–∏ - 2 —à—Ç
‚Ä¢ –°–∞—Ö–∞—Ä - 2 —Å—Ç.–ª.
‚Ä¢ –°–æ–¥–∞ - ¬Ω —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–º–µ—à–∞–π—Ç–µ —Ç–≤–æ—Ä–æ–≥ —Å —è–π—Ü–∞–º–∏ –∏ —Å–∞—Ö–∞—Ä–æ–º
2. –î–æ–±–∞–≤—å—Ç–µ –º—É–∫—É —Å —Å–æ–¥–æ–π, –ø–µ—Ä–µ–º–µ—à–∞–π—Ç–µ
3. –Ø–±–ª–æ–∫–∏ –Ω–∞—Ç—Ä–∏—Ç–µ –Ω–∞ —Ç–µ—Ä–∫–µ, –¥–æ–±–∞–≤—å—Ç–µ –≤ —Ç–µ—Å—Ç–æ
4. –ñ–∞—Ä—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 2-3 –º–∏–Ω—É—Ç—ã —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
"""
        
        benefits = """‚Ä¢ üßí –î–ª—è –¥–µ—Ç–µ–π: –∫–∞–ª—å—Ü–∏–π –¥–ª—è —Ä–æ—Å—Ç–∞ –∫–æ—Å—Ç–µ–π
‚Ä¢ üë®‚Äçü¶≥ –î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö: –±–µ–ª–æ–∫ –¥–ª—è –º—ã—à—Ü  
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: –≤—Å–µ–≥–æ ~150 —Ä—É–±–ª–µ–π
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ: 20 –º–∏–Ω—É—Ç
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–µ—Å–µ–ª–æ: –≥–æ—Ç–æ–≤—å—Ç–µ –≤–º–µ—Å—Ç–µ!"""
        
        return self.visual_manager.generate_attractive_post(
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–£–ë–ë–û–¢–ù–ò–ô –°–ï–ú–ï–ô–ù–´–ô –ó–ê–í–¢–†–ê–ö",
            content,
            "family_breakfast",
            benefits
        )
    
    def generate_friday_dessert(self):
        """–ü—è—Ç–Ω–∏—á–Ω—ã–π –¥–µ—Å–µ—Ä—Ç"""
        content = """
üçå –ë–∞–Ω–∞–Ω–æ–≤—ã–µ –º–∞—Ñ—Ñ–∏–Ω—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ë–∞–Ω–∞–Ω—ã - 3 —à—Ç
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è - 150 –≥  
‚Ä¢ –ö–µ—Ñ–∏—Ä - 100 –º–ª
‚Ä¢ –†–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å - 1 —á.–ª.
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –†–∞–∑–æ–º–Ω–∏—Ç–µ –±–∞–Ω–∞–Ω—ã –≤–∏–ª–∫–æ–π –≤ –ø—é—Ä–µ
2. –î–æ–±–∞–≤—å—Ç–µ —è–π—Ü–∞ –∏ –∫–µ—Ñ–∏—Ä, –ø–µ—Ä–µ–º–µ—à–∞–π—Ç–µ
3. –í—Å—ã–ø—å—Ç–µ –º—É–∫—É —Å —Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª–µ–º –∏ –∫–æ—Ä–∏—Ü–µ–π
4. –†–∞–∑–ª–µ–π—Ç–µ –ø–æ —Ñ–æ—Ä–º–æ—á–∫–∞–º, –≤—ã–ø–µ–∫–∞–π—Ç–µ 15 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C
"""
        
        benefits = """‚Ä¢ üçå –ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—å –∏–∑ –±–∞–Ω–∞–Ω–æ–≤
‚Ä¢ üåæ –¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è –º—É–∫–∞ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞
‚Ä¢ ‚ùå –ë–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~120 —Ä—É–±–ª–µ–π
‚Ä¢ üë∂ –î–µ—Ç–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!"""
        
        return self.visual_manager.generate_attractive_post(
            "üç∞ –ü–Ø–¢–ù–ò–ß–ù–´–ô –°–ï–ú–ï–ô–ù–´–ô –î–ï–°–ï–†–¢",
            content,
            "friday_dessert",
            benefits
        )
    
    def generate_sunday_breakfast(self):
        """–í–æ—Å–∫—Ä–µ—Å–Ω—ã–π —É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫"""
        content = """
‚òÄÔ∏è –¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –∏–∑—é–º–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 500 –≥
‚Ä¢ –Ø–π—Ü–∞ - 3 —à—Ç
‚Ä¢ –ú–∞–Ω–∫–∞ - 3 —Å—Ç.–ª.
‚Ä¢ –ò–∑—é–º - 100 –≥
‚Ä¢ –°–º–µ—Ç–∞–Ω–∞ - 2 —Å—Ç.–ª.
‚Ä¢ –í–∞–Ω–∏–ª–∏–Ω - –ø–æ –≤–∫—É—Å—É

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –¢–≤–æ—Ä–æ–≥ —Å–º–µ—à–∞–π—Ç–µ —Å —è–π—Ü–∞–º–∏ –∏ –º–∞–Ω–∫–æ–π
2. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–º—ã—Ç—ã–π –∏–∑—é–º –∏ –≤–∞–Ω–∏–ª–∏–Ω
3. –í—ã–ª–æ–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º—É, —Å–º–∞–∂—å—Ç–µ —Å–º–µ—Ç–∞–Ω–æ–π
4. –í—ã–ø–µ–∫–∞–π—Ç–µ 20 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C
"""
        
        benefits = """‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ - –∫–∞–ª—å—Ü–∏–π –¥–ª—è –∫–æ—Å—Ç–µ–π
‚Ä¢ üçá –ò–∑—é–º - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—å  
‚Ä¢ ‚è±Ô∏è –ú–æ–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ—Å–ø–µ—à–∞
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ —É—Ç—Ä–∞
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç: ~200 —Ä—É–±–ª–µ–π"""
        
        return self.visual_manager.generate_attractive_post(
            "‚òÄÔ∏è –í–û–°–ö–†–ï–°–ù–´–ô –£–¢–†–ï–ù–ù–ò–ô –ó–ê–í–¢–†–ê–ö",
            content,
            "sunday_breakfast",
            benefits
        )
    
    def generate_neuro_breakfast(self):
        """–ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞"""
        content = """
üß† –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –Ø–π—Ü–∞ - 4 —à—Ç
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 1 —à—Ç  
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥
‚Ä¢ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–æ–º—Ç–∏–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏
"""
        
        benefits = """‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ ü•ö –Ø–π—Ü–∞ - —Ö–æ–ª–∏–Ω –¥–ª—è –ø–∞–º—è—Ç–∏
‚Ä¢ üß† –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3
‚Ä¢ ‚ö° –≠–Ω–µ—Ä–≥–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
‚Ä¢ üí° –Ø—Å–Ω–æ—Å—Ç—å —É–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê",
            content,
            "neuro_breakfast",
            benefits
        )

# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ö–û–ù–¢–ï–ù–¢–ê
class ContentScheduler:
    def __init__(self):
        self.kemerovo_schedule = {
            0: {
                "08:00": {"name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫", "type": "neuro_breakfast", "method": "generate_neuro_breakfast"},
                "13:00": {"name": "üç≤ –û–±–µ–¥ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏", "type": "focus_lunch", "method": "generate_family_breakfast"}, 
                "19:00": {"name": "üåô –£–∂–∏–Ω –¥–ª—è –º–æ–∑–≥–∞", "type": "brain_dinner", "method": "generate_family_breakfast"}
            },
            1: {
                "08:00": {"name": "‚ö° –≠–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫", "type": "energy_breakfast", "method": "generate_family_breakfast"},
                "13:00": {"name": "üí™ –ë–µ–ª–∫–æ–≤—ã–π –æ–±–µ–¥", "type": "protein_lunch", "method": "generate_family_breakfast"},
                "19:00": {"name": "üçΩÔ∏è –£–∂–∏–Ω –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏", "type": "energy_dinner", "method": "generate_family_breakfast"}
            },
            4: {
                "08:00": {"name": "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "analytical_breakfast", "method": "generate_family_breakfast"},
                "13:00": {"name": "üéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ–±–µ–¥", "type": "results_lunch", "method": "generate_family_breakfast"},
                "17:00": {"name": "üç∞ –ü—è—Ç–Ω–∏—á–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "type": "friday_dessert", "method": "generate_friday_dessert"},
                "19:00": {"name": "üåô –£–∂–∏–Ω –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö", "type": "weekend_prep_dinner", "method": "generate_family_breakfast"}
            },
            5: {
                "10:00": {"name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "family_breakfast", "method": "generate_family_breakfast"},
                "13:00": {"name": "üç≤ –°–µ–º–µ–π–Ω—ã–π –æ–±–µ–¥", "type": "family_lunch", "method": "generate_family_breakfast"},
                "17:00": {"name": "üéÇ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç", "type": "saturday_dessert", "method": "generate_friday_dessert"},
                "19:00": {"name": "üåô –°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω", "type": "family_dinner", "method": "generate_family_breakfast"}
            },
            6: {
                "10:00": {"name": "‚òÄÔ∏è –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "sunday_breakfast", "method": "generate_sunday_breakfast"},
                "13:00": {"name": "üçΩÔ∏è –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥", "type": "sunday_lunch", "method": "generate_family_breakfast"},
                "17:00": {"name": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è", "type": "meal_planning", "method": "generate_family_breakfast"},
                "19:00": {"name": "üåô –£–∂–∏–Ω –¥–ª—è –Ω–µ–¥–µ–ª–∏", "type": "week_prep_dinner", "method": "generate_family_breakfast"}
            }
        }
        
        self.server_schedule = self._convert_schedule_to_server()
        self.is_running = False
        self.telegram = TelegramManager()
        self.generator = ContentGenerator()
        
    def _convert_schedule_to_server(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        server_schedule = {}
        for day, day_schedule in self.kemerovo_schedule.items():
            server_schedule[day] = {}
            for kemerovo_time, event in day_schedule.items():
                server_time = TimeManager.kemerovo_to_server(kemerovo_time)
                server_schedule[day][server_time] = event
        return server_schedule

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            return
            
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        for day, day_schedule in self.server_schedule.items():
            for server_time, event in day_schedule.items():
                self._schedule_event(day, server_time, event)
        
        self.is_running = True
        self._run_scheduler()
    
    def _schedule_event(self, day, server_time, event):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        def job():
            current_times = TimeManager.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['name']}")
            
            method_name = event['method']
            method = getattr(self.generator, method_name)
            content = method()
            
            if content:
                content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = self.telegram.send_message(content_with_time)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['name']}")
        
        job_func = getattr(schedule.every(), self._get_day_name(day))
        job_func.at(server_time).do(job)
    
    def _get_day_name(self, day_num):
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        return days[day_num]

    def _run_scheduler(self):
        def run():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        Thread(target=run, daemon=True).start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

# –°–ò–°–¢–ï–ú–ê KEEP-ALIVE –î–õ–Ø RENDER
def start_keep_alive_system():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render"""
    
    def keep_alive_ping():
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if Config.RENDER_APP_URL:
                response = requests.get(f"{Config.RENDER_APP_URL}/health", timeout=10)
                if response.status_code == 200:
                    service_monitor.update_keep_alive()
                    logger.info("‚úÖ Keep-alive ping successful")
            else:
                service_monitor.update_keep_alive()
                logger.info("‚úÖ Keep-alive cycle completed")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive failed: {e}")
    
    def run_keep_alive():
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        schedule.every(5).minutes.do(keep_alive_ping)
        
        time.sleep(10)
        keep_alive_ping()
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    keep_alive_thread = Thread(target=run_keep_alive, daemon=True)
    keep_alive_thread.start()
    logger.info("‚úÖ Keep-alive system started")

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
telegram_manager = TelegramManager()
content_generator = ContentGenerator()
content_scheduler = ContentScheduler()

# –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
try:
    content_scheduler.start_scheduler()
    start_keep_alive_system()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeManager.get_current_times()
    telegram_manager.send_message(f"""
üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –°–ï–ú–¨–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞ ‚úÖ

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 24 –ø–æ—Å—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é
üçΩÔ∏è –§–æ—Ä–º–∞—Ç: –í–∫—É—Å–Ω–æ, –ø–æ–ª–µ–∑–Ω–æ, –¥–ª—è —Å–µ–º—å–∏
üõ°Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: Keep-alive –∞–∫—Ç–∏–≤–µ–Ω

üïê –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! üë®‚Äçüë©‚Äçüëß‚Äçüë¶
    """)
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–ê–†–®–†–£–¢–´ FLASK
@app.route('/')
@rate_limit
def smart_dashboard():
    """–£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º"""
    try:
        member_count = telegram_manager.get_member_count()
        current_times = TimeManager.get_current_times()
        today = TimeManager.get_kemerovo_weekday()
        today_schedule = content_scheduler.kemerovo_schedule.get(today, {})
        
        next_event = None
        current_time = current_times['kemerovo_time'][:5]
        for time_str, event in sorted(today_schedule.items()):
            if time_str > current_time:
                next_event = (time_str, event)
                break
        
        monitor_status = service_monitor.get_status()
        
        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</title>
            <style>
                :root {{
                    --primary: #2c3e50;
                    --accent: #3498db;
                    --success: #27ae60;
                    --warning: #f39c12;
                    --danger: #e74c3c;
                    --light: #ecf0f1;
                    --dark: #34495e;
                }}
                
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}
                
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                    color: #333;
                }}
                
                .dashboard {{
                    max-width: 1400px;
                    margin: 0 auto;
                }}
                
                .header {{
                    background: var(--primary);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    margin-bottom: 20px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                }}
                
                .status-bar {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    background: var(--dark);
                    padding: 12px 20px;
                    border-radius: 10px;
                    margin-top: 15px;
                    font-size: 14px;
                    flex-wrap: wrap;
                    gap: 15px;
                }}
                
                .status-item {{
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }}
                
                .widgets-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-bottom: 20px;
                }}
                
                .widget {{
                    background: white;
                    padding: 25px;
                    border-radius: 15px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                }}
                
                .widget h3 {{
                    color: var(--primary);
                    margin-bottom: 15px;
                    font-size: 18px;
                    border-bottom: 2px solid var(--light);
                    padding-bottom: 10px;
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .stat-card {{
                    background: var(--light);
                    padding: 15px;
                    border-radius: 10px;
                    text-align: center;
                }}
                
                .stat-number {{
                    font-size: 24px;
                    font-weight: bold;
                    color: var(--primary);
                }}
                
                .stat-label {{
                    font-size: 12px;
                    color: var(--dark);
                    margin-top: 5px;
                }}
                
                .schedule-item {{
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    margin: 8px 0;
                    background: var(--light);
                    border-radius: 8px;
                    border-left: 4px solid var(--accent);
                }}
                
                .schedule-time {{
                    font-weight: bold;
                    color: var(--primary);
                    min-width: 60px;
                }}
                
                .schedule-text {{
                    flex: 1;
                    margin-left: 15px;
                }}
                
                .btn {{
                    background: var(--accent);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    text-align: center;
                    margin: 5px;
                }}
                
                .btn:hover {{
                    background: #2980b9;
                }}
                
                .actions-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 10px;
                    margin-top: 15px;
                }}
                
                .monitor-info {{
                    background: #e8f5e8;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    border-left: 4px solid var(--success);
                }}
                
                .monitor-item {{
                    display: flex;
                    justify-content: space-between;
                    margin: 5px 0;
                    font-size: 14px;
                }}
                
                @media (max-width: 768px) {{
                    .widgets-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .stats-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .status-bar {{
                        flex-direction: column;
                        gap: 10px;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="dashboard">
                <div class="header">
                    <h1>üé™ –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</h1>
                    <p>–ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ü–∏—Ç–∞–Ω–∏—è –¥–ª—è –°–µ–º—å–∏</p>
                    
                    <div class="status-bar">
                        <div class="status-item">
                            <span style="color: var(--success)">üü¢</span>
                            <span>–°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê</span>
                        </div>
                        <div class="status-item">
                            <span>üìä</span>
                            <span>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {member_count}</span>
                        </div>
                        <div class="status-item">
                            <span>‚è∞</span>
                            <span>–ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}</span>
                        </div>
                        {f'<div class="status-item"><span>üîÑ</span><span>–°–ª–µ–¥. –ø–æ—Å—Ç: {next_event[0]} - {next_event[1]["name"]}</span></div>' if next_event else '<div class="status-item"><span>üîö</span><span>–ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç</span></div>'}
                    </div>
                </div>
                
                <div class="monitor-info">
                    <h3>üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (Render Optimized)</h3>
                    <div class="monitor-item">
                        <span>Uptime:</span>
                        <span>{int(monitor_status['uptime_seconds'] // 3600)}—á {int((monitor_status['uptime_seconds'] % 3600) // 60)}–º</span>
                    </div>
                    <div class="monitor-item">
                        <span>Keep-alive ping:</span>
                        <span>{monitor_status['keep_alive_count']} —Ä–∞–∑</span>
                    </div>
                    <div class="monitor-item">
                        <span>–ó–∞–ø—Ä–æ—Å—ã:</span>
                        <span>{monitor_status['requests_handled']}</span>
                    </div>
                </div>
                
                <div class="widgets-grid">
                    <div class="widget">
                        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h3>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-number">{member_count}</div>
                                <div class="stat-label">üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">24</div>
                                <div class="stat-label">üìÖ –ü–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">4.2%</div>
                                <div class="stat-label">üí¨ Engagement</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">284</div>
                                <div class="stat-label">‚≠ê –†–µ–∞–∫—Ü–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è</h3>
                        {"".join([f'''
                        <div class="schedule-item">
                            <div class="schedule-time">{time}</div>
                            <div class="schedule-text">{event["name"]}</div>
                            <div style="color: {"var(--success)" if time < current_times["kemerovo_time"][:5] else "var(--accent)"}">
                                {"‚úÖ" if time < current_times["kemerovo_time"][:5] else "‚è≥"}
                            </div>
                        </div>
                        ''' for time, event in sorted(today_schedule.items())])}
                    </div>
                    
                    <div class="widget">
                        <h3>üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <div class="actions-grid">
                            <button class="btn" onclick="testChannel()">üì§ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</button>
                            <button class="btn" onclick="sendReport()">üìä –û—Ç—á–µ—Ç</button>
                            <button class="btn" onclick="sendVisual()">üé® –í–∏–∑—É–∞–ª</button>
                            <button class="btn" onclick="sendBreakfast()">üç≥ –ó–∞–≤—Ç—Ä–∞–∫</button>
                            <button class="btn" onclick="sendDessert()">üç∞ –î–µ—Å–µ—Ä—Ç</button>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                function testChannel() {{
                    fetch('/test-channel').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ö–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç!' : '‚ùå –û—à–∏–±–∫–∞');
                    }});
                }}
                
                function sendReport() {{
                    fetch('/send-report').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞');
                    }});
                }}
                
                function sendVisual() {{
                    fetch('/send-visual').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –í–∏–∑—É–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞');
                    }});
                }}
                
                function sendBreakfast() {{
                    fetch('/send-breakfast').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ó–∞–≤—Ç—Ä–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞');
                    }});
                }}
                
                function sendDessert() {{
                    fetch('/send-dessert').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –î–µ—Å–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞');
                    }});
                }}
                
                setInterval(() => {{
                    window.location.reload();
                }}, 30000);
            </script>
        </body>
        </html>
        """
        return html
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

# HEALTH CHECK –ú–ê–†–®–†–£–¢–´
@app.route('/health')
def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return jsonify(service_monitor.get_status())

@app.route('/ping')
def ping():
    """–ü—Ä–æ—Å—Ç–æ–π ping"""
    return "pong", 200

# API –ú–ê–†–®–†–£–¢–´
@app.route('/test-channel')
@rate_limit
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    success = telegram_manager.send_message("üé™ <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:</b> –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ")
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-report')
@rate_limit
def send_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
    member_count = telegram_manager.get_member_count()
    current_times = TimeManager.get_current_times()
    
    report = f"""üìä <b>–û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´</b>

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{member_count}</b>
‚è∞ –í—Ä–µ–º—è: {current_times['kemerovo_time']}
üõ°Ô∏è Keep-alive: –ê–∫—Ç–∏–≤–µ–Ω

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É! üë®‚Äçüë©‚Äçüëß‚Äçüë¶"""
    
    success = telegram_manager.send_message(report)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-visual')
@rate_limit
def send_visual():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content = content_generator.generate_family_breakfast()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-breakfast')
@rate_limit
def send_breakfast():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
    content = content_generator.generate_family_breakfast()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-dessert')
@rate_limit
def send_dessert():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Å–µ—Ä—Ç–∞"""
    content = content_generator.generate_friday_dessert()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–º–Ω–æ–≥–æ –î–∞—à–±–æ—Ä–¥–∞ @ppsupershef")
    print("üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ–º—å–∏")
    print("üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 24 –ø–æ—Å—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é")
    print("üõ°Ô∏è Keep-alive: –ê–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )
