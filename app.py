import os
import logging
import requests
import json
import time
import schedule
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, request, jsonify, render_template_string
import pytz
import random

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
def check_security():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    required_tokens = ['TELEGRAM_BOT_TOKEN', 'YANDEX_GPT_API_KEY']
    
    for token_name in required_tokens:
        token_value = os.getenv(token_name)
        if not token_value:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω {token_name}")
            print("üí° –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")
            print("üìã –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env —Ñ–∞–π–ª–∞:")
            print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
            print("TELEGRAM_CHANNEL=-1003152210862")
            print("TELEGRAM_GROUP=@ppsupershef_chat")
            print("YANDEX_GPT_API_KEY=–≤–∞—à_yandex_api_–∫–ª—é—á")
            print("YANDEX_FOLDER_ID=b1gb6o9sk0ajjfdaoev8")
            print("DEEPSEEK_API_KEY=–≤–∞—à_deepseek_–∫–ª—é—á")
            return False
    
    print("‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ!")
    return True

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if not check_security():
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    SERVER_TIMEZONE = pytz.timezone('UTC')
    KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')

class ContentFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    EMOTIONAL_TRIGGERS = {
        'achievement': [
            "üéØ –°—Ç–∞–Ω—å—Ç–µ –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è, –∫–æ—Ç–æ—Ä–æ–π –≤–æ—Å—Ö–∏—â–∞–µ—Ç–µ—Å—å",
            "üéØ –ï–¥–∞ - –≤–∞—à —Å–æ—é–∑–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∞–º–±–∏—Ü–∏–π", 
            "üéØ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è",
            "üéØ –ö–∞–∂–¥–∞—è —Ç–∞—Ä–µ–ª–∫–∞ - —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è"
        ],
        'transformation': [
            "üéØ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞",
            "üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
            "üéØ –í–∞—à–µ —Ç–µ–ª–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ç–æ–ø–ª–∏–≤–∞", 
            "üéØ –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —É–∂–∏–Ω–∞"
        ],
        'community': [
            "üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
            "üéØ –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é",
            "üéØ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞",
            "üéØ –í–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É —É–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        ]
    }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    SYSTEM_PROMPT = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –∏ –Ω–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏—é, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –®–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.

üéØ –§–ò–õ–û–°–û–§–ò–Ø: 
"–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å"

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:
1. –ù–∞—á–∏–Ω–∞–π —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∂–∏–∑–Ω–∏
2. –î–æ–±–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã
3. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
4. –û–±—ä—è—Å–Ω—è–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º
5. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –ø—Ä–∏–∑—ã–≤–æ–º –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é

üéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–¶–ï–ü–¢–û–í:
- –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –ú–∏—à–ª–µ–Ω, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞
- –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
- –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π

üéØ –¢–û–ù:
- –î—Ä—É–∂–µ—Å–∫–∏–π, –Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞  
- –ù–∞—É—á–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

üéØ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –ü—Ä–æ–¥—É–∫—Ç—ã –≤—ã–¥–µ–ª—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–æ–¥–∑–∏
- –ù–∞—É—á–Ω—ã–µ –±–ª–æ–∫–∏ –≤—ã–¥–µ–ª—è–π —ç–º–æ–¥–∑–∏
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞—á–∏–Ω–∞–π —Å üéØ"""
    
    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    VISUAL_CONTENT = {
        'infographics': [
            {'emoji': 'üìä', 'title': 'üìä –ü—Ä–∞–≤–∏–ª–æ —Ç–∞—Ä–µ–ª–∫–∏', 'desc': 'üéØ –ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'},
            {'emoji': 'üìà', 'title': 'üìà –ë–∞–ª–∞–Ω—Å –ë–ñ–£', 'desc': 'üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤'},
            {'emoji': '‚è±Ô∏è', 'title': '‚è±Ô∏è –¢–∞–π–º–∏–Ω–≥ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏', 'desc': 'üéØ –ö–æ–≥–¥–∞ –∏ —á—Ç–æ –ª—É—á—à–µ –µ—Å—Ç—å'},
            {'emoji': 'ü•ó', 'title': 'ü•ó –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'desc': 'üéØ –ß—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ'},
            {'emoji': 'üíß', 'title': 'üíß –ì–∏–¥—Ä–æ–±–∞–ª–∞–Ω—Å', 'desc': 'üéØ –°—Ö–µ–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã'}
        ]
    }
    
    # –†–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    REACTIONS = [
        {"emoji": "üòã", "text": "–≤–∫—É—Å–Ω–æ"},
        {"emoji": "üí™", "text": "–ø–æ–ª–µ–∑–Ω–æ"},
        {"emoji": "üë®‚Äçüç≥", "text": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é"},
        {"emoji": "üìù", "text": "–∑–∞–ø–∏—à—É —Å–µ–±–µ"},
        {"emoji": "üìö", "text": "–Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã"}
    ]

    @staticmethod
    def get_emotional_trigger():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        all_triggers = []
        for category in ContentFormatter.EMOTIONAL_TRIGGERS.values():
            all_triggers.extend(category)
        return random.choice(all_triggers)

    @staticmethod
    def format_philosophy_content(title, content, content_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"""
        trigger = ContentFormatter.get_emotional_trigger()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        reactions_line = " | ".join([f"{reaction['emoji']} {reaction['text']}" for reaction in ContentFormatter.REACTIONS])
        
        formatted_content = f"""üé™ –ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø –ß–ï–†–ï–ó –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï

{trigger}

{title}

{content}

---
üí´ –í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç - –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é

üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! ‚Üí @ppsupershef
üí¨ –û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! ‚Üí @ppsupershef_chat

{reactions_line}

üîÑ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! ‚Üí @ppsupershef"""
        
        return formatted_content

class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –¥–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
            time_obj = datetime.strptime(kemerovo_time_str, '%H:%M').time()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π datetime –≤ –ö–µ–º–µ—Ä–æ–≤–æ
            kemerovo_dt = Config.KEMEROVO_TIMEZONE.localize(
                datetime.combine(kemerovo_now.date(), time_obj)
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TIMEZONE)
            return server_dt.strftime('%H:%M')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        server_now = datetime.now(Config.SERVER_TIMEZONE)
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_date': server_now.strftime('%Y-%m-%d'),
            'kemerovo_date': kemerovo_now.strftime('%Y-%m-%d'),
            'server_timezone': str(Config.SERVER_TIMEZONE),
            'kemerovo_timezone': str(Config.KEMEROVO_TIMEZONE)
        }

class TelegramPolls:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ –≤ Telegram"""
    
    def __init__(self, bot_token):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def create_poll(self, chat_id, question, options, is_anonymous=True, allows_multiple_answers=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendPoll"
            payload = {
                'chat_id': chat_id,
                'question': question,
                'options': options,
                'is_anonymous': is_anonymous,
                'allows_multiple_answers': allows_multiple_answers,
                'type': 'regular'
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {question}")
                return result['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None

class ChannelAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self, bot_token, channel_id):
        self.bot_token = bot_token
        self.channel_id = channel_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    def get_member_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {
                'chat_id': self.channel_id
            }
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            if result.get('ok'):
                return result['result']
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def generate_public_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        member_count = self.get_member_count()
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ö–ê–ù–ê–õ–ê @ppsupershef

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}
üìÖ –î–∞—Ç–∞: {current_time}
üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {TimeZoneConverter.get_current_times()['kemerovo_time']}

üí´ –°–ï–ì–û–î–ù–Ø –í –ö–ê–ù–ê–õ–ï:
‚Ä¢ üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞
‚Ä¢ üí™ –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ üõ°Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è
‚Ä¢ üç∞ –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è

üéØ –ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –ö–õ–£–ë–£ –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø –ß–ï–†–ï–ó –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï!

#–æ—Ç—á–µ—Ç #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
        
        return report

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.group = Config.TELEGRAM_GROUP
        self.polls_manager = TelegramPolls(self.token)
        self.formatter = ContentFormatter()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
        if not self.token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.token:
                return {"status": "error", "message": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            return {
                "status": "success", 
                "bot": bot_info['result']['username'],
                "channel_id": self.channel
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def diagnose_channel(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –∏ –±–æ—Ç–∞"""
        try:
            diagnosis = {
                "status": "running",
                "checks": [],
                "summary": "",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            if not self.token:
                diagnosis["checks"].append({"check": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
                diagnosis["status"] = "error"
            else:
                diagnosis["checks"].append({"check": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": "–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            bot_info = self.test_connection()
            if bot_info["status"] == "success":
                diagnosis["checks"].append({"check": "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": f"–ë–æ—Ç: @{bot_info['bot']}"})
            else:
                diagnosis["checks"].append({"check": "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": bot_info["message"]})
                diagnosis["status"] = "error"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: ID –∫–∞–Ω–∞–ª–∞
            if not self.channel:
                diagnosis["checks"].append({"check": "ID –∫–∞–Ω–∞–ª–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
                diagnosis["status"] = "error"
            else:
                diagnosis["checks"].append({"check": "ID –∫–∞–Ω–∞–ª–∞", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": f"–ö–∞–Ω–∞–ª: {self.channel}"})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            if self.token and self.channel:
                try:
                    url = f"https://api.telegram.org/bot{self.token}/getChat"
                    payload = {'chat_id': self.channel}
                    response = requests.post(url, json=payload, timeout=10)
                    result = response.json()
                    
                    if result.get('ok'):
                        chat_info = result['result']
                        diagnosis["checks"].append({"check": "–ü—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": f"–ö–∞–Ω–∞–ª: {chat_info.get('title', 'Unknown')}"})
                    else:
                        diagnosis["checks"].append({"check": "–ü—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"})
                        diagnosis["status"] = "error"
                except Exception as e:
                    diagnosis["checks"].append({"check": "–ü—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ", "status": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "details": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {str(e)}"})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            try:
                analytics = ChannelAnalytics(self.token, self.channel)
                member_count = analytics.get_member_count()
                diagnosis["checks"].append({"check": "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}"})
            except Exception as e:
                diagnosis["checks"].append({"check": "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "status": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "details": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: {str(e)}"})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if diagnosis["status"] != "error":
                test_message = "üîß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                success = self.send_to_telegram(test_message)
                if success:
                    diagnosis["checks"].append({"check": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
                else:
                    diagnosis["checks"].append({"check": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"})
                    diagnosis["status"] = "error"
            
            # –°–≤–æ–¥–∫–∞
            if diagnosis["status"] == "error":
                diagnosis["summary"] = "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
            elif diagnosis["status"] == "running":
                diagnosis["summary"] = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            else:
                diagnosis["summary"] = "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
            return diagnosis
            
        except Exception as e:
            return {
                "status": "error",
                "checks": [{"check": "–û–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"}],
                "summary": "‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
    
    def send_poll(self, poll_type='content_preference'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            poll_data = {
                'question': "üéØ –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?",
                'options': ['üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ', 'üí™ –≠–Ω–µ—Ä–≥–∏—è', 'üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ', 'üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è']
            }
            return self.polls_manager.create_poll(self.channel, poll_data['question'], poll_data['options'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    def send_visual_content(self, content_type='infographics'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            visual_item = random.choice(self.formatter.VISUAL_CONTENT[content_type])
            message = f"""üé® {visual_item['title']}

{visual_item['desc']}

üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É - –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è!

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ

#–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ #–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ"""
            
            return self.send_to_telegram(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
            return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.formatter = ContentFormatter()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π
        if not self.yandex_key:
            logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            raise ValueError("YANDEX_GPT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1500
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': ContentFormatter.SYSTEM_PROMPT
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None

    # üß† –ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï - –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö
    def generate_neuro_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å —è—Å–Ω–æ—Å—Ç—å—é —É–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"

üî¨ –ù–ê–£–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- üß† –û–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
- üõ°Ô∏è –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –º–æ–∑–≥–∞
- üí° –•–æ–ª–∏–Ω –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –æ–±—É—á–µ–Ω–∏—è
- üéØ L-—Ç–∏—Ä–æ–∑–∏–Ω –¥–ª—è —Ñ–æ–∫—É—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê", content, "breakfast")
        
        fallback = """ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ ü•¨ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–æ–º—Ç–∏–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï: 
ü•ë –ê–≤–æ–∫–∞–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–º–µ–≥–∞-9 –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤
ü•¨ –®–ø–∏–Ω–∞—Ç - –ª—é—Ç–µ–∏–Ω –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π  
üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        return self.formatter.format_philosophy_content("üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê", fallback, "breakfast")

    def generate_neuro_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ-–æ–±–µ–¥–∞ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–û–±–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π —Å–ø–∞–¥ –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ä—ã–≤"

üî¨ –ù–ê–£–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- üß† –ë–µ–ª–∫–∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏
- ‚ö° –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã
- üéØ –û–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
- üõ°Ô∏è –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –ø—Ä–æ—Ç–∏–≤ –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üéØ –ù–ï–ô–†–û-–û–ë–ï–î –î–õ–Ø –§–û–ö–£–°–ê", content, "lunch")
        
        fallback = """üç£ –õ–æ—Å–æ—Å—å —Å –∫–∏–Ω–æ–∞ –∏ –æ–≤–æ—â–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üêü –õ–æ—Å–æ—Å—å - 150 –≥
‚Ä¢ üåæ –ö–∏–Ω–æ–∞ - 100 –≥ (—Å—É—Ö–∞—è)
‚Ä¢ ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - 200 –≥
‚Ä¢ ü•ï –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —Å—Ç.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ó–∞–ø–µ–∫–∏—Ç–µ –ª–æ—Å–æ—Å—å —Å —Ç—Ä–∞–≤–∞–º–∏ 12-15 –º–∏–Ω—É—Ç
2. –û—Ç–≤–∞—Ä–∏—Ç–µ –∫–∏–Ω–æ–∞ 15 –º–∏–Ω—É—Ç
3. –û–±–∂–∞—Ä—å—Ç–µ –±—Ä–æ–∫–∫–æ–ª–∏ –∏ –º–æ—Ä–∫–æ–≤—å –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üêü –õ–æ—Å–æ—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–º–µ–≥–∞-3 –¥–ª—è —Å–∏–Ω–∞–ø—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
üåæ –ö–∏–Ω–æ–∞ - –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - —Å—É–ª—å—Ñ–æ—Ä–∞—Ñ–∞–Ω –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞"""
        return self.formatter.format_philosophy_content("üéØ –ù–ï–ô–†–û-–û–ë–ï–î –î–õ–Ø –§–û–ö–£–°–ê", fallback, "lunch")

    def generate_neuro_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ-—É–∂–∏–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤–∏—Ç –º–æ–∑–≥ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–£–∂–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–µ—á–µ—Ä–Ω—é—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–ª—É"

üî¨ –ù–ê–£–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- üò¥ –¢—Ä–∏–ø—Ç–æ—Ñ–∞–Ω –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–∞
- üßò –ú–∞–≥–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
- üõ°Ô∏è –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
- üí™ –õ–µ–≥–∫–∏–µ –±–µ–ª–∫–∏ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üåô –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–©–ò–ô –ù–ï–ô–†–û-–£–ñ–ò–ù", content, "dinner")
        
        fallback = """üêü –¢—Ä–µ—Å–∫–∞ —Å —à–∞–ª—Ñ–µ–µ–º –∏ —Ç—É—à–µ–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üê† –¢—Ä–µ—Å–∫–∞ - 150 –≥
‚Ä¢ ü•¨ –ö–∞–±–∞—á–æ–∫ - 1 —à—Ç
‚Ä¢ üçÜ –ë–∞–∫–ª–∞–∂–∞–Ω - 1 —à—Ç
‚Ä¢ üåø –®–∞–ª—Ñ–µ–π —Å–≤–µ–∂–∏–π - 3-4 –ª–∏—Å—Ç–∞
‚Ä¢ üçã –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —Å—Ç.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ó–∞–ø–µ–∫–∏—Ç–µ —Ç—Ä–µ—Å–∫—É —Å —à–∞–ª—Ñ–µ–µ–º 15 –º–∏–Ω—É—Ç
2. –ü–æ—Ç—É—à–∏—Ç–µ –æ–≤–æ—â–∏ —Å —Ç—Ä–∞–≤–∞–º–∏ 20 –º–∏–Ω—É—Ç
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üê† –¢—Ä–µ—Å–∫–∞ - –ª–µ–≥–∫–∏–π –±–µ–ª–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
üåø –®–∞–ª—Ñ–µ–π —É–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
ü•¨ –û–≤–æ—â–∏ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞"""
        return self.formatter.format_philosophy_content("üåô –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–©–ò–ô –ù–ï–ô–†–û-–£–ñ–ò–ù", fallback, "dinner")

    def generate_neuro_dessert(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –¥–µ—Å–µ—Ä—Ç–∞ –¥–ª—è –º–æ–∑–≥–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–µ—Å–µ—Ä—Ç–∞ —Å –∞–≤–æ–∫–∞–¥–æ, –∫–æ—Ç–æ—Ä—ã–π —É–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–°–ª–∞–¥–∫–∞—è –ø–∞—É–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —É–º–Ω–µ–µ"

üî¨ –ù–ê–£–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- üß† –§–ª–∞–≤–æ–Ω–æ–∏–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
- üòä –¢—Ä–∏–ø—Ç–æ—Ñ–∞–Ω –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Å–µ—Ä–æ—Ç–æ–Ω–∏–Ω–∞
- üõ°Ô∏è –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –Ω–µ–π—Ä–æ–Ω–æ–≤
- üí° –ú–∞–≥–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ —Ñ–æ–∫—É—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üç´ –£–ú–ù–´–ô –î–ï–°–ï–†–¢ –î–õ–Ø –ú–û–ó–ì–ê", content, "dessert")
        
        fallback = """ü•ë –®–æ–∫–æ–ª–∞–¥–Ω—ã–π –º—É—Å—Å –∏–∑ –∞–≤–æ–∫–∞–¥–æ

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 2 —Å–ø–µ–ª—ã—Ö –ø–ª–æ–¥–∞
‚Ä¢ üç´ –ö–∞–∫–∞–æ-–ø–æ—Ä–æ—à–æ–∫ - 3 —Å—Ç.–ª.
‚Ä¢ üçØ –ú–µ–¥ - 2 —Å—Ç.–ª.
‚Ä¢ üçå –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –û—á–∏—Å—Ç–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ –∏ –±–∞–Ω–∞–Ω
2. –í–∑–±–µ–π—Ç–µ –≤ –±–ª–µ–Ω–¥–µ—Ä–µ –¥–æ –∫—Ä–µ–º–æ–æ–±—Ä–∞–∑–Ω–æ–π –º–∞—Å—Å—ã
3. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫–∞–æ –∏ –º–µ–¥, –≤–∑–±–µ–π—Ç–µ –µ—â–µ —Ä–∞–∑
4. –û—Ö–ª–∞–¥–∏—Ç–µ 15 –º–∏–Ω—É—Ç, –ø–æ—Å—ã–ø—å—Ç–µ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
ü•ë –ê–≤–æ–∫–∞–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ª–µ–∏–Ω–æ–≤—É—é –∫–∏—Å–ª–æ—Ç—É –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤
üç´ –ö–∞–∫–∞–æ - —Ñ–ª–∞–≤–æ–Ω–æ–∏–¥—ã –¥–ª—è –ø–∞–º—è—Ç–∏
üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è —Å–∏–Ω–∞–ø—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        return self.formatter.format_philosophy_content("üç´ –£–ú–ù–´–ô –î–ï–°–ï–†–¢ –î–õ–Ø –ú–û–ó–ì–ê", fallback, "dessert")

    # üí™ –≠–ù–ï–†–ì–ò–Ø –ò –¢–û–ù–£–° - –í–¢–û–†–ù–ò–ö
    def generate_energy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–∂–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ - –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ü—Ä–æ—Å–Ω–∏—Å—å —Å —ç–Ω–µ—Ä–≥–∏–µ–π, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏"

üî¨ –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- ‚ö° –ö–æ—ç–Ω–∑–∏–º Q10 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏
- üí™ –ú–∞–≥–Ω–∏–π –¥–ª—è –ê–¢–§ —Å–∏–Ω—Ç–µ–∑–∞
- üî¨ –í–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
- üéØ –ñ–µ–ª–µ–∑–æ –¥–ª—è –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", content, "breakfast")
        
        fallback = """ü•£ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —Å–µ–º–µ–Ω–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50 –≥
‚Ä¢ üå∞ –ú–∏–Ω–¥–∞–ª—å - 20 –≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ üçå –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ üü§ –ö–æ—Ä–∏—Ü–∞ - ¬Ω —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π –Ω–∞ 5 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –±–∞–Ω–∞–Ω –∏ —Å–µ–º–µ–Ω–∞ —á–∏–∞
3. –ü–æ—Å—ã–ø—å—Ç–µ –º–∏–Ω–¥–∞–ª–µ–º –∏ –∫–æ—Ä–∏—Ü–µ–π

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üåæ –û–≤—Å—è–Ω–∫–∞ –¥–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - –æ–º–µ–≥–∞-3 –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π
üü§ –ö–æ—Ä–∏—Ü–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏"""
        return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", fallback, "breakfast")

    def generate_energy_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ-–æ–±–µ–¥–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤—Å—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–Ω—è.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–¢–æ–ø–ª–∏–≤–æ –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"

üî¨ –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- üí™ –ü–æ—Å—Ç–Ω—ã–π –±–µ–ª–æ–∫ –¥–ª—è –º—ã—à–µ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
- ‚ö° –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
- üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è
- üî¨ –í–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–û–ë–ï–î –î–õ–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò", content, "lunch")
        
        fallback = """üçó –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –±—É–ª–≥—É—Ä–æ–º –∏ —Å–∞–ª–∞—Ç–æ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üçó –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150 –≥
‚Ä¢ üåæ –ë—É–ª–≥—É—Ä - 80 –≥ (—Å—É—Ö–æ–π)
‚Ä¢ ü•¨ –°–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥ - 100 –≥
‚Ä¢ ü•í –û–≥—É—Ä–µ—Ü - 1 —à—Ç
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ó–∞–ø–µ–∫–∏—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É —Å —Ç—Ä–∞–≤–∞–º–∏ 20 –º–∏–Ω—É—Ç
2. –û—Ç–≤–∞—Ä–∏—Ç–µ –±—É–ª–≥—É—Ä 15 –º–∏–Ω—É—Ç
3. –ù–∞—Ä–µ–∂—å—Ç–µ —Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –¥–ª—è —Å–∞–ª–∞—Ç–∞
4. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üçó –ö—É—Ä–∏—Ü–∞ - –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
üåæ –ë—É–ª–≥—É—Ä - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
ü•¨ –°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è"""
        return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–û–ë–ï–î –î–õ–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò", fallback, "lunch")

    def generate_recovery_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–µ–≥–æ —É–∂–∏–Ω–∞ –¥–ª—è –º—ã—à—Ü"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –º—ã—à—Ü –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ù–æ—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–∂–∏–Ω–∞"

üî¨ –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- üí™ –ë–µ–ª–∫–∏ –¥–ª—è –º—ã—à–µ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
- ‚ö° –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è –Ω–æ—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
- üõ°Ô∏è –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- üß¨ –ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üí™ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–©–ò–ô –£–ñ–ò–ù", content, "dinner")
        
        fallback = """ü¶É –ò–Ω–¥–µ–π–∫–∞ —Å –ø–µ—á–µ–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü¶É –ì—Ä—É–¥–∫–∞ –∏–Ω–¥–µ–π–∫–∏ - 150 –≥
‚Ä¢ üç† –°–ª–∞–¥–∫–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å - 1 —à—Ç
‚Ä¢ ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - 200 –≥
‚Ä¢ üåø –†–æ–∑–º–∞—Ä–∏–Ω - 1 –≤–µ—Ç–æ—á–∫–∞
‚Ä¢ ü•• –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ó–∞–ø–µ–∫–∏—Ç–µ –∏–Ω–¥–µ–π–∫—É —Å —Ä–æ–∑–º–∞—Ä–∏–Ω–æ–º 25 –º–∏–Ω—É—Ç
2. –ó–∞–ø–µ–∫–∏—Ç–µ –æ–≤–æ—â–∏ —Å –∫–æ–∫–æ—Å–æ–≤—ã–º –º–∞—Å–ª–æ–º 30 –º–∏–Ω—É—Ç
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –∑–µ–ª–µ–Ω—ã–º —Å–∞–ª–∞—Ç–æ–º

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
ü¶É –ò–Ω–¥–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏–ø—Ç–æ—Ñ–∞–Ω –¥–ª—è —Å–Ω–∞
üç† –°–ª–∞–¥–∫–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - —Å—É–ª—å—Ñ–æ—Ä–∞—Ñ–∞–Ω –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞"""
        return self.formatter.format_philosophy_content("üí™ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–©–ò–ô –£–ñ–ò–ù", fallback, "dinner")

    # üõ°Ô∏è –î–û–õ–ì–û–õ–ï–¢–ò–ï - –°–†–ï–î–ê
    def generate_longevity_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –≥–æ–¥—ã –∫ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏"

üî¨ –ì–ï–†–û–ü–†–û–¢–ï–ö–¢–û–†–´:
- üß¨ –†–µ—Å–≤–µ—Ä–∞—Ç—Ä–æ–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Ä—Ç—É–∏–Ω–æ–≤
- üõ°Ô∏è –ö—É—Ä–∫—É–º–∏–Ω –ø—Ä–æ—Ç–∏–≤ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è
- üî¨ –ü–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã –¥–ª—è –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–æ–π –∑–∞—â–∏—Ç—ã
- üí´ –°–ø–µ—Ä–º–∏–¥–∏–Ω –¥–ª—è –∞—É—Ç–æ—Ñ–∞–≥–∏–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", content, "breakfast")
        
        fallback = """ü•£ –ö–∞—à–∞ —Å –∫—É—Ä–∫—É–º–æ–π –∏ —è–≥–æ–¥–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üåæ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 50 –≥
‚Ä¢ üü° –ö—É—Ä–∫—É–º–∞ - 1 —á.–ª.
‚Ä¢ üçì –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 100 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ üíß –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –°–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–Ω–µ–≤—É—é –∫–∞—à—É
2. –î–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∫—É–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —è–≥–æ–¥–∞–º–∏, –æ—Ä–µ—Ö–∞–º–∏ –∏ –ª—å–Ω—è–Ω—ã–º –º–∞—Å–ª–æ–º

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üü° –ö—É—Ä–∫—É–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É—Ä–∫—É–º–∏–Ω - –º–æ—â–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã –ø—Ä–æ—Ç–∏–≤ –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
üíß –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - –æ–º–µ–≥–∞-3 –¥–ª—è –∫–ª–µ—Ç–æ—á–Ω—ã—Ö –º–µ–º–±—Ä–∞–Ω"""
        return self.formatter.format_philosophy_content("üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", fallback, "breakfast")

    def generate_longevity_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–µ–¥–∞ –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ö–∞–∂–¥—ã–π –æ–±–µ–¥ - –≤–∫–ª–∞–¥ –≤ –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤–æ–µ –±—É–¥—É—â–µ–µ"

üî¨ –ì–ï–†–û–ü–†–û–¢–ï–ö–¢–û–†–´:
- üß¨ –ü–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã –ø—Ä–æ—Ç–∏–≤ –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
- üõ°Ô∏è –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- üåø –ö–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –º–∏–∫—Ä–æ–±–∏–æ–º–∞
- üî¨ –ê–Ω—Ç–∏–≥–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üõ°Ô∏è –û–ë–ï–î –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", content, "lunch")
        
        fallback = """ü•¨ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –º–∏—Å–∫–∞ —Å –Ω—É—Ç–æ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üå± –ù—É—Ç - 150 –≥ (–≤–∞—Ä–µ–Ω—ã–π)
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç
‚Ä¢ üçÖ –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ - 100 –≥
‚Ä¢ ü•¨ –†—É–∫–∫–æ–ª–∞ - 50 –≥
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ extra virgin - 1 —Å—Ç.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –°–º–µ—à–∞–π—Ç–µ –Ω—É—Ç —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º
2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –∞–≤–æ–∫–∞–¥–æ –∏ –ø–æ–º–∏–¥–æ—Ä—ã
3. –í—ã–ª–æ–∂–∏—Ç–µ –Ω–∞ –ø–æ–¥—É—à–∫—É –∏–∑ —Ä—É–∫–∫–æ–ª—ã
4. –ü–æ—Å—ã–ø—å—Ç–µ —Å–µ–º–µ–Ω–∞–º–∏ –∫—É–Ω–∂—É—Ç–∞

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üå± –ù—É—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–µ—Ç—á–∞—Ç–∫—É –¥–ª—è –º–∏–∫—Ä–æ–±–∏–æ–º–∞
ü•ë –ê–≤–æ–∫–∞–¥–æ - –º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞
ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - –ø–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã –ø—Ä–æ—Ç–∏–≤ —Å—Ç–∞—Ä–µ–Ω–∏—è"""
        return self.formatter.format_philosophy_content("üõ°Ô∏è –û–ë–ï–î –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", fallback, "lunch")

    def generate_longevity_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–∏–Ω–∞ –¥–ª—è –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∞—É—Ç–æ—Ñ–∞–≥–∏–∏ –∏ –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"

üî¨ –ì–ï–†–û–ü–†–û–¢–ï–ö–¢–û–†–´:
- üß¨ –ê–∫—Ç–∏–≤–∞—Ç–æ—Ä—ã –∞—É—Ç–æ—Ñ–∞–≥–∏–∏
- üí™ –õ–µ–≥–∫–∏–µ –±–µ–ª–∫–∏ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- üß† –û–º–µ–≥–∞-3 –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤
- üõ°Ô∏è –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –Ω–æ—á–Ω–æ–π –∑–∞—â–∏—Ç—ã"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üõ°Ô∏è –£–ñ–ò–ù –î–õ–Ø –ö–õ–ï–¢–û–ß–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø", content, "dinner")
        
        fallback = """ü•¶ –°—É–ø-–ø—é—Ä–µ –∏–∑ –±—Ä–æ–∫–∫–æ–ª–∏ —Å –∫—É—Ä–∫—É–º–æ–π

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - 300 –≥
‚Ä¢ ü•¨ –¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ - 200 –≥
‚Ä¢ üü° –ö—É—Ä–∫—É–º–∞ - 1 —á.–ª.
‚Ä¢ ü•• –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ - 100 –º–ª
‚Ä¢ üü† –ò–º–±–∏—Ä—å —Å–≤–µ–∂–∏–π - 1 —Å–º

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –û—Ç–≤–∞—Ä–∏—Ç–µ –æ–≤–æ—â–∏ 15 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∫—É–º—É –∏ –∏–º–±–∏—Ä—å
3. –í–∑–±–µ–π—Ç–µ –±–ª–µ–Ω–¥–µ—Ä–æ–º —Å –∫–æ–∫–æ—Å–æ–≤—ã–º –º–æ–ª–æ–∫–æ–º
4. –ü—Ä–æ–≥—Ä–µ–π—Ç–µ 5 –º–∏–Ω—É—Ç

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üü° –ö—É—Ä–∫—É–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É—Ä–∫—É–º–∏–Ω –ø—Ä–æ—Ç–∏–≤ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è
ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - —Å—É–ª—å—Ñ–æ—Ä–∞—Ñ–∞–Ω –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞
ü•• –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ - —Å—Ä–µ–¥–Ω–µ—Ü–µ–ø–æ—á–µ—á–Ω—ã–µ —Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏"""
        return self.formatter.format_philosophy_content("üõ°Ô∏è –£–ñ–ò–ù –î–õ–Ø –ö–õ–ï–¢–û–ß–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø", fallback, "dinner")

    # üçΩÔ∏è –ì–ê–°–¢–†–û–ù–û–ú–ò–Ø - –ß–ï–¢–í–ï–†–ì
    def generate_gastronomy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ø–æ–ª–µ–∑–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å"

üé® –≠–õ–ï–ú–ï–ù–¢–´ –ò–ó–´–°–ö–ê–ù–ù–û–°–¢–ò:
- –ù–µ–æ–±—ã—á–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤
- –≠—Å—Ç–µ—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏
- –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
- –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", content, "breakfast")
        
        fallback = """üç≥ –ì—Ä–µ–Ω–∫–∏ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —è–π—Ü–æ–º-–ø–∞—à–æ—Ç

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üçû –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - 2 –ª–æ–º—Ç–∏–∫–∞
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 1 —à—Ç
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•¨ –†—É–∫–∫–æ–ª–∞ - 30 –≥
‚Ä¢ ‚ö™ –°–µ–º–µ–Ω–∞ –∫—É–Ω–∂—É—Ç–∞ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ü–æ–¥—Å—É—à–∏—Ç–µ —Ö–ª–µ–± –Ω–∞ —Å—É—Ö–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ
2. –†–∞–∑–æ–º–Ω–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ —Å —Å–æ–ª—å—é
3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —è–π—Ü–∞-–ø–∞—à–æ—Ç (3 –º–∏–Ω—É—Ç—ã –≤ –∫–∏–ø—è—â–µ–π –≤–æ–¥–µ)
4. –°–æ–±–µ—Ä–∏—Ç–µ: —Ö–ª–µ–± + –∞–≤–æ–∫–∞–¥–æ + —Ä—É–∫–∫–æ–ª–∞ + —è–π—Ü–æ

üí° –®–ï–§-–°–û–í–ï–¢: –î–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —è–π—Ü–∞-–ø–∞—à–æ—Ç –¥–æ–±–∞–≤—å—Ç–µ –≤ –≤–æ–¥—É 1 —Å—Ç.–ª. —É–∫—Å—É—Å–∞."""
        return self.formatter.format_philosophy_content("üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", fallback, "breakfast")

    def generate_gastronomy_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–µ–¥–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—á–µ—Ç–∞–µ—Ç –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—å–∑—É –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–û–±–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å –≤ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ"

üé® –≠–õ–ï–ú–ï–ù–¢–´ –ò–ó–´–°–ö–ê–ù–ù–û–°–¢–ò:
- –°–ª–æ–∂–Ω—ã–µ –≤–∫—É—Å–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –≠—Å—Ç–µ—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏
- –ë–∞–ª–∞–Ω—Å —Ç–µ–∫—Å—Ç—É—Ä –∏ –≤–∫—É—Å–æ–≤"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù–ù–´–ô –û–ë–ï–î", content, "lunch")
        
        fallback = """ü•© –°—Ç–µ–π–∫ –∏–∑ —Ç—É–Ω—Ü–∞ —Å –∫–∏–Ω–æ–∞ –∏ —Å–æ—É—Å–æ–º –ø–µ—Å—Ç–æ

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üêü –°—Ç–µ–π–∫ —Ç—É–Ω—Ü–∞ - 180 –≥
‚Ä¢ üåæ –ö–∏–Ω–æ–∞ - 100 –≥ (—Å—É—Ö–∞—è)
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç
‚Ä¢ üçã –õ–∏–º–æ–Ω - 1 —à—Ç
‚Ä¢ üåø –ë–∞–∑–∏–ª–∏–∫ —Å–≤–µ–∂–∏–π - 20 –≥

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –û–±–∂–∞—Ä—å—Ç–µ —Å—Ç–µ–π–∫ —Ç—É–Ω—Ü–∞ –ø–æ 1 –º–∏–Ω—É—Ç–µ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
2. –û—Ç–≤–∞—Ä–∏—Ç–µ –∫–∏–Ω–æ–∞ 15 –º–∏–Ω—É—Ç
3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å–æ—É—Å –ø–µ—Å—Ç–æ –∏–∑ –±–∞–∑–∏–ª–∏–∫–∞
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –¥–æ–ª—å–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –ª–∏–º–æ–Ω–æ–º

üí° –®–ï–§-–°–û–í–ï–¢: –¢—É–Ω–µ—Ü –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Ä–æ–∑–æ–≤—ã–º –≤–Ω—É—Ç—Ä–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã."""
        return self.formatter.format_philosophy_content("üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù–ù–´–ô –û–ë–ï–î", fallback, "lunch")

    def generate_gastronomy_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —É–∂–∏–Ω–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –æ—Å–æ–±–æ–≥–æ –≤–µ—á–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—á–µ—Ç–∞–µ—Ç –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–ª—å–∑—É.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–í–µ—á–µ—Ä, –∫–æ–≥–¥–∞ –µ–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º, –∞ –∑–¥–æ—Ä–æ–≤—å–µ - —Ä–æ—Å–∫–æ—à—å—é"

üé® –≠–õ–ï–ú–ï–ù–¢–´ –ò–ó–´–°–ö–ê–ù–ù–û–°–¢–ò:
- –°–ª–æ–∂–Ω—ã–µ —Å–æ—É—Å—ã –∏ –º–∞—Ä–∏–Ω–∞–¥—ã
- –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å –≤–∫—É—Å–æ–≤
- –≠—Å—Ç–µ—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–∏
- –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üçΩÔ∏è –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –£–ñ–ò–ù", content, "dinner")
        
        fallback = """üçó –£—Ç–∫–∞ –≤ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–æ–º –≥–ª–∞–∑—É—Ä–∏ —Å –ø—é—Ä–µ –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü¶Ü –£—Ç–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 200 –≥
‚Ä¢ ü•¨ –¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ - 300 –≥
‚Ä¢ üçä –ê–ø–µ–ª—å—Å–∏–Ω - 1 —à—Ç
‚Ä¢ üçØ –ú–µ–¥ - 1 —Å—Ç.–ª.
‚Ä¢ üåø –†–æ–∑–º–∞—Ä–∏–Ω - 1 –≤–µ—Ç–æ—á–∫–∞

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –û–±–∂–∞—Ä—å—Ç–µ —É—Ç–∏–Ω—É—é –≥—Ä—É–¥–∫—É –∫–æ–∂–∏—Ü–µ–π –≤–Ω–∏–∑ 8 –º–∏–Ω—É—Ç
2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –ø—é—Ä–µ –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã
3. –°–¥–µ–ª–∞–π—Ç–µ –≥–ª–∞–∑—É—Ä—å –∏–∑ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–æ–≥–æ —Å–æ–∫–∞ –∏ –º–µ–¥–∞
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ä–æ–∑–º–∞—Ä–∏–Ω–æ–º

üí° –®–ï–§-–°–û–í–ï–¢: –î–∞–π—Ç–µ —É—Ç–∫–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –¥–ª—è —Å–æ—á–Ω–æ—Å—Ç–∏."""
        return self.formatter.format_philosophy_content("üçΩÔ∏è –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –£–ñ–ò–ù", fallback, "dinner")

    # üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê - –ü–Ø–¢–ù–ò–¶–ê
    def generate_analytical_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ó–∞–≤—Ç—Ä–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–ø—ã—Ç –Ω–µ–¥–µ–ª–∏ –≤ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ"

üî¨ –ö–û–ì–ù–ò–¢–ò–í–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:
- üí° –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è
- üéØ –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
- ‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- üõ°Ô∏è –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", content, "breakfast")
        
        fallback = """ü•£ –¢–≤–æ—Ä–æ–∂–Ω–∞—è –º–∞—Å—Å–∞ —Å –æ—Ä–µ—Ö–∞–º–∏ –∏ –º–µ–¥–æ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ 5% - 150 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥
‚Ä¢ üçØ –ú–µ–¥ - 1 —Å—Ç.–ª.
‚Ä¢ üçá –ò–∑—é–º - 20 –≥
‚Ä¢ üçã –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –°–º–µ—à–∞–π—Ç–µ —Ç–≤–æ—Ä–æ–≥ —Å –º–µ–¥–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º
2. –î–æ–±–∞–≤—å—Ç–µ –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–µ –æ—Ä–µ—Ö–∏ –∏ –∏–∑—é–º
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–º–∏ —Ö–ª–µ–±—Ü–∞–º–∏

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üßÄ –¢–≤–æ—Ä–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—Ä–æ–∑–∏–Ω –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è
üå∞ –û—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
üçØ –ú–µ–¥ - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é –≥–ª—é–∫–æ–∑—É –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –º–æ–∑–≥–∞"""
        return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", fallback, "breakfast")

    def generate_analytical_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–µ–¥–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—Ç–∞–ª—å–Ω—É—é —è—Å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–û–±–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—á–∏—â–∞–µ—Ç –º—ã—Å–ª–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"

üî¨ –ö–û–ì–ù–ò–¢–ò–í–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:
- üß† –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
- üí° –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
- ‚ö° –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –±–µ–∑ —Å–æ–Ω–ª–∏–≤–æ—Å—Ç–∏
- üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–ë–ï–î", content, "lunch")
        
        fallback = """üç≤ –°—É–ø –∏–∑ —á–µ—á–µ–≤–∏—Ü—ã —Å —à–∞–ª—Ñ–µ–µ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üå± –ß–µ—á–µ–≤–∏—Ü–∞ - 100 –≥ (—Å—É—Ö–∞—è)
‚Ä¢ ü•ï –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç
‚Ä¢ üßÖ –õ—É–∫ - 1 —à—Ç
‚Ä¢ üåø –®–∞–ª—Ñ–µ–π —Å–≤–µ–∂–∏–π - 5-6 –ª–∏—Å—Ç—å–µ–≤
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —Å—Ç.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –û–±–∂–∞—Ä—å—Ç–µ –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å 5 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ —á–µ—á–µ–≤–∏—Ü—É –∏ —à–∞–ª—Ñ–µ–π, –∑–∞–ª–µ–π—Ç–µ –≤–æ–¥–æ–π
3. –í–∞—Ä–∏—Ç–µ 25 –º–∏–Ω—É—Ç –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üå± –ß–µ—á–µ–≤–∏—Ü–∞ - –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
üåø –®–∞–ª—Ñ–µ–π —É–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è –º–æ–∑–≥–∞"""
        return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–ë–ï–î", fallback, "lunch")

    def generate_planning_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–∏–Ω–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –∏ –≥–æ—Ç–æ–≤–∏—Ç –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –≤—ã—Ö–æ–¥–Ω—ã–º.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–£–∂–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ö–∞–æ—Å –Ω–µ–¥–µ–ª–∏ –≤ —è—Å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"

üî¨ –ö–û–ì–ù–ò–¢–ò–í–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:
- üß† –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è
- üí° –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
- üò¥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É
- üõ°Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üìä –£–ñ–ò–ù –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø", content, "dinner")
        
        fallback = """üçõ –†–∞–≥—É –∏–∑ –∏–Ω–¥–µ–π–∫–∏ —Å –æ–≤–æ—â–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü¶É –§–∏–ª–µ –∏–Ω–¥–µ–π–∫–∏ - 150 –≥
‚Ä¢ ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏ - 200 –≥
‚Ä¢ ü•¨ –¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞ - 200 –≥
‚Ä¢ üßÑ –ß–µ—Å–Ω–æ–∫ - 2 –∑—É–±—á–∏–∫–∞
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —Å—Ç.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –û–±–∂–∞—Ä—å—Ç–µ –∏–Ω–¥–µ–π–∫—É —Å —á–µ—Å–Ω–æ–∫–æ–º 10 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –æ–≤–æ—â–∏ –∏ —Ç—É—à–∏—Ç–µ 20 –º–∏–Ω—É—Ç
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –∑–µ–ª–µ–Ω—å—é

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
ü¶É –ò–Ω–¥–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏–ø—Ç–æ—Ñ–∞–Ω –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞
ü•¶ –û–≤–æ—â–∏ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞
üßÑ –ß–µ—Å–Ω–æ–∫ - –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        return self.formatter.format_philosophy_content("üìä –£–ñ–ò–ù –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø", fallback, "dinner")

    # üõí –£–ú–ù–´–ï –ü–û–ö–£–ü–ö–ò - –°–£–ë–ë–û–¢–ê
    def generate_smart_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
        season = self._get_current_season()
        
        shopping_list = f"""üõí –£–ú–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ù–ê –ù–ï–î–ï–õ–Æ

üéØ –û—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è + —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ({season})

üß† –î–õ–Ø –ú–û–ó–ì–ê –ò –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´:
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 200 –≥
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 3-4 —à—Ç
‚Ä¢ üêü –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ (–ª–æ—Å–æ—Å—å, —Å–∫—É–º–±—Ä–∏—è) - 500 –≥
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 10 —à—Ç
‚Ä¢ üç´ –¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ 85% - 100 –≥

üí™ –î–õ–Ø –≠–ù–ï–†–ì–ò–ò –ò –¢–û–ù–£–°–ê:
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 500 –≥
‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 1 –∫–≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 100 –≥
‚Ä¢ üçó –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 1 –∫–≥
‚Ä¢ üåæ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 500 –≥

üõ°Ô∏è –î–õ–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø:
‚Ä¢ üü° –ö—É—Ä–∫—É–º–∞ - 50 –≥
‚Ä¢ üü† –ò–º–±–∏—Ä—å - 100 –≥
‚Ä¢ üßÑ –ß–µ—Å–Ω–æ–∫ - 3 –≥–æ–ª–æ–≤–∫–∏
‚Ä¢ üçì –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 500 –≥
‚Ä¢ ü•¨ –ó–µ–ª–µ–Ω—ã–µ –æ–≤–æ—â–∏ - 1 –∫–≥

üçΩÔ∏è –î–õ–Ø –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ù–ê–°–õ–ê–ñ–î–ï–ù–ò–Ø:
‚Ä¢ üå∂Ô∏è –°–ø–µ—Ü–∏–∏ (–∫–æ—Ä–∏—Ü–∞, –∫–∞—Ä–¥–∞–º–æ–Ω, –º—É—Å–∫–∞—Ç)
‚Ä¢ üçØ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–µ–¥ - 300 –≥
‚Ä¢ ü•• –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ - 400 –º–ª
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 500 –º–ª

üí° –°–û–í–ï–¢–´ –û–¢ –®–ï–§-–ü–û–í–ê–†–ê:
‚Ä¢ üõí –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ üìñ –ß–∏—Ç–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã - –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
‚Ä¢ ‚ùÑÔ∏è –•—Ä–∞–Ω–∏—Ç–µ –æ—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ

üéØ –§–ò–õ–û–°–û–§–ò–Ø –ü–û–ö–£–ü–û–ö:
–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!

#—á–µ–∫–ª–∏—Å—Ç #—É–º–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏ #{season}"""
        
        return shopping_list

    def _get_current_season(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"

    # üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß
    def generate_sunday_brunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±—Ä–∞–Ω—á–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –±—Ä–∞–Ω—á–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∏—Ç—É–∞–ª–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á - —Ç–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –Ω–µ–¥–µ–ª–∏"

üé® –≠–õ–ï–ú–ï–ù–¢–´ –†–ò–¢–£–ê–õ–ê:
- –ë–ª—é–¥–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
- –°–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
- –¢–µ—Ö–Ω–∏–∫–∏, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ", content, "brunch")
        
        fallback = """ü•û –ü–∞–Ω–∫–µ–π–∫–∏ –∏–∑ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π –º—É–∫–∏ —Å —è–≥–æ–¥–Ω—ã–º —Å–æ—É—Å–æ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üåæ –ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è - 150 –≥
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•õ –ö–µ—Ñ–∏—Ä - 200 –º–ª
‚Ä¢ üß™ –†–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å - 1 —á.–ª.
‚Ä¢ üçì –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 200 –≥
‚Ä¢ üçØ –ú–µ–¥ - 2 —Å—Ç.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –°–º–µ—à–∞–π—Ç–µ —Å—É—Ö–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
2. –î–æ–±–∞–≤—å—Ç–µ —è–π—Ü–∞ –∏ –∫–µ—Ñ–∏—Ä, –∑–∞–º–µ—Å–∏—Ç–µ —Ç–µ—Å—Ç–æ
3. –ñ–∞—Ä—å—Ç–µ –Ω–∞ –∞–Ω—Ç–∏–ø—Ä–∏–≥–∞—Ä–Ω–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ –ø–æ 2-3 –º–∏–Ω—É—Ç—ã —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
4. –î–ª—è —Å–æ—É—Å–∞ —Ä–∞–∑–æ–≥—Ä–µ–π—Ç–µ —è–≥–æ–¥—ã —Å –º–µ–¥–æ–º

üí° –†–ò–¢–£–ê–õ –û–°–û–ó–ù–ê–ù–ù–û–°–¢–ò: –ì–æ—Ç–æ–≤—å—Ç–µ –≤ —Ç–∏—à–∏–Ω–µ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏. –≠—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—ã—â–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ, –Ω–æ –∏ –¥—É—à—É."""
        return self.formatter.format_philosophy_content("üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ", fallback, "brunch")

    # üî¨ –ù–ê–£–ß–ù–´–ô –ö–û–ù–¢–ï–ù–¢
    def generate_science_content(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompt = """–ü—Ä–µ–¥—Å—Ç–∞–≤—å –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –∂–µ.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ù–∞—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ç–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –µ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –¢–æ–ª—å–∫–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –¥–µ–π—Å—Ç–≤–∏—è
- –û–ø–æ—Ä–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üî¨ –ù–ê–£–ö–ê –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø", content, "science")
        
        fallback = """üèÜ –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç: –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞—É—Ç–æ—Ñ–∞–≥–∏—é

üéØ –ß–¢–û –≠–¢–û –¢–ê–ö–û–ï: –ê—É—Ç–æ—Ñ–∞–≥–∏—è - –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—â–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ—Ç–∫—Ä—ã—Ç—ã–π —è–ø–æ–Ω—Å–∫–∏–º —É—á–µ–Ω—ã–º –Å—Å–∏–Ω–æ—Ä–∏ –û—Å—É–º–∏ (–ù–æ–±–µ–ª–µ–≤—Å–∫–∞—è –ø—Ä–µ–º–∏—è 2016).

üî¨ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢: –ü—Ä–∏ 16-—á–∞—Å–æ–≤–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∫–ª–µ—Ç–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç "–ø–æ–µ–¥–∞—Ç—å" —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –±–µ–ª–∫–∏ –∏ –æ—Ä–≥–∞–Ω–µ–ª–ª—ã, –æ–±–Ω–æ–≤–ª—è—è—Å—å –Ω–∞ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–º —É—Ä–æ–≤–Ω–µ.

üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–∫–æ–Ω—á–∏—Ç—å —É–∂–∏–Ω –≤ 20:00 –∏ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –≤ 12:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –≠–§–§–ï–ö–¢: –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è, —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üí° –ü–†–û–°–¢–´–ï –®–ê–ì–ò: –ù–∞—á–Ω–∏—Ç–µ —Å 12-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–æ 16 —á–∞—Å–æ–≤."""
        return self.formatter.format_philosophy_content("üî¨ –ù–ê–£–ö–ê –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø", fallback, "science")

    # üí° –°–û–í–ï–¢–´ –≠–ö–°–ü–ï–†–¢–û–í
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        prompt = """–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–∏–Ω—Ü–∏–ø –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.

üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†: "–ü—Ä–∏–Ω—Ü–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–¥—É –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞"

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–†–ò–ù–¶–ò–ü–£:
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
- –ù–∞—É—á–Ω–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è
- –ì–ª—É–±–∏–Ω–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", content, "advice")
        
        fallback = """üéØ –ü—Ä–∏–Ω—Ü–∏–ø: "–ï—à—å—Ç–µ —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏"

üéØ –§–û–†–ú–£–õ–ò–†–û–í–ö–ê: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏ - –∫—Ä–∞—Å–Ω—ã–µ, –æ—Ä–∞–Ω–∂–µ–≤—ã–µ, –∂–µ–ª—Ç—ã–µ, –∑–µ–ª–µ–Ω—ã–µ, —Å–∏–Ω–∏–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ.

üî¨ –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏—Ç–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:
‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–µ - –ª–∏–∫–æ–ø–∏–Ω (–ø—Ä–æ—Ç–∏–≤ —Ä–∞–∫–∞)
‚Ä¢ üü† –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω (–∑—Ä–µ–Ω–∏–µ)
‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–µ - –ª—é—Ç–µ–∏–Ω (–º–æ–∑–≥)
‚Ä¢ üîµ –°–∏–Ω–∏–µ - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã (—Å–µ—Ä–¥—Ü–µ)

üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï: –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –æ–±–µ–¥ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º - —Å–∞–ª–∞—Ç –∏–∑ –ø–æ–º–∏–¥–æ—Ä–æ–≤, –º–æ—Ä–∫–æ–≤–∏, –ø–µ—Ä—Ü–∞, –æ–≥—É—Ä—Ü–æ–≤ –∏ –∫–∞–ø—É—Å—Ç—ã.

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´: –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üí° –ü–†–û–°–¢–û–ô –®–ê–ì: –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏."""
        return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", fallback, "advice")

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤
class ContentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    @staticmethod
    def get_content_for_time(kemerovo_time_str, weekday):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        hour = int(kemerovo_time_str.split(':')[0])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 5 <= hour < 11:  # 05:00 - 10:59 - –∑–∞–≤—Ç—Ä–∞–∫
            meal_type = "breakfast"
        elif 11 <= hour < 16:  # 11:00 - 15:59 - –æ–±–µ–¥
            meal_type = "lunch" 
        elif 16 <= hour < 18:  # 16:00 - 17:59 - –ø–æ–ª–¥–Ω–∏–∫/–¥–µ—Å–µ—Ä—Ç
            meal_type = "dessert"
        else:  # 18:00 - 04:59 - —É–∂–∏–Ω
            meal_type = "dinner"
        
        # –ü–û–õ–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∞–º –ø–∏—â–∏
        content_mapping = {
            'monday': {
                'breakfast': 'generate_neuro_breakfast',
                'lunch': 'generate_neuro_lunch',
                'dessert': 'generate_neuro_dessert',
                'dinner': 'generate_neuro_dinner'
            },
            'tuesday': {
                'breakfast': 'generate_energy_breakfast',
                'lunch': 'generate_energy_lunch',
                'dessert': 'generate_neuro_dessert',
                'dinner': 'generate_recovery_dinner'
            },
            'wednesday': {
                'breakfast': 'generate_longevity_breakfast',
                'lunch': 'generate_longevity_lunch',
                'dessert': 'generate_neuro_dessert', 
                'dinner': 'generate_longevity_dinner'
            },
            'thursday': {
                'breakfast': 'generate_gastronomy_breakfast',
                'lunch': 'generate_gastronomy_lunch',
                'dessert': 'generate_neuro_dessert',
                'dinner': 'generate_gastronomy_dinner'
            },
            'friday': {
                'breakfast': 'generate_analytical_breakfast', 
                'lunch': 'generate_analytical_lunch',
                'dessert': 'generate_neuro_dessert',
                'dinner': 'generate_planning_dinner'
            },
            'saturday': {
                'breakfast': 'generate_energy_breakfast',
                'lunch': 'generate_gastronomy_lunch',
                'dessert': 'generate_neuro_dessert',
                'dinner': 'generate_gastronomy_dinner'
            },
            'sunday': {
                'breakfast': 'generate_sunday_brunch',
                'lunch': 'generate_gastronomy_lunch',  
                'dessert': 'generate_neuro_dessert',
                'dinner': 'generate_planning_dinner'
            }
        }
        
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day_key = days[weekday]
        
        return content_mapping.get(day_key, {}).get(meal_type, 'generate_energy_breakfast')

    @staticmethod
    def get_current_meal_type():
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ö–µ–º–µ—Ä–æ–≤–æ"""
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        hour = kemerovo_now.hour
        
        if 5 <= hour < 11:
            return "breakfast", "üç≥ –ó–∞–≤—Ç—Ä–∞–∫"
        elif 11 <= hour < 16:
            return "lunch", "üç≤ –û–±–µ–¥"
        elif 16 <= hour < 18:
            return "dessert", "üç∞ –î–µ—Å–µ—Ä—Ç"
        else:
            return "dinner", "üçΩÔ∏è –£–∂–∏–Ω"

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
class ContentScheduler:
    def __init__(self):
        # –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –≤ –≤—Ä–µ–º–µ–Ω–∏ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)
        self.kemerovo_schedule = {
            'monday': {
                "07:00": {"type": "neuro_breakfast", "name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞"},
                "12:00": {"type": "neuro_lunch", "name": "üéØ –ù–µ–π—Ä–æ-–æ–±–µ–¥ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"},
                "16:00": {"type": "brain_science", "name": "üî¨ –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–æ–∑–≥–µ –∏ –ø–∏—Ç–∞–Ω–∏–∏"},
                "17:00": {"type": "neuro_dessert", "name": "üç´ –£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"},
                "19:00": {"type": "neuro_dinner", "name": "üåô –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π –Ω–µ–π—Ä–æ-—É–∂–∏–Ω –¥–ª—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"},
                "21:00": {"type": "evening_biohack", "name": "üí´ –í–µ—á–µ—Ä–Ω–∏–π –±–∏–æ—Ö–∞–∫–∏–Ω–≥ –¥–ª—è –º–æ–∑–≥–∞"}
            },
            'tuesday': {
                "07:00": {"type": "energy_breakfast", "name": "‚ö° –≠–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"},
                "12:00": {"type": "energy_lunch", "name": "‚ö° –≠–Ω–µ—Ä–≥–æ-–æ–±–µ–¥ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"},
                "16:00": {"type": "energy_science", "name": "üî¨ –ù–∞—É–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞"},
                "17:00": {"type": "energy_dessert", "name": "üçì –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç"},
                "19:00": {"type": "recovery_dinner", "name": "üí™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —É–∂–∏–Ω –¥–ª—è –º—ã—à—Ü"},
                "21:00": {"type": "energy_tips", "name": "üí° –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"}
            },
            'wednesday': {
                "07:00": {"type": "longevity_breakfast", "name": "üõ°Ô∏è –ó–∞–≤—Ç—Ä–∞–∫ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è"},
                "12:00": {"type": "longevity_lunch", "name": "üõ°Ô∏è –û–±–µ–¥ –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"},
                "16:00": {"type": "longevity_science", "name": "üî¨ –ù–∞—É–∫–∞ anti-age –ø–∏—Ç–∞–Ω–∏—è"},
                "17:00": {"type": "anti_age_dessert", "name": "üçá –ê–Ω—Ç–∏—ç–π–¥–∂ –¥–µ—Å–µ—Ä—Ç"},
                "19:00": {"type": "longevity_dinner", "name": "üõ°Ô∏è –£–∂–∏–Ω –¥–ª—è –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"},
                "21:00": {"type": "longevity_principles", "name": "üí° –ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"}
            },
            'thursday': {
                "07:00": {"type": "gastronomy_breakfast", "name": "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"},
                "12:00": {"type": "gastronomy_lunch", "name": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –æ–±–µ–¥ —Å –ø–æ–ª—å–∑–æ–π"},
                "16:00": {"type": "taste_science", "name": "üî¨ –ù–∞—É–∫–∞ –≤–∫—É—Å–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è"},
                "17:00": {"type": "michelin_dessert", "name": "üé≠ –®–µ—Ñ-–¥–µ—Å–µ—Ä—Ç –æ—Ç –ú–∏—à–ª–µ–Ω"},
                "19:00": {"type": "gastronomy_dinner", "name": "üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω"},
                "21:00": {"type": "enjoyment_principles", "name": "üí° –ò—Å–∫—É—Å—Å—Ç–≤–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è"}
            },
            'friday': {
                "07:00": {"type": "analytical_breakfast", "name": "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"},
                "12:00": {"type": "analytical_lunch", "name": "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–µ–¥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"},
                "16:00": {"type": "results_science", "name": "üî¨ –ù–∞—É–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Ç–∞–Ω–∏—è"},
                "17:00": {"type": "reflection_dessert", "name": "üçç –î–µ—Å–µ—Ä—Ç –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"},
                "19:00": {"type": "planning_dinner", "name": "üìä –£–∂–∏–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ"},
                "21:00": {"type": "weekly_planning", "name": "üí° –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"}
            },
            'saturday': {
                "07:00": {"type": "weekend_breakfast", "name": "ü•ó –°—É–±–±–æ—Ç–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è —Å–µ–º—å–∏"},
                "10:00": {"type": "shopping_list", "name": "üõí –£–º–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é"},
                "12:00": {"type": "family_lunch", "name": "üç≤ –°–µ–º–µ–π–Ω—ã–π –æ–±–µ–¥"},
                "15:00": {"type": "visual_content", "name": "üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞)"},
                "17:00": {"type": "weekend_dessert", "name": "üßÅ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç"},
                "19:00": {"type": "weekend_dinner", "name": "üåô –°—É–±–±–æ—Ç–Ω–∏–π —É–∂–∏–Ω"},
                "21:00": {"type": "weekend_tips", "name": "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö"}
            },
            'sunday': {
                "07:00": {"type": "sunday_brunch", "name": "üç≥ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á-—Ä–∏—Ç—É–∞–ª"},
                "12:00": {"type": "sunday_lunch", "name": "ü•ò –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥"},
                "17:00": {"type": "sunday_dessert", "name": "üçÆ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç"},
                "18:00": {"type": "sunday_dinner", "name": "üåô –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π —É–∂–∏–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –Ω–µ–¥–µ–ª–µ"},
                "21:00": {"type": "weekly_motivation", "name": "üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é"}
            }
        }
        
        self.is_running = False
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")

    def _schedule_daily_content(self, day, server_time, event):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        def job():
            try:
                current_times = TimeZoneConverter.get_current_times()
                logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['name']} –≤ {current_times['kemerovo_time']}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
                kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
                weekday = kemerovo_now.weekday()
                current_time_str = kemerovo_now.strftime('%H:%M')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ContentManager
                method_name = ContentManager.get_content_for_time(current_time_str, weekday)
                
                if hasattr(content_gen, method_name):
                    method = getattr(content_gen, method_name)
                    content = method()
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥: {method_name} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {current_time_str}")
                else:
                    logger.error(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    content = content_gen.generate_energy_breakfast()  # Fallback
                
                if content:
                    meal_type, meal_name = ContentManager.get_current_meal_type()
                    content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']} ({meal_name})"
                    success = elite_channel.send_to_telegram(content_with_time)
                    if success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['name']} -> {method_name}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {event['name']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
        day_mapping = {
            'monday': schedule.every().monday,
            'tuesday': schedule.every().tuesday,
            'wednesday': schedule.every().wednesday,
            'thursday': schedule.every().thursday,
            'friday': schedule.every().friday,
            'saturday': schedule.every().saturday,
            'sunday': schedule.every().sunday
        }
        
        if day in day_mapping:
            day_mapping[day].at(server_time).do(job)
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {day} {server_time} - {event['name']}")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day}")

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for day, day_schedule in self.kemerovo_schedule.items():
            for kemerovo_time, event in day_schedule.items():
                server_time = TimeZoneConverter.kemerovo_to_server_time(kemerovo_time)
                if server_time:
                    self._schedule_daily_content(day, server_time, event)
                    logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {day} - –ö–µ–º–µ—Ä–æ–≤–æ {kemerovo_time} -> –°–µ—Ä–≤–µ—Ä {server_time} - {event['name']}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        self._schedule_analytics_reports()
        
        self.is_running = True
        self._run_scheduler()

    def _schedule_analytics_reports(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        public_report_time = TimeZoneConverter.kemerovo_to_server_time("09:00")
        
        def public_analytics_job():
            try:
                logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                report = channel_analytics.generate_public_report()
                elite_channel.send_to_telegram(report)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        
        if public_report_time:
            schedule.every().day.at(public_report_time).do(public_analytics_job)
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ {public_report_time}")

    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        def run_scheduler():
            while self.is_running:
                try:
                    schedule.run_pending()
                    time.sleep(60)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                    time.sleep(60)
        
        thread = Thread(target=run_scheduler, daemon=True)
        thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")

    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        try:
            current_kemerovo = datetime.now(Config.KEMEROVO_TIMEZONE)
            current_time_str = current_kemerovo.strftime('%H:%M')
            current_weekday = current_kemerovo.weekday()
            
            days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            current_day = days[current_weekday]
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
            today_schedule = self.kemerovo_schedule.get(current_day, {})
            times_today = sorted([t for t in today_schedule.keys() if t >= current_time_str])
            
            if times_today:
                next_kemerovo_time = times_today[0]
                next_event = today_schedule[next_kemerovo_time]
                next_server_time = TimeZoneConverter.kemerovo_to_server_time(next_kemerovo_time)
                return next_server_time, next_kemerovo_time, next_event
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –∏—â–µ–º –∑–∞–≤—Ç—Ä–∞
            next_weekday = (current_weekday + 1) % 7
            next_day = days[next_weekday]
            next_day_schedule = self.kemerovo_schedule.get(next_day, {})
            
            if next_day_schedule:
                next_kemerovo_time = min(next_day_schedule.keys())
                next_event = next_day_schedule[next_kemerovo_time]
                next_server_time = TimeZoneConverter.kemerovo_to_server_time(next_kemerovo_time)
                return next_server_time, next_kemerovo_time, next_event
            
            return "17:00", "17:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "unknown"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
            return "17:00", "17:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "unknown"}

    def _get_day_theme(self, weekday):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        themes = {
            0: "üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ - —Ñ–æ–∫—É—Å –Ω–∞ –º–æ–∑–≥ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            1: "üí™ –≠–Ω–µ—Ä–≥–∏—è –∏ —Ç–æ–Ω—É—Å - –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", 
            2: "üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–π –¥–æ–ª–≥–æ–π –∂–∏–∑–Ω–∏",
            3: "üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ - –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å —Å –ø–æ–ª—å–∑–æ–π",
            4: "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–ª–∞–Ω—ã",
            5: "üõí –£–º–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ + —Ä–µ—Ü–µ–ø—Ç—ã - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ–¥–µ–ª–µ",
            6: "üç≥ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã - –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é"
        }
        return themes.get(weekday, "üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    elite_channel = EliteChannel()
    content_gen = ContentGenerator()
    content_scheduler = ContentScheduler()
    channel_analytics = ChannelAnalytics(Config.TELEGRAM_BOT_TOKEN, Config.TELEGRAM_CHANNEL)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    content_scheduler.start_scheduler()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeZoneConverter.get_current_times()
    logger.info(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}")
    logger.info(f"üåç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
    member_count = channel_analytics.get_member_count()
    logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}")
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    exit(1)

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        next_server_time, next_kemerovo_time, next_event = content_scheduler.get_next_event()
        connection_info = elite_channel.test_connection()
        current_times = TimeZoneConverter.get_current_times()
        member_count = channel_analytics.get_member_count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        current_weekday = datetime.now(Config.KEMEROVO_TIMEZONE).weekday()
        current_day_name = weekday_names[current_weekday]
        
        html = f"""
        <html>
            <head>
                <title>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
                    .container {{ max-width: 1200px; margin: 0 auto; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
                    .stats-card {{ background: #3498db; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .time-info {{ background: #27ae60; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; border: none; cursor: pointer; }}
                    .btn-danger {{ background: #e74c3c; }}
                    .btn-success {{ background: #27ae60; }}
                    .btn-warning {{ background: #f39c12; }}
                    .btn-info {{ background: #17a2b8; }}
                    .content-section {{ background: white; padding: 20px; border-radius: 10px; margin: 20px 0; }}
                    .quick-actions {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 20px 0; }}
                    .content-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin: 20px 0; }}
                    .form-group {{ margin: 10px 0; }}
                    input, textarea, select {{ width: 100%; padding: 10px; margin: 5px 0; border: 1px solid #ddd; border-radius: 5px; }}
                    .day-info {{ background: #9b59b6; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .diagnosis-result {{ background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 10px 0; }}
                    .check-item {{ margin: 5px 0; padding: 5px; border-radius: 3px; }}
                    .check-success {{ background: #d4edda; color: #155724; }}
                    .check-error {{ background: #f8d7da; color: #721c24; }}
                    .check-warning {{ background: #fff3cd; color: #856404; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üé™ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                        <p>üéØ –§–ò–õ–û–°–û–§–ò–Ø: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å</p>
                    </div>
                    
                    <div class="day-info">
                        <h2>üìÖ –°–µ–≥–æ–¥–Ω—è: {current_day_name}</h2>
                        <p>üéØ –¢–µ–º–∞ –¥–Ω—è: {content_scheduler._get_day_theme(current_weekday)}</p>
                    </div>
                    
                    <div class="quick-actions">
                        <button class="btn" onclick="testChannel()">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
                        <button class="btn" onclick="testConnection()">–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</button>
                        <button class="btn btn-info" onclick="diagnoseChannel()">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</button>
                        <button class="btn" onclick="showDebug()">–û—Ç–ª–∞–¥–∫–∞</button>
                        <button class="btn" onclick="healthCheck()">Health Check</button>
                        <button class="btn" onclick="showFormatPreview()">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞</button>
                        <button class="btn" onclick="sendPoll()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å</button>
                        <button class="btn" onclick="sendVisualContent()">–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</button>
                        <button class="btn" onclick="sendShoppingList()">–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫</button>
                        <button class="btn btn-success" onclick="sendPublicReport()">üì® –û—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</button>
                    </div>
                    
                    <div class="content-section">
                        <h2>üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
                        <div class="content-grid">
                            <button class="btn" onclick="sendContent('breakfast')">üç≥ –ó–∞–≤—Ç—Ä–∞–∫</button>
                            <button class="btn" onclick="sendContent('lunch')">üç≤ –û–±–µ–¥</button>
                            <button class="btn" onclick="sendContent('science')">üî¨ –ù–∞—É–∫–∞</button>
                            <button class="btn" onclick="sendContent('interval')">‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª</button>
                            <button class="btn" onclick="sendContent('dinner')">üçΩÔ∏è –£–∂–∏–Ω</button>
                            <button class="btn" onclick="sendContent('advice')">üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</button>
                        </div>
                        
                        <div class="form-group">
                            <h3>‚úçÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                            <textarea id="manualContent" rows="6" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram..."></textarea>
                            <button class="btn btn-success" onclick="sendManualContent()">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª</button>
                        </div>
                    </div>
                    
                    <div id="diagnosisResult" class="diagnosis-result" style="display: none;">
                        <h3>üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞</h3>
                        <div id="diagnosisContent"></div>
                    </div>
                    
                    <div class="stats-card">
                        <h2>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</h2>
                        <p><strong>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}</strong></p>
                        <p><strong>üìà –ö–æ–Ω—Ç–µ–Ω—Ç: 45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è</strong></p>
                        <p><strong>üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</strong></p>
                    </div>
                    
                    <div class="time-info">
                        <h3>üåç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–†–ï–ú–ï–ù–ò</h3>
                        <p>–°–µ—Ä–≤–µ—Ä: <strong>{current_times['server_time']}</strong> ‚Ä¢ –ö–µ–º–µ—Ä–æ–≤–æ: <strong>{current_times['kemerovo_time']}</strong></p>
                        <p>–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: <strong>{next_kemerovo_time} - {next_event['name']}</strong></p>
                    </div>
                </div>

                <script>
                    function testConnection() {{
                        fetch('/test-channel')
                            .then(response => response.json())
                            .then(data => alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function healthCheck() {{
                        fetch('/health')
                            .then(response => response.json())
                            .then(data => alert('–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ' + (data.status === 'healthy' ? '‚úÖ –ó–¥–æ—Ä–æ–≤–∞' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã')));
                    }}

                    function showDebug() {{
                        fetch('/debug')
                            .then(response => response.json())
                            .then(data => alert('–û—Ç–ª–∞–¥–∫–∞: ' + JSON.stringify(data, null, 2)));
                    }}

                    function testChannel() {{
                        fetch('/test-channel')
                            .then(response => response.json())
                            .then(data => alert('–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function diagnoseChannel() {{
                        fetch('/diagnose-channel')
                            .then(response => response.json())
                            .then(data => {{
                                const resultDiv = document.getElementById('diagnosisResult');
                                const contentDiv = document.getElementById('diagnosisContent');
                                
                                let html = `<h4>${data.summary}</h4>`;
                                html += `<p><strong>–í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</strong> ${data.timestamp}</p>`;
                                html += `<h5>–ü—Ä–æ–≤–µ—Ä–∫–∏:</h5>`;
                                
                                data.checks.forEach(check => {{
                                    let statusClass = 'check-warning';
                                    if (check.status.includes('‚úÖ')) statusClass = 'check-success';
                                    if (check.status.includes('‚ùå')) statusClass = 'check-error';
                                    
                                    html += `<div class="check-item ${statusClass}">
                                        <strong>${check.check}</strong>: ${check.status} - ${check.details}
                                    </div>`;
                                }});
                                
                                contentDiv.innerHTML = html;
                                resultDiv.style.display = 'block';
                                
                                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                                resultDiv.scrollIntoView({{ behavior: 'smooth' }});
                            }});
                    }}

                    function sendPublicReport() {{
                        fetch('/send-public-report')
                            .then(response => response.json())
                            .then(data => alert('–û—Ç—á–µ—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendPoll() {{
                        fetch('/send-poll')
                            .then(response => response.json())
                            .then(data => alert('–û–ø—Ä–æ—Å: ' + (data.status === 'success' ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendVisualContent() {{
                        fetch('/send-visual-content')
                            .then(response => response.json())
                            .then(data => alert('–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendShoppingList() {{
                        fetch('/send-shopping-list')
                            .then(response => response.json())
                            .then(data => alert('–ß–µ–∫-–ª–∏—Å—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function showFormatPreview() {{
                        fetch('/format-preview')
                            .then(response => response.json())
                            .then(data => {{
                                if (data.status === 'success') {{
                                    alert('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª');
                                }} else {{
                                    alert('–û—à–∏–±–∫–∞: ' + data.message);
                                }}
                            }});
                    }}

                    function sendContent(type) {{
                        const endpoints = {{
                            'breakfast': '/send-breakfast',
                            'lunch': '/send-lunch', 
                            'science': '/send-science',
                            'interval': '/send-interval',
                            'dinner': '/send-dinner',
                            'advice': '/send-advice'
                        }};

                        if (endpoints[type]) {{
                            fetch(endpoints[type])
                                .then(response => response.json())
                                .then(data => alert('–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')));
                        }}
                    }}

                    function sendManualContent() {{
                        const content = document.getElementById('manualContent').value;
                        if (!content) {{
                            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
                            return;
                        }}

                        fetch('/send-manual-content', {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json',
                            }},
                            body: JSON.stringify({{ content: content }})
                        }})
                        .then(response => response.json())
                        .then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª');
                                document.getElementById('manualContent').value = '';
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                            }}
                        }});
                    }}
                </script>
            </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@app.route('/send-public-report')
def send_public_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        report = channel_analytics.generate_public_report()
        success = elite_channel.send_to_telegram(report)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    current_times = TimeZoneConverter.get_current_times()
    test_message = f"""üé™ –ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø –ß–ï–†–ï–ó –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï

üéØ –¢–ï–°–¢: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º!

üéØ –ù–æ–≤–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:

üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ - –ø–∏—â–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞
üí™ –≠–Ω–µ—Ä–≥–∏—è - —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π  
üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–π –∂–∏–∑–Ω–∏
üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è - –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–π

ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è
üí´ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏

üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å!

üïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"""
    
    success = elite_channel.send_to_telegram(test_message)
    return jsonify({"status": "success" if success else "error"})

@app.route('/diagnose-channel')
def diagnose_channel():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        diagnosis = elite_channel.diagnose_channel()
        return jsonify(diagnosis)
    except Exception as e:
        return jsonify({
            "status": "error",
            "checks": [{"check": "–û–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"}],
            "summary": "‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    connection = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    member_count = channel_analytics.get_member_count()
    
    return jsonify({
        "status": "healthy",
        "philosophy": "üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è —á–µ—Ä–µ–∑ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ü–∏—Ç–∞–Ω–∏–µ",
        "member_count": member_count,
        "scheduler_running": content_scheduler.is_running,
        "time_info": current_times
    })

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    connection_test = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    member_count = channel_analytics.get_member_count()
    
    return jsonify({
        "status": "active",
        "philosophy": "üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
        "content_plan": "45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è",
        "member_count": member_count,
        "scheduler_status": "running" if content_scheduler.is_running else "stopped",
        "time_info": current_times
    })

@app.route('/send-poll')
def send_poll():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞"""
    try:
        success = elite_channel.send_poll()
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-visual-content')
def send_visual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        success = elite_channel.send_visual_content()
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-shopping-list')
def send_shopping_list():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
    try:
        content = content_gen.generate_smart_shopping_list()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/format-preview')
def format_preview():
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        preview_content = """üé™ –ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø –ß–ï–†–ï–ó –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï

üéØ –°—Ç–∞–Ω—å—Ç–µ –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è, –∫–æ—Ç–æ—Ä–æ–π –≤–æ—Å—Ö–∏—â–∞–µ—Ç–µ—Å—å

üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê

ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ ü•¨ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–æ–º—Ç–∏–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï: 
ü•ë –ê–≤–æ–∫–∞–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–º–µ–≥–∞-9 –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤
ü•¨ –®–ø–∏–Ω–∞—Ç - –ª—é—Ç–µ–∏–Ω –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π  
üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏

---
üí´ –í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç - –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é

üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! ‚Üí @ppsupershef
üí¨ –û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! ‚Üí @ppsupershef_chat

üòã –≤–∫—É—Å–Ω–æ | üí™ –ø–æ–ª–µ–∑–Ω–æ | üë®‚Äçüç≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é | üìù –∑–∞–ø–∏—à—É —Å–µ–±–µ | üìö –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã

üîÑ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! ‚Üí @ppsupershef"""
        
        success = elite_channel.send_to_telegram(preview_content)
        return jsonify({"status": "success" if success else "error", "message": "–§–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@app.route('/send-breakfast')
def send_breakfast():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        weekday = kemerovo_now.weekday()
        
        method_name = ContentManager.get_content_for_time("07:00", weekday)
        method = getattr(content_gen, method_name)
        content = method()
        
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error", "method": method_name})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-lunch')
def send_lunch():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–µ–¥–∞"""
    try:
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        weekday = kemerovo_now.weekday()
        
        method_name = ContentManager.get_content_for_time("12:00", weekday)
        method = getattr(content_gen, method_name)
        content = method()
        
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error", "method": method_name})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-science')
def send_science():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content = content_gen.generate_science_content()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-interval')
def send_interval():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"""
    try:
        content = content_gen.generate_expert_advice()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-dinner')
def send_dinner():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–∏–Ω–∞"""
    try:
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        weekday = kemerovo_now.weekday()
        
        method_name = ContentManager.get_content_for_time("19:00", weekday)
        method = getattr(content_gen, method_name)
        content = method()
        
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error", "method": method_name})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-advice')
def send_advice():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    try:
        content = content_gen.generate_expert_advice()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-manual-content', methods=['POST'])
def send_manual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        data = request.get_json()
        content = data.get('content', '')
        
        if not content:
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        current_times = TimeZoneConverter.get_current_times()
        content_with_footer = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = elite_channel.send_to_telegram(content_with_footer)
        return jsonify({"status": "success" if success else "error"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/webhook/telegram', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        data = request.get_json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram: {data}")
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error"})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"status": "error", "message": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {str(error)}")
    return jsonify({"status": "error", "message": "Internal server error"}), 500

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ö–ª—É–±–∞ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è —á–µ—Ä–µ–∑ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ü–∏—Ç–∞–Ω–∏–µ: @ppsupershef")
    logger.info(f"üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏")
    logger.info(f"üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 45 –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
