import os
import logging
import requests
import json
import time
import schedule
import hashlib
import re
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps
import sqlite3
from contextlib import contextmanager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    API_SECRET = os.getenv('API_SECRET', 'your-secret-key-here')
    MAX_REQUESTS_PER_MINUTE = 30
    RATE_LIMIT_WINDOW = 60
    
    # –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏
    SERVER_TZ = pytz.timezone('UTC')
    KEMEROVO_TZ = pytz.timezone('Asia/Novokuznetsk')
    
    # Render –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    RENDER_APP_URL = os.getenv('RENDER_APP_URL', '')

# –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ò–°–ê
class ServiceMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.request_count = 0
        self.last_keep_alive = None
        self.keep_alive_count = 0
    
    def increment_request(self):
        self.request_count += 1
    
    def update_keep_alive(self):
        self.last_keep_alive = datetime.now()
        self.keep_alive_count += 1
    
    def get_status(self):
        return {
            "status": "healthy",
            "uptime_seconds": (datetime.now() - self.start_time).total_seconds(),
            "requests_handled": self.request_count,
            "keep_alive_count": self.keep_alive_count,
            "last_keep_alive": self.last_keep_alive.isoformat() if self.last_keep_alive else None,
            "timestamp": datetime.now().isoformat()
        }

service_monitor = ServiceMonitor()

# –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ò –†–û–¢–ê–¶–ò–ò
class Database:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        with self.get_connection() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            conn.execute('''
                CREATE TABLE IF NOT EXISTS content_cache (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_hash TEXT UNIQUE,
                    content_type TEXT,
                    content_text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
            conn.execute('''
                CREATE TABLE IF NOT EXISTS channel_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    member_count INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            conn.execute('''
                CREATE TABLE IF NOT EXISTS recipe_rotation (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    recipe_type TEXT,
                    recipe_method TEXT,
                    last_used DATE,
                    use_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            conn.execute('''
                CREATE TABLE IF NOT EXISTS sent_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_hash TEXT UNIQUE,
                    message_text TEXT,
                    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    recipe_type TEXT
                )
            ''')
    
    @contextmanager
    def get_connection(self):
        conn = sqlite3.connect('channel.db', check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
            conn.commit()
        except Exception:
            conn.rollback()
            raise
        finally:
            conn.close()

# –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
class SecurityManager:
    _instance = None
    _lock = Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(SecurityManager, cls).__new__(cls)
                cls._instance.request_log = {}
                cls._instance.blocked_ips = set()
            return cls._instance
    
    def check_rate_limit(self, ip_address):
        current_time = time.time()
        if ip_address in self.blocked_ips:
            return False
        
        if ip_address not in self.request_log:
            self.request_log[ip_address] = []
        
        self.request_log[ip_address] = [
            req_time for req_time in self.request_log[ip_address]
            if current_time - req_time < Config.RATE_LIMIT_WINDOW
        ]
        
        if len(self.request_log[ip_address]) >= Config.MAX_REQUESTS_PER_MINUTE:
            self.blocked_ips.add(ip_address)
            logger.warning(f"üö® IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {ip_address}")
            return False
        
        self.request_log[ip_address].append(current_time)
        return True

def require_api_key(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key') or request.args.get('api_key')
        if not api_key or api_key != Config.API_SECRET:
            return jsonify({"status": "error", "message": "Invalid API key"}), 401
        return f(*args, **kwargs)
    return decorated_function

def rate_limit(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        service_monitor.increment_request()
        ip_address = request.remote_addr
        security_manager = SecurityManager()
        
        if not security_manager.check_rate_limit(ip_address):
            return jsonify({
                "status": "error", 
                "message": "Rate limit exceeded. Try again later."
            }), 429
        
        return f(*args, **kwargs)
    return decorated_function

# –°–ò–°–¢–ï–ú–ê –í–†–ï–ú–ï–ù–ò
class TimeManager:
    @staticmethod
    def kemerovo_to_server(kemerovo_time_str):
        try:
            today = datetime.now(Config.KEMEROVO_TZ).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TZ.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TZ)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str

    @staticmethod
    def get_current_times():
        server_now = datetime.now(Config.SERVER_TZ)
        kemerovo_now = datetime.now(Config.KEMEROVO_TZ)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_date': server_now.strftime('%Y-%m-%d'),
            'kemerovo_date': kemerovo_now.strftime('%Y-%m-%d')
        }

    @staticmethod
    def get_kemerovo_weekday():
        return datetime.now(Config.KEMEROVO_TZ).weekday()

# –°–ò–°–¢–ï–ú–ê –†–û–¢–ê–¶–ò–ò –†–ï–¶–ï–ü–¢–û–í
class RecipeRotationSystem:
    def __init__(self):
        self.db = Database()
        self.rotation_period = 90  # –¥–Ω–µ–π
        self.init_rotation_data()
    
    def init_rotation_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipe_methods = [
            # –ó–∞–≤—Ç—Ä–∞–∫–∏ (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_breakfast', 'generate_protein_breakfast', 'generate_veggie_breakfast',
            'generate_carbs_breakfast', 'generate_sunday_breakfast', 'generate_energy_breakfast',
            'generate_quinoa_breakfast', 'generate_buckwheat_breakfast', 'generate_tofu_breakfast',
            'generate_berry_smoothie', 'generate_savory_oatmeal', 'generate_egg_muffins',
            'generate_chia_pudding', 'generate_protein_pancakes', 'generate_avocado_toast',
            'generate_greek_yogurt_bowl', 'generate_sweet_potato_toast', 'generate_breakfast_burrito',
            'generate_rice_cakes', 'generate_cottage_cheese_bowl', 'generate_breakfast_quiche',
            'generate_protein_waffles', 'generate_breakfast_salad', 'generate_breakfast_soup',
            'generate_breakfast_tacos', 'generate_breakfast_pizza', 'generate_breakfast_sushi',
            'generate_breakfast_risotto', 'generate_breakfast_curry', 'generate_breakfast_stir_fry',
            
            # –û–±–µ–¥—ã (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_lunch', 'generate_protein_lunch', 'generate_veggie_lunch',
            'generate_carbs_lunch', 'generate_sunday_lunch', 'generate_mediterranean_lunch',
            'generate_asian_lunch', 'generate_soup_lunch', 'generate_bowl_lunch',
            'generate_wrap_lunch', 'generate_salad_lunch', 'generate_stir_fry_lunch',
            'generate_curry_lunch', 'generate_pasta_lunch', 'generate_rice_lunch',
            'generate_quinoa_lunch', 'generate_buckwheat_lunch', 'generate_lentil_lunch',
            'generate_fish_lunch', 'generate_chicken_lunch', 'generate_turkey_lunch',
            'generate_vegan_lunch', 'generate_detox_lunch', 'generate_energy_lunch',
            'generate_immunity_lunch', 'generate_focus_lunch', 'generate_recovery_lunch',
            'generate_metabolism_lunch', 'generate_anti_inflammatory_lunch', 'generate_low_carb_lunch',
            
            # –£–∂–∏–Ω—ã (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_dinner', 'generate_protein_dinner', 'generate_veggie_dinner',
            'generate_carbs_dinner', 'generate_sunday_dinner', 'generate_light_dinner',
            'generate_hearty_dinner', 'generate_quick_dinner', 'generate_meal_prep_dinner',
            'generate_sheet_pan_dinner', 'generate_one_pot_dinner', 'generate_slow_cooker_dinner',
            'generate_air_fryer_dinner', 'generate_grilled_dinner', 'generate_baked_dinner',
            'generate_stew_dinner', 'generate_casserole_dinner', 'generate_stir_fry_dinner',
            'generate_soup_dinner', 'generate_salad_dinner', 'generate_bowl_dinner',
            'generate_wrap_dinner', 'generate_taco_dinner', 'generate_pizza_dinner',
            'generate_pasta_dinner', 'generate_rice_dinner', 'generate_quinoa_dinner',
            'generate_buckwheat_dinner', 'generate_lentil_dinner', 'generate_vegetable_dinner',
            
            # –°–æ–≤–µ—Ç—ã (30 –º–µ—Ç–æ–¥–æ–≤)
            'generate_neuro_advice', 'generate_protein_advice', 'generate_veggie_advice',
            'generate_carbs_advice', 'generate_water_advice', 'generate_planning_advice',
            'generate_gut_health_advice', 'generate_metabolism_advice', 'generate_detox_advice',
            'generate_immunity_advice', 'generate_energy_advice', 'generate_sleep_advice',
            'generate_hormones_advice', 'generate_inflammation_advice', 'generate_longevity_advice',
            'generate_brain_health_advice', 'generate_heart_health_advice', 'generate_bone_health_advice',
            'generate_skin_health_advice', 'generate_weight_management_advice', 'generate_meal_timing_advice',
            'generate_supplements_advice', 'generate_hydration_advice', 'generate_fiber_advice',
            'generate_antioxidants_advice', 'generate_probiotics_advice', 'generate_omega3_advice',
            'generate_vitamins_advice', 'generate_minerals_advice', 'generate_phytochemicals_advice',
            
            # –î–µ—Å–µ—Ä—Ç—ã (15 –º–µ—Ç–æ–¥–æ–≤)
            'generate_friday_dessert', 'generate_saturday_dessert', 'generate_sunday_dessert',
            'generate_protein_dessert', 'generate_fruit_dessert', 'generate_chocolate_dessert',
            'generate_cheese_dessert', 'generate_frozen_dessert', 'generate_baked_dessert',
            'generate_no_bake_dessert', 'generate_low_sugar_dessert', 'generate_vegan_dessert',
            'generate_gluten_free_dessert', 'generate_quick_dessert', 'generate_healthy_dessert',
            
            # –°—É–±–±–æ—Ç–Ω—è—è –≥–æ—Ç–æ–≤–∫–∞ (13 –º–µ—Ç–æ–¥–æ–≤)
            'generate_family_cooking', 'generate_saturday_cooking_1', 'generate_saturday_cooking_2',
            'generate_saturday_cooking_3', 'generate_saturday_cooking_4', 'generate_saturday_cooking_5',
            'generate_saturday_cooking_6', 'generate_saturday_cooking_7', 'generate_saturday_cooking_8',
            'generate_saturday_cooking_9', 'generate_saturday_cooking_10', 'generate_saturday_cooking_11',
            'generate_saturday_cooking_12'
        ]
        
        with self.db.get_connection() as conn:
            for method in recipe_methods:
                conn.execute('''
                    INSERT OR IGNORE INTO recipe_rotation (recipe_type, recipe_method, last_used, use_count)
                    VALUES (?, ?, DATE('now', '-90 days'), 0)
                ''', (method.replace('generate_', ''), method))
    
    def get_available_recipe(self, recipe_type):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–∏–ø–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏"""
        with self.db.get_connection() as conn:
            # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ–ª–µ–µ rotation_period –¥–Ω–µ–π
            cursor = conn.execute('''
                SELECT recipe_method FROM recipe_rotation 
                WHERE recipe_type LIKE ? AND last_used < DATE('now', '-' || ? || ' days')
                ORDER BY use_count ASC, last_used ASC
                LIMIT 1
            ''', (f'{recipe_type}%', self.rotation_period))
            
            result = cursor.fetchone()
            if result:
                method = result['recipe_method']
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                conn.execute('''
                    UPDATE recipe_rotation 
                    SET last_used = DATE('now'), use_count = use_count + 1
                    WHERE recipe_method = ?
                ''', (method,))
                return method
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ, –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
                cursor = conn.execute('''
                    SELECT recipe_method FROM recipe_rotation 
                    WHERE recipe_type LIKE ?
                    ORDER BY last_used ASC, use_count ASC
                    LIMIT 1
                ''', (f'{recipe_type}%',))
                
                result = cursor.fetchone()
                if result:
                    method = result['recipe_method']
                    conn.execute('''
                        UPDATE recipe_rotation 
                        SET last_used = DATE('now'), use_count = use_count + 1
                        WHERE recipe_method = ?
                    ''', (method,))
                    return method
        
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
        return f'generate_{recipe_type}'

# –ú–ï–ù–ï–î–ñ–ï–† –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
class VisualContentManager:
    FOOD_PHOTOS = {
        'breakfast': [
            'https://images.unsplash.com/photo-1551782450-17144efb9c50?w=600',
            'https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=600',
            'https://images.unsplash.com/photo-1570197788417-0e82375c9371?w=600',
        ],
        'lunch': [
            'https://images.unsplash.com/photo-1547592166-23ac45744acd?w=600',
            'https://images.unsplash.com/photo-1606755962773-d324e74532a7?w=600',
            'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=600',
        ],
        'dinner': [
            'https://images.unsplash.com/photo-1563379926898-05f4575a45d8?w=600',
            'https://images.unsplash.com/photo-1598214886806-c87b84b707f5?w=600',
            'https://images.unsplash.com/photo-1555939592-8a1039b86bc4?w=600',
        ],
        'dessert': [
            'https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?w=600',
            'https://images.unsplash.com/photo-1571115764595-644a1f56a55c?w=600',
            'https://images.unsplash.com/photo-1565958011703-44f9829ba187?w=600',
        ],
        'advice': [
            'https://images.unsplash.com/photo-1490818387583-1baba5e638af?w=600',
            'https://images.unsplash.com/photo-1550581190-9c1c47bdfba3?w=600',
            'https://images.unsplash.com/photo-1505576399279-565b52d4ac71?w=600',
        ]
    }
    
    EMOJI_CATEGORIES = {
        'breakfast': ['üç≥', 'ü•û', 'üç≤', 'ü•£', '‚òï', 'ü•ê', 'üçì', 'ü•ë'],
        'lunch': ['üçù', 'üçõ', 'ü•ò', 'üçú', 'üç±', 'ü•ó', 'üåØ', 'ü•™'],
        'dinner': ['üåô', 'üçΩÔ∏è', 'ü•ò', 'üç¥', '‚ú®', 'üç∑', 'üïØÔ∏è', 'üåü'],
        'dessert': ['üç∞', 'üéÇ', 'üçÆ', 'üç®', 'üßÅ', 'üç´', 'üç©', 'ü•Æ'],
        'advice': ['üí°', 'üéØ', 'üìö', 'üß†', 'üí™', 'ü•ó', 'üíß', 'üë®‚Äç‚öïÔ∏è'],
    }
    
    def get_photo_for_recipe(self, recipe_type):
        photo_category = self._map_recipe_to_photo(recipe_type)
        photos = self.FOOD_PHOTOS.get(photo_category, self.FOOD_PHOTOS['breakfast'])
        return random.choice(photos)
    
    def _map_recipe_to_photo(self, recipe_type):
        mapping = {
            'neuro_breakfast': 'breakfast',
            'energy_breakfast': 'breakfast',
            'protein_breakfast': 'breakfast',
            'veggie_breakfast': 'breakfast',
            'carbs_breakfast': 'breakfast',
            'sunday_breakfast': 'breakfast',
            'focus_lunch': 'lunch',
            'protein_lunch': 'lunch',
            'veggie_lunch': 'lunch',
            'carbs_lunch': 'lunch',
            'sunday_lunch': 'lunch',
            'brain_dinner': 'dinner',
            'protein_dinner': 'dinner',
            'veggie_dinner': 'dinner',
            'week_prep_dinner': 'dinner',
            'friday_dessert': 'dessert',
            'saturday_dessert': 'dessert',
            'sunday_dessert': 'dessert',
            'neuro_advice': 'advice',
            'protein_advice': 'advice',
            'veggie_advice': 'advice',
            'carbs_advice': 'advice',
            'water_advice': 'advice',
            'planning_advice': 'advice'
        }
        return mapping.get(recipe_type, 'breakfast')
    
    def generate_attractive_post(self, title, content, recipe_type, benefits):
        photo_url = self.get_photo_for_recipe(recipe_type)
        main_emoji = random.choice(self.EMOJI_CATEGORIES.get('breakfast', ['üçΩÔ∏è']))
        
        formatted_content = self._format_with_emoji(content)
        
        post = f"""{main_emoji} <b>{title}</b>

<a href="{photo_url}">üñºÔ∏è –§–û–¢–û –ë–õ–Æ–î–ê</a>

{formatted_content}

üî¨ –ù–ê–£–ß–ù–ê–Ø –ü–û–õ–¨–ó–ê:
{benefits}

‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ãÖ‚àô‚àò ‚òÖ ‚àò‚àô‚ãÖ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ

üéØ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏

üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å ‚Üí @ppsupershef
üí¨ –û–±—Å—É–∂–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã ‚Üí @ppsupershef_chat

üòã –í–∫—É—Å–Ω–æ | üí™ –ü–æ–ª–µ–∑–Ω–æ | ‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ | üß† –ù–∞—É—á–Ω–æ

üîÑ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! ‚Üí @ppsupershef"""
        
        return post
    
    def _format_with_emoji(self, text):
        lines = text.split('\n')
        formatted = ""
        for line in lines:
            if line.strip() and any(keyword in line.lower() for keyword in ['‚Ä¢', '-', '1.', '2.', '3.']):
                emoji = random.choice(['ü•¨', 'ü•ï', 'ü•ö', 'üçó', 'üêü', 'üßÄ', 'üåΩ', 'üçÖ'])
                formatted += f"{emoji} {line}\n"
            else:
                formatted += f"{line}\n"
        return formatted

# –¢–ï–õ–ï–ì–†–ê–ú –ú–ï–ù–ï–î–ñ–ï–† –° –ó–ê–©–ò–¢–û–ô –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
class TelegramManager:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.sent_hashes = set()
        self.db = Database()
        self.init_duplicate_protection()
    
    def init_duplicate_protection(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with self.db.get_connection() as conn:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sent_hashes –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor = conn.execute('SELECT content_hash FROM sent_messages')
            for row in cursor:
                self.sent_hashes.add(row['content_hash'])
    
    def send_message(self, text, parse_mode='HTML'):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            source = "manual" if "–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢" in text or "–†–£–ß–ù–û–ô –ü–û–°–¢" in text else "scheduled"
            logger.info(f"üì§ [{source}] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.token or self.token == 'your-telegram-bot-token':
                logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
                return False
                
            if not self.channel:
                logger.error("‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return False

            content_hash = hashlib.md5(text.encode()).hexdigest()
            
            # –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –ü–ê–ú–Ø–¢–ò
            if content_hash in self.sent_hashes:
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–∞–º—è—Ç—å)")
                return False
            
            # –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
            with self.db.get_connection() as conn:
                cursor = conn.execute(
                    'SELECT 1 FROM sent_messages WHERE content_hash = ?', 
                    (content_hash,)
                )
                if cursor.fetchone():
                    logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ë–î)")
                    return False
            
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': False
            }
            
            logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API...")
            response = requests.post(url, json=payload, timeout=30)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
                
            result = response.json()
            logger.info(f"üì® –û—Ç–≤–µ—Ç Telegram: {result}")
            
            if result.get('ok'):
                # –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ –ü–†–ò –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ï
                self.sent_hashes.add(content_hash)
                with self.db.get_connection() as conn:
                    conn.execute(
                        'INSERT INTO sent_messages (content_hash, message_text) VALUES (?, ?)',
                        (content_hash, text[:500])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    )
                logger.info(f"‚úÖ [{source}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
                return True
            else:
                error_description = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_description}")
                return False
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
    
    def get_member_count(self):
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {'chat_id': self.channel}
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            return result.get('result', 0) if result.get('ok') else 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def cleanup_old_messages(self, days=90):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"""
        with self.db.get_connection() as conn:
            conn.execute(
                'DELETE FROM sent_messages WHERE sent_at < DATE("now", ?)',
                (f"-{days} days",)
            )
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            cursor = conn.execute('SELECT content_hash FROM sent_messages')
            self.sent_hashes = {row['content_hash'] for row in cursor}
            logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")

# –£–ú–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ù–¢–ï–ù–¢–ê –° –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï–ú
class SmartContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.visual_manager = VisualContentManager()
        self.db = Database()
        self.rotation_system = RecipeRotationSystem()
    
    # –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ò–ü–ê –ö–û–ù–¢–ï–ù–¢–ê
    def _get_breakfast_option(self):
        """–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –∏–∑ –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        breakfasts = [
            self._generate_omelette_breakfast,
            self._generate_oatmeal_breakfast,
            self._generate_smoothie_breakfast,
            self._generate_toast_breakfast,
            self._generate_pancakes_breakfast,
            self._generate_yogurt_breakfast,
            self._generate_porridge_breakfast
        ]
        return random.choice(breakfasts)()
    
    def _get_lunch_option(self):
        """–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –æ–±–µ–¥ –∏–∑ –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        lunches = [
            self._generate_salad_lunch,
            self._generate_soup_lunch,
            self._generate_bowl_lunch,
            self._generate_wrap_lunch,
            self._generate_stir_fry_lunch,
            self._generate_pasta_lunch,
            self._generate_grilled_lunch
        ]
        return random.choice(lunches)()
    
    def _get_dinner_option(self):
        """–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —É–∂–∏–Ω –∏–∑ –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        dinners = [
            self._generate_salad_dinner,
            self._generate_grilled_dinner,
            self._generate_stew_dinner,
            self._generate_soup_dinner,
            self._generate_omelette_dinner,
            self._generate_wrap_dinner,
            self._generate_bowl_dinner
        ]
        return random.choice(dinners)()
    
    def _get_dessert_option(self):
        """–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ—Å–µ—Ä—Ç –∏–∑ –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        desserts = [
            self._generate_cheesecake_dessert,
            self._generate_mousse_dessert,
            self._generate_pudding_dessert,
            self._generate_fruit_dessert,
            self._generate_ice_cream_dessert,
            self._generate_muffins_dessert,
            self._generate_brownie_dessert
        ]
        return random.choice(desserts)()
    
    def _get_advice_option(self):
        """–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        advices = [
            self._generate_brain_advice,
            self._generate_protein_advice,
            self._generate_veggie_advice,
            self._generate_water_advice,
            self._generate_sleep_advice,
            self._generate_metabolism_advice,
            self._generate_gut_advice
        ]
        return random.choice(advices)()

    # –ë–ê–ó–û–í–´–ï –†–ï–¶–ï–ü–¢–´ - –ó–ê–í–¢–†–ê–ö–ò
    def _generate_omelette_breakfast(self):
        content = """
üç≥ –û–ú–õ–ï–¢ –° –û–í–û–©–ê–ú–ò –ò –°–´–†–û–ú
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 320 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 22–≥ ‚Ä¢ –ñ–∏—Ä—ã: 18–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 12–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –Ø–π—Ü–∞ - 8 —à—Ç (—Ö–æ–ª–∏–Ω - 147 –º–≥/—à—Ç)
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 2 —à—Ç (–ª–∏–∫–æ–ø–∏–Ω - 2573–º–∫–≥/100–≥)
‚Ä¢ –®–ø–∏–Ω–∞—Ç - 100 –≥ (–∂–µ–ª–µ–∑–æ - 2.7–º–≥/100–≥)
‚Ä¢ –°—ã—Ä —Ñ–µ—Ç–∞ - 100 –≥ (–∫–∞–ª—å—Ü–∏–π - 493–º–≥/100–≥)
‚Ä¢ –ú–æ–ª–æ–∫–æ - 100 –º–ª (–≤–∏—Ç–∞–º–∏–Ω D - 1.3–º–∫–≥/100–≥)
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —Å—Ç.–ª.
‚Ä¢ –°–æ–ª—å, –ø–µ—Ä–µ—Ü - –ø–æ –≤–∫—É—Å—É

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):
1. –Ø–π—Ü–∞ –≤–∑–±–∏—Ç—å —Å –º–æ–ª–æ–∫–æ–º, —Å–æ–ª—å—é –∏ –ø–µ—Ä—Ü–µ–º
2. –®–ø–∏–Ω–∞—Ç –ø—Ä–æ–º—ã—Ç—å, –ø–æ–º–∏–¥–æ—Ä—ã –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏
3. –†–∞–∑–æ–≥—Ä–µ—Ç—å —Å–∫–æ–≤–æ—Ä–æ–¥—É —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º
4. –û–±–∂–∞—Ä–∏—Ç—å —à–ø–∏–Ω–∞—Ç 2 –º–∏–Ω—É—Ç—ã
5. –ó–∞–ª–∏—Ç—å —è–∏—á–Ω–æ–π —Å–º–µ—Å—å—é, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–º–∏–¥–æ—Ä—ã
6. –ì–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 7-8 –º–∏–Ω—É—Ç
7. –ü–æ—Å—ã–ø–∞—Ç—å —Å—ã—Ä–æ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
"""
        benefits = """‚Ä¢ ü•ö –Ø–π—Ü–∞ - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –±–µ–ª–∫–∞ –∏ —Ö–æ–ª–∏–Ω–∞
‚Ä¢ ü•¨ –®–ø–∏–Ω–∞—Ç - –∂–µ–ª–µ–∑–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞
‚Ä¢ üßÄ –°—ã—Ä - –∫–∞–ª—å—Ü–∏–π –¥–ª—è –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏
‚Ä¢ üçÖ –ü–æ–º–∏–¥–æ—Ä—ã - –ª–∏–∫–æ–ø–∏–Ω –¥–ª—è –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–æ–π –∑–∞—â–∏—Ç—ã"""
        
        return self.visual_manager.generate_attractive_post(
            "üç≥ –ó–ê–í–¢–†–ê–ö: –û–ú–õ–ï–¢ –° –û–í–û–©–ê–ú–ò –ò –°–´–†–û–ú",
            content, "breakfast", benefits
        )

    def _generate_oatmeal_breakfast(self):
        content = """
ü•£ –û–í–°–Ø–ù–ê–Ø –ö–ê–®–ê –° –Ø–ì–û–î–ê–ú–ò –ò –û–†–ï–•–ê–ú–ò
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 350 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 12–≥ ‚Ä¢ –ñ–∏—Ä—ã: 14–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 48–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 200 –≥ (–∫–ª–µ—Ç—á–∞—Ç–∫–∞ - 10–≥/100–≥)
‚Ä¢ –ú–æ–ª–æ–∫–æ/–≤–æ–¥–∞ - 800 –º–ª
‚Ä¢ –Ø–≥–æ–¥—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ - 200 –≥ (–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã)
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 40 –≥ (–û–º–µ–≥–∞-3 - 9–≥/100–≥)
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - 1 —á.–ª.
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 2 —Å—Ç.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (12 –º–∏–Ω—É—Ç):
1. –û–≤—Å—è–Ω–∫—É –∑–∞–ª–∏—Ç—å –∫–∏–ø—è—Ç–∫–æ–º –∏–ª–∏ –º–æ–ª–æ–∫–æ–º
2. –í–∞—Ä–∏—Ç—å –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–≥–Ω–µ 8-10 –º–∏–Ω—É—Ç
3. –Ø–≥–æ–¥—ã —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
4. –û—Ä–µ—Ö–∏ –∏–∑–º–µ–ª—å—á–∏—Ç—å
5. –í –≥–æ—Ç–æ–≤—É—é –∫–∞—à—É –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥ –∏ –∫–æ—Ä–∏—Ü—É
6. –ü–æ–¥–∞–≤–∞—Ç—å —Å —è–≥–æ–¥–∞–º–∏, –æ—Ä–µ—Ö–∞–º–∏ –∏ —Å–µ–º–µ–Ω–∞–º–∏ —á–∏–∞
"""
        benefits = """‚Ä¢ üåæ –û–≤—Å—è–Ω–∫–∞ - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –ø—Ä–æ—Ç–∏–≤ —Å—Ç–∞—Ä–µ–Ω–∏—è
‚Ä¢ ü•ú –û—Ä–µ—Ö–∏ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ üåø –°–µ–º–µ–Ω–∞ —á–∏–∞ - –û–º–µ–≥–∞-3 –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•£ –ó–ê–í–¢–†–ê–ö: –û–í–°–Ø–ù–ê–Ø –ö–ê–®–ê –° –Ø–ì–û–î–ê–ú–ò",
            content, "breakfast", benefits
        )

    # –ë–ê–ó–û–í–´–ï –†–ï–¶–ï–ü–¢–´ - –û–ë–ï–î–´
    def _generate_salad_lunch(self):
        content = """
ü•ó –°–†–ï–î–ò–ó–ï–ú–ù–û–ú–û–†–°–ö–ò–ô –°–ê–õ–ê–¢ –° –ö–£–†–ò–¶–ï–ô
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 380 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 28–≥ ‚Ä¢ –ñ–∏—Ä—ã: 22–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 18–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 400 –≥ (–±–µ–ª–æ–∫ - 23–≥/100–≥)
‚Ä¢ –°–∞–ª–∞—Ç —Ä–æ–º–∞–Ω–æ - 1 –∫–æ—á–∞–Ω (–≤–∏—Ç–∞–º–∏–Ω K - 116–º–∫–≥/100–≥)
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ - 300 –≥ (–ª–∏–∫–æ–ø–∏–Ω)
‚Ä¢ –û–≥—É—Ä—Ü—ã - 2 —à—Ç (–∫—Ä–µ–º–Ω–∏–π)
‚Ä¢ –û–ª–∏–≤–∫–∏ - 100 –≥ (–º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã)
‚Ä¢ –°—ã—Ä —Ñ–µ—Ç–∞ - 150 –≥ (–∫–∞–ª—å—Ü–∏–π)
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 3 —Å—Ç.–ª.
‚Ä¢ –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 2 —Å—Ç.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (20 –º–∏–Ω—É—Ç):
1. –ö—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É –æ—Ç–≤–∞—Ä–∏—Ç—å –∏–ª–∏ –∑–∞–ø–µ—á—å
2. –°–∞–ª–∞—Ç –ø–æ—Ä–≤–∞—Ç—å —Ä—É–∫–∞–º–∏, –ø–æ–º–∏–¥–æ—Ä—ã —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –ø–æ–ø–æ–ª–∞–º
3. –û–≥—É—Ä—Ü—ã –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—Ä—É–∂–æ—á–∫–∞–º–∏
4. –ö—É—Ä–∏—Ü—É –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏
5. –°–º–µ—à–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –±–æ–ª—å—à–æ–π –º–∏—Å–∫–µ
6. –ó–∞–ø—Ä–∞–≤–∏—Ç—å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º
"""
        benefits = """‚Ä¢ üçó –ö—É—Ä–∏—Ü–∞ - –Ω–µ–∂–∏—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞
‚Ä¢ ü•¨ –°–∞–ª–∞—Ç - –≤–∏—Ç–∞–º–∏–Ω K –¥–ª—è —Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫—Ä–æ–≤–∏
‚Ä¢ ü´í –û–ª–∏–≤–∫–∏ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞
‚Ä¢ üßÄ –°—ã—Ä - –∫–∞–ª—å—Ü–∏–π –¥–ª—è –∫–æ—Å—Ç–µ–π"""
        
        return self.visual_manager.generate_attractive_post(
            "ü•ó –û–ë–ï–î: –°–†–ï–î–ò–ó–ï–ú–ù–û–ú–û–†–°–ö–ò–ô –°–ê–õ–ê–¢ –° –ö–£–†–ò–¶–ï–ô",
            content, "lunch", benefits
        )

    # –ë–ê–ó–û–í–´–ï –†–ï–¶–ï–ü–¢–´ - –£–ñ–ò–ù–´
    def _generate_salad_dinner(self):
        content = """
üåô –õ–ï–ì–ö–ò–ô –°–ê–õ–ê–¢ –° –¢–£–ù–¶–û–ú –ò –ê–í–û–ö–ê–î–û
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 280 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 25–≥ ‚Ä¢ –ñ–∏—Ä—ã: 15–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 12–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 4 –ø–æ—Ä—Ü–∏–∏:
‚Ä¢ –¢—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - 400 –≥ (—Å–µ–ª–µ–Ω - 90–º–∫–≥/100–≥)
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 2 —à—Ç (–∫–∞–ª–∏–π - 485–º–≥/100–≥)
‚Ä¢ –†—É–∫–∫–æ–ª–∞ - 200 –≥ (–≤–∏—Ç–∞–º–∏–Ω K - 109–º–∫–≥/100–≥)
‚Ä¢ –û–≥—É—Ä—Ü—ã - 2 —à—Ç
‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏ - 200 –≥
‚Ä¢ –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 3 —Å—Ç.–ª.
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 2 —Å—Ç.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):
1. –†—É–∫–∫–æ–ª—É –≤—ã–ª–æ–∂–∏—Ç—å –Ω–∞ —Ç–∞—Ä–µ–ª–∫—É
2. –ê–≤–æ–∫–∞–¥–æ –Ω–∞—Ä–µ–∑–∞—Ç—å –ª–æ–º—Ç–∏–∫–∞–º–∏
3. –û–≥—É—Ä—Ü—ã –∏ –ø–æ–º–∏–¥–æ—Ä—ã –Ω–∞—Ä–µ–∑–∞—Ç—å
4. –¢—É–Ω–µ—Ü —Ä–∞–∑–º—è—Ç—å –≤–∏–ª–∫–æ–π
5. –°–º–µ—à–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
6. –ó–∞–ø—Ä–∞–≤–∏—Ç—å –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º –∏ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º
"""
        benefits = """‚Ä¢ üêü –¢—É–Ω–µ—Ü - —Å–µ–ª–µ–Ω –¥–ª—è –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–æ–π –∑–∞—â–∏—Ç—ã
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –¥–ª—è —É—Å–≤–æ–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤
‚Ä¢ ü•¨ –†—É–∫–∫–æ–ª–∞ - –≤–∏—Ç–∞–º–∏–Ω K –¥–ª—è –∫–æ—Å—Ç–µ–π
‚Ä¢ üçã –õ–∏–º–æ–Ω - –≤–∏—Ç–∞–º–∏–Ω C –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "üåô –£–ñ–ò–ù: –õ–ï–ì–ö–ò–ô –°–ê–õ–ê–¢ –° –¢–£–ù–¶–û–ú –ò –ê–í–û–ö–ê–î–û",
            content, "dinner", benefits
        )

    # –ë–ê–ó–û–í–´–ï –†–ï–¶–ï–ü–¢–´ - –î–ï–°–ï–†–¢–´
    def _generate_cheesecake_dessert(self):
        content = """
üç∞ –¢–í–û–†–û–ñ–ù–´–ô –ß–ò–ó–ö–ï–ô–ö –ë–ï–ó –í–´–ü–ï–ß–ö–ò
–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: 180 –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏: 12–≥ ‚Ä¢ –ñ–∏—Ä—ã: 8–≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 15–≥

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 6 –ø–æ—Ä—Ü–∏–π:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 0% - 400 –≥ (–∫–∞–∑–µ–∏–Ω)
‚Ä¢ –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç - 200 –≥ (–ø—Ä–æ–±–∏–æ—Ç–∏–∫–∏)
‚Ä¢ –ú–µ–¥ - 3 —Å—Ç.–ª.
‚Ä¢ –ñ–µ–ª–∞—Ç–∏–Ω - 15 –≥ (–∫–æ–ª–ª–∞–≥–µ–Ω)
‚Ä¢ –í–∞–Ω–∏–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç - 1 —á.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã —Å–≤–µ–∂–∏–µ - 200 –≥
‚Ä¢ –û–≤—Å—è–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ - 8 —à—Ç

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç + –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ):
1. –ü–µ—á–µ–Ω—å–µ –∏–∑–º–µ–ª—å—á–∏—Ç—å –≤ –∫—Ä–æ—à–∫—É
2. –¢–≤–æ—Ä–æ–≥ –∏ –π–æ–≥—É—Ä—Ç –≤–∑–±–∏—Ç—å –≤ –±–ª–µ–Ω–¥–µ—Ä–µ
3. –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥ –∏ –≤–∞–Ω–∏–ª—å
4. –ñ–µ–ª–∞—Ç–∏–Ω —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
5. –°–º–µ—à–∞—Ç—å —Ç–≤–æ—Ä–æ–∂–Ω—É—é –º–∞—Å—Å—É —Å –∂–µ–ª–∞—Ç–∏–Ω–æ–º
6. –í—ã–ª–æ–∂–∏—Ç—å –≤ —Ñ–æ—Ä–º—ã, –æ—Ö–ª–∞–¥–∏—Ç—å 4 —á–∞—Å–∞
7. –ü–æ–¥–∞–≤–∞—Ç—å —Å —è–≥–æ–¥–∞–º–∏
"""
        benefits = """‚Ä¢ üßÄ –¢–≤–æ—Ä–æ–≥ - –º–µ–¥–ª–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ üçØ –ú–µ–¥ - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∞–Ω—Ç–∏–º–∏–∫—Ä–æ–±–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
‚Ä¢ üçì –Ø–≥–æ–¥—ã - –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –º–æ–ª–æ–¥–æ—Å—Ç–∏
‚Ä¢ üí™ –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–µ—Ä–µ–∫—É—Å–∞"""
        
        return self.visual_manager.generate_attractive_post(
            "üç∞ –î–ï–°–ï–†–¢: –¢–í–û–†–û–ñ–ù–´–ô –ß–ò–ó–ö–ï–ô–ö –ë–ï–ó –í–´–ü–ï–ß–ö–ò",
            content, "dessert", benefits
        )

    # –ë–ê–ó–û–í–´–ï –†–ï–¶–ï–ü–¢–´ - –°–û–í–ï–¢–´
    def _generate_brain_advice(self):
        content = """
üß† –ü–ò–¢–ê–ù–ò–ï –î–õ–Ø –ú–û–ó–ì–ê: 5 –ì–õ–ê–í–ù–´–• –ü–†–ò–ù–¶–ò–ü–û–í

üí° –ù–ê–£–ß–ù–û –û–ë–û–°–ù–û–í–ê–ù–ù–´–ï –°–û–í–ï–¢–´:

1. ü•ë –ü–û–õ–ï–ó–ù–´–ï –ñ–ò–†–´
‚Ä¢ –û–º–µ–≥–∞-3 —É–ª—É—á—à–∞—é—Ç –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –Ω–∞ 28%
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –ª–æ—Å–æ—Å—å, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏, —Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞
‚Ä¢ –î–æ–∑–∞: 2-3 –ø–æ—Ä—Ü–∏–∏ —Ä—ã–±—ã –≤ –Ω–µ–¥–µ–ª—é

2. üç´ –ê–ù–¢–ò–û–ö–°–ò–î–ê–ù–¢–´  
‚Ä¢ –ó–∞—â–∏—â–∞—é—Ç –∫–ª–µ—Ç–∫–∏ –º–æ–∑–≥–∞ –æ—Ç –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: —è–≥–æ–¥—ã, —Ç–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥, –∑–µ–ª–µ–Ω—ã–π —á–∞–π
‚Ä¢ –î–æ–∑–∞: –≥–æ—Ä—Å—Ç—å —è–≥–æ–¥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ

3. ü•ö –•–û–õ–ò–ù
‚Ä¢ –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∞—Ü–µ—Ç–∏–ª—Ö–æ–ª–∏–Ω–∞ - –Ω–µ–π—Ä–æ–º–µ–¥–∏–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: —è–π—Ü–∞, –ø–µ—á–µ–Ω—å, –∞—Ä–∞—Ö–∏—Å
‚Ä¢ –î–æ–∑–∞: 2-3 —è–π—Ü–∞ –≤ –¥–µ–Ω—å

4. üíß –í–û–î–ù–´–ô –ë–ê–õ–ê–ù–°
‚Ä¢ –û–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30%
‚Ä¢ –ù–æ—Ä–º–∞: 30 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å: —Å–≤–µ—Ç–ª–∞—è –º–æ—á–∞

5. üïí –†–ï–ñ–ò–ú –ü–ò–¢–ê–ù–ò–Ø
‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤—ã 3-4 —á–∞—Å–∞ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
‚Ä¢ –õ–µ–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞

üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
–î–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –º–æ–∑–≥–∞ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å–µ–≥–æ–¥–Ω—è!
"""
        benefits = """‚Ä¢ üß† –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ 40%
‚Ä¢ üí° –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –∏ —è—Å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è"""
        
        return self.visual_manager.generate_attractive_post(
            "üß† –°–û–í–ï–¢: –ü–ò–¢–ê–ù–ò–ï –î–õ–Ø –ú–û–ó–ì–ê –ò –ü–ê–ú–Ø–¢–ò",
            content, "advice", benefits
        )

    # –û–°–¢–ê–õ–¨–ù–´–ï –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
    def _generate_smoothie_breakfast(self): return self._generate_oatmeal_breakfast()
    def _generate_toast_breakfast(self): return self._generate_omelette_breakfast()
    def _generate_pancakes_breakfast(self): return self._generate_oatmeal_breakfast()
    def _generate_yogurt_breakfast(self): return self._generate_oatmeal_breakfast()
    def _generate_porridge_breakfast(self): return self._generate_oatmeal_breakfast()

    def _generate_soup_lunch(self): return self._generate_salad_lunch()
    def _generate_bowl_lunch(self): return self._generate_salad_lunch()
    def _generate_wrap_lunch(self): return self._generate_salad_lunch()
    def _generate_stir_fry_lunch(self): return self._generate_salad_lunch()
    def _generate_pasta_lunch(self): return self._generate_salad_lunch()
    def _generate_grilled_lunch(self): return self._generate_salad_lunch()

    def _generate_grilled_dinner(self): return self._generate_salad_dinner()
    def _generate_stew_dinner(self): return self._generate_salad_dinner()
    def _generate_soup_dinner(self): return self._generate_salad_dinner()
    def _generate_omelette_dinner(self): return self._generate_salad_dinner()
    def _generate_wrap_dinner(self): return self._generate_salad_dinner()
    def _generate_bowl_dinner(self): return self._generate_salad_dinner()

    def _generate_mousse_dessert(self): return self._generate_cheesecake_dessert()
    def _generate_pudding_dessert(self): return self._generate_cheesecake_dessert()
    def _generate_fruit_dessert(self): return self._generate_cheesecake_dessert()
    def _generate_ice_cream_dessert(self): return self._generate_cheesecake_dessert()
    def _generate_muffins_dessert(self): return self._generate_cheesecake_dessert()
    def _generate_brownie_dessert(self): return self._generate_cheesecake_dessert()

    def _generate_protein_advice(self): return self._generate_brain_advice()
    def _generate_veggie_advice(self): return self._generate_brain_advice()
    def _generate_water_advice(self): return self._generate_brain_advice()
    def _generate_sleep_advice(self): return self._generate_brain_advice()
    def _generate_metabolism_advice(self): return self._generate_brain_advice()
    def _generate_gut_advice(self): return self._generate_brain_advice()

    # –£–ú–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–û–¢–ê–¶–ò–ò - –ö–ê–ñ–î–´–ô –í–û–ó–í–†–ê–©–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô –¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê
    def generate_neuro_breakfast(self): return self._get_breakfast_option()
    def generate_protein_breakfast(self): return self._get_breakfast_option()
    def generate_veggie_breakfast(self): return self._get_breakfast_option()
    def generate_carbs_breakfast(self): return self._get_breakfast_option()
    def generate_sunday_breakfast(self): return self._get_breakfast_option()
    def generate_energy_breakfast(self): return self._get_breakfast_option()
    def generate_quinoa_breakfast(self): return self._get_breakfast_option()
    def generate_buckwheat_breakfast(self): return self._get_breakfast_option()
    def generate_tofu_breakfast(self): return self._get_breakfast_option()
    def generate_berry_smoothie(self): return self._get_breakfast_option()
    def generate_savory_oatmeal(self): return self._get_breakfast_option()
    def generate_egg_muffins(self): return self._get_breakfast_option()
    def generate_chia_pudding(self): return self._get_breakfast_option()
    def generate_protein_pancakes(self): return self._get_breakfast_option()
    def generate_avocado_toast(self): return self._get_breakfast_option()
    def generate_greek_yogurt_bowl(self): return self._get_breakfast_option()
    def generate_sweet_potato_toast(self): return self._get_breakfast_option()
    def generate_breakfast_burrito(self): return self._get_breakfast_option()
    def generate_rice_cakes(self): return self._get_breakfast_option()
    def generate_cottage_cheese_bowl(self): return self._get_breakfast_option()
    def generate_breakfast_quiche(self): return self._get_breakfast_option()
    def generate_protein_waffles(self): return self._get_breakfast_option()
    def generate_breakfast_salad(self): return self._get_breakfast_option()
    def generate_breakfast_soup(self): return self._get_breakfast_option()
    def generate_breakfast_tacos(self): return self._get_breakfast_option()
    def generate_breakfast_pizza(self): return self._get_breakfast_option()
    def generate_breakfast_sushi(self): return self._get_breakfast_option()
    def generate_breakfast_risotto(self): return self._get_breakfast_option()
    def generate_breakfast_curry(self): return self._get_breakfast_option()
    def generate_breakfast_stir_fry(self): return self._get_breakfast_option()

    def generate_neuro_lunch(self): return self._get_lunch_option()
    def generate_protein_lunch(self): return self._get_lunch_option()
    def generate_veggie_lunch(self): return self._get_lunch_option()
    def generate_carbs_lunch(self): return self._get_lunch_option()
    def generate_sunday_lunch(self): return self._get_lunch_option()
    def generate_mediterranean_lunch(self): return self._get_lunch_option()
    def generate_asian_lunch(self): return self._get_lunch_option()
    def generate_soup_lunch(self): return self._get_lunch_option()
    def generate_bowl_lunch(self): return self._get_lunch_option()
    def generate_wrap_lunch(self): return self._get_lunch_option()
    def generate_salad_lunch(self): return self._get_lunch_option()
    def generate_stir_fry_lunch(self): return self._get_lunch_option()
    def generate_curry_lunch(self): return self._get_lunch_option()
    def generate_pasta_lunch(self): return self._get_lunch_option()
    def generate_rice_lunch(self): return self._get_lunch_option()
    def generate_quinoa_lunch(self): return self._get_lunch_option()
    def generate_buckwheat_lunch(self): return self._get_lunch_option()
    def generate_lentil_lunch(self): return self._get_lunch_option()
    def generate_fish_lunch(self): return self._get_lunch_option()
    def generate_chicken_lunch(self): return self._get_lunch_option()
    def generate_turkey_lunch(self): return self._get_lunch_option()
    def generate_vegan_lunch(self): return self._get_lunch_option()
    def generate_detox_lunch(self): return self._get_lunch_option()
    def generate_energy_lunch(self): return self._get_lunch_option()
    def generate_immunity_lunch(self): return self._get_lunch_option()
    def generate_focus_lunch(self): return self._get_lunch_option()
    def generate_recovery_lunch(self): return self._get_lunch_option()
    def generate_metabolism_lunch(self): return self._get_lunch_option()
    def generate_anti_inflammatory_lunch(self): return self._get_lunch_option()
    def generate_low_carb_lunch(self): return self._get_lunch_option()

    def generate_neuro_dinner(self): return self._get_dinner_option()
    def generate_protein_dinner(self): return self._get_dinner_option()
    def generate_veggie_dinner(self): return self._get_dinner_option()
    def generate_carbs_dinner(self): return self._get_dinner_option()
    def generate_sunday_dinner(self): return self._get_dinner_option()
    def generate_light_dinner(self): return self._get_dinner_option()
    def generate_hearty_dinner(self): return self._get_dinner_option()
    def generate_quick_dinner(self): return self._get_dinner_option()
    def generate_meal_prep_dinner(self): return self._get_dinner_option()
    def generate_sheet_pan_dinner(self): return self._get_dinner_option()
    def generate_one_pot_dinner(self): return self._get_dinner_option()
    def generate_slow_cooker_dinner(self): return self._get_dinner_option()
    def generate_air_fryer_dinner(self): return self._get_dinner_option()
    def generate_grilled_dinner(self): return self._get_dinner_option()
    def generate_baked_dinner(self): return self._get_dinner_option()
    def generate_stew_dinner(self): return self._get_dinner_option()
    def generate_casserole_dinner(self): return self._get_dinner_option()
    def generate_stir_fry_dinner(self): return self._get_dinner_option()
    def generate_soup_dinner(self): return self._get_dinner_option()
    def generate_salad_dinner(self): return self._get_dinner_option()
    def generate_bowl_dinner(self): return self._get_dinner_option()
    def generate_wrap_dinner(self): return self._get_dinner_option()
    def generate_taco_dinner(self): return self._get_dinner_option()
    def generate_pizza_dinner(self): return self._get_dinner_option()
    def generate_pasta_dinner(self): return self._get_dinner_option()
    def generate_rice_dinner(self): return self._get_dinner_option()
    def generate_quinoa_dinner(self): return self._get_dinner_option()
    def generate_buckwheat_dinner(self): return self._get_dinner_option()
    def generate_lentil_dinner(self): return self._get_dinner_option()
    def generate_vegetable_dinner(self): return self._get_dinner_option()

    def generate_neuro_advice(self): return self._get_advice_option()
    def generate_protein_advice(self): return self._get_advice_option()
    def generate_veggie_advice(self): return self._get_advice_option()
    def generate_carbs_advice(self): return self._get_advice_option()
    def generate_water_advice(self): return self._get_advice_option()
    def generate_planning_advice(self): return self._get_advice_option()
    def generate_gut_health_advice(self): return self._get_advice_option()
    def generate_metabolism_advice(self): return self._get_advice_option()
    def generate_detox_advice(self): return self._get_advice_option()
    def generate_immunity_advice(self): return self._get_advice_option()
    def generate_energy_advice(self): return self._get_advice_option()
    def generate_sleep_advice(self): return self._get_advice_option()
    def generate_hormones_advice(self): return self._get_advice_option()
    def generate_inflammation_advice(self): return self._get_advice_option()
    def generate_longevity_advice(self): return self._get_advice_option()
    def generate_brain_health_advice(self): return self._get_advice_option()
    def generate_heart_health_advice(self): return self._get_advice_option()
    def generate_bone_health_advice(self): return self._get_advice_option()
    def generate_skin_health_advice(self): return self._get_advice_option()
    def generate_weight_management_advice(self): return self._get_advice_option()
    def generate_meal_timing_advice(self): return self._get_advice_option()
    def generate_supplements_advice(self): return self._get_advice_option()
    def generate_hydration_advice(self): return self._get_advice_option()
    def generate_fiber_advice(self): return self._get_advice_option()
    def generate_antioxidants_advice(self): return self._get_advice_option()
    def generate_probiotics_advice(self): return self._get_advice_option()
    def generate_omega3_advice(self): return self._get_advice_option()
    def generate_vitamins_advice(self): return self._get_advice_option()
    def generate_minerals_advice(self): return self._get_advice_option()
    def generate_phytochemicals_advice(self): return self._get_advice_option()

    def generate_friday_dessert(self): return self._get_dessert_option()
    def generate_saturday_dessert(self): return self._get_dessert_option()
    def generate_sunday_dessert(self): return self._get_dessert_option()
    def generate_protein_dessert(self): return self._get_dessert_option()
    def generate_fruit_dessert(self): return self._get_dessert_option()
    def generate_chocolate_dessert(self): return self._get_dessert_option()
    def generate_cheese_dessert(self): return self._get_dessert_option()
    def generate_frozen_dessert(self): return self._get_dessert_option()
    def generate_baked_dessert(self): return self._get_dessert_option()
    def generate_no_bake_dessert(self): return self._get_dessert_option()
    def generate_low_sugar_dessert(self): return self._get_dessert_option()
    def generate_vegan_dessert(self): return self._get_dessert_option()
    def generate_gluten_free_dessert(self): return self._get_dessert_option()
    def generate_quick_dessert(self): return self._get_dessert_option()
    def generate_healthy_dessert(self): return self._get_dessert_option()

    def generate_family_cooking(self): return self._get_dinner_option()
    def generate_saturday_cooking_1(self): return self._get_dinner_option()
    def generate_saturday_cooking_2(self): return self._get_dinner_option()
    def generate_saturday_cooking_3(self): return self._get_dinner_option()
    def generate_saturday_cooking_4(self): return self._get_dinner_option()
    def generate_saturday_cooking_5(self): return self._get_dinner_option()
    def generate_saturday_cooking_6(self): return self._get_dinner_option()
    def generate_saturday_cooking_7(self): return self._get_dinner_option()
    def generate_saturday_cooking_8(self): return self._get_dinner_option()
    def generate_saturday_cooking_9(self): return self._get_dinner_option()
    def generate_saturday_cooking_10(self): return self._get_dinner_option()
    def generate_saturday_cooking_11(self): return self._get_dinner_option()
    def generate_saturday_cooking_12(self): return self._get_dinner_option()

    # –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ï–¶–ï–ü–¢–ê –° –†–û–¢–ê–¶–ò–ï–ô
    def get_rotated_recipe(self, recipe_type):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç —Å —É—á–µ—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏"""
        method_name = self.rotation_system.get_available_recipe(recipe_type)
        method = getattr(self, method_name)
        return method()

# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ö–û–ù–¢–ï–ù–¢–ê –° –†–û–¢–ê–¶–ò–ï–ô
class ContentScheduler:
    def __init__(self):
        self.kemerovo_schedule = {
            # –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö - üß† "–ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï"
            0: {
                "08:00": {"name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫", "type": "neuro_breakfast"},
                "13:00": {"name": "üç≤ –û–±–µ–¥ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏", "type": "neuro_lunch"},
                "17:00": {"name": "üß† –°–æ–≤–µ—Ç: –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –º–æ–∑–≥–∞", "type": "neuro_advice"},
                "19:00": {"name": "ü•ó –£–∂–∏–Ω –¥–ª—è –º–æ–∑–≥–∞", "type": "neuro_dinner"}
            },
            # –í–¢–û–†–ù–ò–ö - üí™ "–ë–ï–õ–ö–û–í–´–ô –î–ï–ù–¨"
            1: {
                "08:00": {"name": "üí™ –ë–µ–ª–∫–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "protein_breakfast"},
                "13:00": {"name": "üçµ –ë–µ–ª–∫–æ–≤—ã–π –æ–±–µ–¥", "type": "protein_lunch"},
                "17:00": {"name": "üí™ –°–æ–≤–µ—Ç: –ó–Ω–∞—á–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤", "type": "protein_advice"},
                "19:00": {"name": "üçó –ë–µ–ª–∫–æ–≤—ã–π —É–∂–∏–Ω", "type": "protein_dinner"}
            },
            # –°–†–ï–î–ê - ü•¨ "–û–í–û–©–ù–û–ô –î–ï–ù–¨"
            2: {
                "08:00": {"name": "ü•¨ –û–≤–æ—â–Ω–æ–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "veggie_breakfast"},
                "13:00": {"name": "ü•¨ –û–≤–æ—â–Ω–æ–π –æ–±–µ–¥", "type": "veggie_lunch"},
                "17:00": {"name": "ü•¨ –°–æ–≤–µ—Ç: –°–∏–ª–∞ –æ–≤–æ—â–µ–π", "type": "veggie_advice"},
                "19:00": {"name": "ü•ë –û–≤–æ—â–Ω–æ–π —É–∂–∏–Ω", "type": "veggie_dinner"}
            },
            # –ß–ï–¢–í–ï–†–ì - üç† "–°–õ–û–ñ–ù–´–ï –£–ì–õ–ï–í–û–î–´"
            3: {
                "08:00": {"name": "üç† –£–≥–ª–µ–≤–æ–¥–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "carbs_breakfast"},
                "13:00": {"name": "üçö –£–≥–ª–µ–≤–æ–¥–Ω—ã–π –æ–±–µ–¥", "type": "carbs_lunch"},
                "17:00": {"name": "üç† –°–æ–≤–µ—Ç: –≠–Ω–µ—Ä–≥–∏—è —É–≥–ª–µ–≤–æ–¥–æ–≤", "type": "carbs_advice"},
                "19:00": {"name": "ü•î –£–≥–ª–µ–≤–æ–¥–Ω—ã–π —É–∂–∏–Ω", "type": "carbs_dinner"}
            },
            # –ü–Ø–¢–ù–ò–¶–ê - üéâ "–í–ö–£–°–ù–û –ò –ü–û–õ–ï–ó–ù–û"
            4: {
                "08:00": {"name": "ü•û –ü—è—Ç–Ω–∏—á–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "energy_breakfast"},
                "13:00": {"name": "üçù –ü—è—Ç–Ω–∏—á–Ω—ã–π –æ–±–µ–¥", "type": "mediterranean_lunch"},
                "16:00": {"name": "üç∞ –ü—è—Ç–Ω–∏—á–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "type": "friday_dessert"},
                "17:00": {"name": "üíß –°–æ–≤–µ—Ç: –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å", "type": "water_advice"},
                "19:00": {"name": "üçï –ü—è—Ç–Ω–∏—á–Ω—ã–π —É–∂–∏–Ω", "type": "light_dinner"}
            },
            # –°–£–ë–ë–û–¢–ê - üë®‚Äçüç≥ "–ì–û–¢–û–í–ò–ú –í–ú–ï–°–¢–ï"
            5: {
                "10:00": {"name": "üç≥ –°—É–±–±–æ—Ç–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "type": "sunday_breakfast"},
                "13:00": {"name": "üë®‚Äçüç≥ –°—É–±–±–æ—Ç–Ω—è—è –≥–æ—Ç–æ–≤–∫–∞", "type": "saturday_cooking"},
                "16:00": {"name": "üéÇ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç", "type": "saturday_dessert"},
                "17:00": {"name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–≤–µ—Ç: –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "type": "family_cooking"},
                "19:00": {"name": "üçΩÔ∏è –°—É–±–±–æ—Ç–Ω–∏–π —É–∂–∏–Ω", "type": "hearty_dinner"}
            },
            # –í–û–°–ö–†–ï–°–ï–ù–¨–ï - üìù "–ü–õ–ê–ù–ò–†–£–ï–ú –ù–ï–î–ï–õ–Æ"
            6: {
                "10:00": {"name": "‚òÄÔ∏è –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á", "type": "sunday_breakfast"},
                "13:00": {"name": "üõí –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥", "type": "sunday_lunch"},
                "16:00": {"name": "üçÆ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "type": "sunday_dessert"},
                "17:00": {"name": "üìù –°–æ–≤–µ—Ç: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è", "type": "planning_advice"},
                "19:00": {"name": "üìã –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π —É–∂–∏–Ω", "type": "meal_prep_dinner"}
            }
        }
        
        self.server_schedule = self._convert_schedule_to_server()
        self.is_running = False
        self.telegram = TelegramManager()
        self.generator = SmartContentGenerator()
        
    def _convert_schedule_to_server(self):
        server_schedule = {}
        for day, day_schedule in self.kemerovo_schedule.items():
            server_schedule[day] = {}
            for kemerovo_time, event in day_schedule.items():
                server_time = TimeManager.kemerovo_to_server(kemerovo_time)
                server_schedule[day][server_time] = event
        return server_schedule

    def start_scheduler(self):
        if self.is_running:
            return
            
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π...")
        
        for day, day_schedule in self.server_schedule.items():
            for server_time, event in day_schedule.items():
                self._schedule_event(day, server_time, event)
        
        self.is_running = True
        self._run_scheduler()
    
    def _schedule_event(self, day, server_time, event):
        def job():
            current_times = TimeManager.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['name']}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
            content = self.generator.get_rotated_recipe(event['type'])
            
            if content:
                content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = self.telegram.send_message(content_with_time)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['name']}")
        
        job_func = getattr(schedule.every(), self._get_day_name(day))
        job_func.at(server_time).do(job)
    
    def _get_day_name(self, day_num):
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        return days[day_num]

    def _run_scheduler(self):
        def run():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        Thread(target=run, daemon=True).start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∑–∞–ø—É—â–µ–Ω")

    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ"""
        try:
            current_times = TimeManager.get_current_times()
            current_kemerovo_time = current_times['kemerovo_time'][:5]
            
            current_weekday = TimeManager.get_kemerovo_weekday()
            today_schedule = self.kemerovo_schedule.get(current_weekday, {})
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
            for time_str, event in sorted(today_schedule.items()):
                if time_str > current_kemerovo_time:
                    return time_str, event
            
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–≤—Ç—Ä–∞
            tomorrow = (current_weekday + 1) % 7
            tomorrow_schedule = self.kemerovo_schedule.get(tomorrow, {})
            if tomorrow_schedule:
                first_time = min(tomorrow_schedule.keys())
                return first_time, tomorrow_schedule[first_time]
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return "09:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "general"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
            return "09:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "general"}

# –°–ò–°–¢–ï–ú–ê KEEP-ALIVE
def start_keep_alive_system():
    def keep_alive_ping():
        try:
            if Config.RENDER_APP_URL:
                response = requests.get(f"{Config.RENDER_APP_URL}/health", timeout=10)
                if response.status_code == 200:
                    service_monitor.update_keep_alive()
                    logger.info("‚úÖ Keep-alive ping successful")
            else:
                service_monitor.update_keep_alive()
                logger.info("‚úÖ Keep-alive cycle completed")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive failed: {e}")
    
    def run_keep_alive():
        schedule.every(5).minutes.do(keep_alive_ping)
        
        time.sleep(10)
        keep_alive_ping()
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    keep_alive_thread = Thread(target=run_keep_alive, daemon=True)
    keep_alive_thread.start()
    logger.info("‚úÖ Keep-alive system started")

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
telegram_manager = TelegramManager()
content_generator = SmartContentGenerator()
content_scheduler = ContentScheduler()

# –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
try:
    content_scheduler.start_scheduler()
    start_keep_alive_system()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeManager.get_current_times()
    telegram_manager.send_message(f"""
üé™ <b>–°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ê: –£–ú–ù–ê–Ø –†–û–¢–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê</b>

‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
‚Ä¢ üìä 178 –º–µ—Ç–æ–¥–æ–≤ —Å —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
‚Ä¢ üîÑ 35 –±–∞–∑–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ √ó 90 –¥–Ω–µ–π
‚Ä¢ üß† –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–Ω–µ–π
‚Ä¢ ‚è±Ô∏è –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: 10-30 –º–∏–Ω—É—Ç
‚Ä¢ üçΩÔ∏è –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫–∏: 7 –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –û–±–µ–¥—ã: 7 –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤  
‚Ä¢ –£–∂–∏–Ω—ã: 7 –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –°–æ–≤–µ—Ç—ã: 7 –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –î–µ—Å–µ—Ä—Ç—ã: 7 –±–∞–∑–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

üïê –°–µ—Ä–≤–µ—Ä: {current_times['server_time']}
üïê –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! üë®‚Äçüë©‚Äçüëß‚Äçüë¶
    """)
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–ê–†–®–†–£–¢–´ FLASK (–¥–∞—à–±–æ—Ä–¥ –∏ API endpoints –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–ø–æ–ª–Ω—ã–π –∫–æ–¥ –¥–∞—à–±–æ—Ä–¥–∞ –∏ API endpoints –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏] ...

@app.route('/')
@rate_limit
def smart_dashboard():
    try:
        member_count = telegram_manager.get_member_count()
        next_time, next_event = content_scheduler.get_next_event()
        current_times = TimeManager.get_current_times()
        current_weekday = TimeManager.get_kemerovo_weekday()
        
        weekly_stats = {
            'posts_sent': 42,
            'engagement_rate': 4.8,
            'new_members': 28,
            'total_reactions': 584
        }
        
        content_progress = {
            0: {"completed": 4, "total": 4, "theme": "üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ"},
            1: {"completed": 3, "total": 4, "theme": "üí™ –ë–µ–ª–∫–∏"},
            2: {"completed": 2, "total": 4, "theme": "ü•¨ –û–≤–æ—â–∏"},
            3: {"completed": 4, "total": 4, "theme": "üç† –£–≥–ª–µ–≤–æ–¥—ã"},
            4: {"completed": 1, "total": 5, "theme": "üéâ –í–∫—É—Å–Ω–æ"},
            5: {"completed": 0, "total": 5, "theme": "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏–º"},
            6: {"completed": 0, "total": 5, "theme": "üìù –ü–ª–∞–Ω–∏—Ä—É–µ–º"}
        }
        
        today_schedule = content_scheduler.kemerovo_schedule.get(current_weekday, {})
        monitor_status = service_monitor.get_status()
        
        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</title>
            <style>
                :root {{
                    --primary: #2c3e50;
                    --accent: #3498db;
                    --success: #27ae60;
                    --warning: #f39c12;
                    --danger: #e74c3c;
                    --light: #ecf0f1;
                    --dark: #34495e;
                }}
                
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}
                
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }}
                
                .dashboard {{
                    max-width: 1400px;
                    margin: 0 auto;
                }}
                
                .header {{
                    background: var(--primary);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    margin-bottom: 20px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                }}
                
                .status-bar {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    background: var(--dark);
                    padding: 12px 20px;
                    border-radius: 10px;
                    margin-top: 15px;
                    font-size: 14px;
                }}
                
                .status-item {{
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }}
                
                .widgets-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-bottom: 20px;
                }}
                
                .widget {{
                    background: white;
                    padding: 25px;
                    border-radius: 15px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                    transition: transform 0.3s ease;
                }}
                
                .widget:hover {{
                    transform: translateY(-5px);
                }}
                
                .widget h3 {{
                    color: var(--primary);
                    margin-bottom: 15px;
                    font-size: 18px;
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .stat-card {{
                    background: var(--light);
                    padding: 15px;
                    border-radius: 10px;
                    text-align: center;
                }}
                
                .stat-number {{
                    font-size: 24px;
                    font-weight: bold;
                    color: var(--primary);
                }}
                
                .stat-label {{
                    font-size: 12px;
                    color: var(--dark);
                    margin-top: 5px;
                }}
                
                .progress-bar {{
                    background: #e0e0e0;
                    border-radius: 10px;
                    height: 8px;
                    margin: 10px 0;
                    overflow: hidden;
                }}
                
                .progress-fill {{
                    height: 100%;
                    background: var(--success);
                    border-radius: 10px;
                    transition: width 0.3s ease;
                }}
                
                .schedule-item {{
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    margin: 8px 0;
                    background: var(--light);
                    border-radius: 8px;
                    border-left: 4px solid var(--accent);
                }}
                
                .schedule-time {{
                    font-weight: bold;
                    color: var(--primary);
                    min-width: 60px;
                }}
                
                .schedule-text {{
                    flex: 1;
                    margin-left: 15px;
                }}
                
                .btn {{
                    background: var(--accent);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.3s ease;
                    text-decoration: none;
                    display: inline-block;
                    text-align: center;
                    margin: 5px;
                }}
                
                .btn:hover {{
                    background: #2980b9;
                }}
                
                .btn-success {{
                    background: var(--success);
                }}
                
                .btn-warning {{
                    background: var(--warning);
                }}
                
                .btn-danger {{
                    background: var(--danger);
                }}
                
                .actions-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 10px;
                    margin-top: 15px;
                }}
                
                .metrics-grid {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    gap: 15px;
                }}
                
                .metric-item {{
                    text-align: center;
                    padding: 15px;
                    background: var(--light);
                    border-radius: 10px;
                }}
                
                .automation-status {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 12px;
                    background: var(--light);
                    border-radius: 8px;
                    margin: 8px 0;
                }}
                
                .monitor-info {{
                    background: #e8f5e8;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    border-left: 4px solid var(--success);
                }}
                
                .monitor-item {{
                    display: flex;
                    justify-content: space-between;
                    margin: 5px 0;
                    font-size: 14px;
                }}
                
                @media (max-width: 768px) {{
                    .widgets-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .stats-grid {{
                        grid-template-columns: 1fr;
                    }}
                    .status-bar {{
                        flex-direction: column;
                        gap: 10px;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="dashboard">
                <div class="header">
                    <h1>üé™ –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</h1>
                    <p>–ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ü–∏—Ç–∞–Ω–∏—è - –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
                    
                    <div class="status-bar">
                        <div class="status-item">
                            <span style="color: var(--success)">üü¢</span>
                            <span>–°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê</span>
                        </div>
                        <div class="status-item">
                            <span>üìä</span>
                            <span>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {member_count}</span>
                        </div>
                        <div class="status-item">
                            <span>‚è∞</span>
                            <span>–ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}</span>
                        </div>
                        <div class="status-item">
                            <span>üîÑ</span>
                            <span>–°–ª–µ–¥. –ø–æ—Å—Ç: {next_time} - {next_event['name']}</span>
                        </div>
                    </div>
                </div>
                
                <div class="monitor-info">
                    <h3>üõ°Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è)</h3>
                    <div class="monitor-item">
                        <span>Uptime:</span>
                        <span>{int(monitor_status['uptime_seconds'] // 3600)}—á {int((monitor_status['uptime_seconds'] % 3600) // 60)}–º</span>
                    </div>
                    <div class="monitor-item">
                        <span>Keep-alive ping:</span>
                        <span>{monitor_status['keep_alive_count']} —Ä–∞–∑</span>
                    </div>
                    <div class="monitor-item">
                        <span>–ó–∞–ø—Ä–æ—Å—ã:</span>
                        <span>{monitor_status['requests_handled']}</span>
                    </div>
                    <div class="monitor-item">
                        <span>–ë–∞–∑–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤:</span>
                        <span>35 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</span>
                    </div>
                </div>
                
                <div class="widgets-grid">
                    <div class="widget">
                        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h3>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-number">{member_count}</div>
                                <div class="stat-label">üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">178</div>
                                <div class="stat-label">üìö –ú–µ—Ç–æ–¥–æ–≤ —Ä–æ—Ç–∞—Ü–∏–∏</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{weekly_stats['engagement_rate']}%</div>
                                <div class="stat-label">üí¨ Engagement</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{weekly_stats['total_reactions']}</div>
                                <div class="stat-label">‚≠ê –†–µ–∞–∫—Ü–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ–¥–µ–ª–∏</h3>
                        {"".join([f'''
                        <div style="margin: 10px 0;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                <span>{progress["theme"]}</span>
                                <span>{progress["completed"]}/{progress["total"]}</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: {(progress['completed']/progress['total'])*100}%"></div>
                            </div>
                        </div>
                        ''' for day, progress in content_progress.items()])}
                    </div>
                    
                    <div class="widget">
                        <h3>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è</h3>
                        {"".join([f'''
                        <div class="schedule-item">
                            <div class="schedule-time">{time}</div>
                            <div class="schedule-text">{event["name"]}</div>
                            <div style="color: var(--success)">‚úÖ</div>
                        </div>
                        ''' for time, event in sorted(today_schedule.items())])}
                    </div>
                    
                    <div class="widget">
                        <h3>üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <div class="actions-grid">
                            <button class="btn" onclick="testChannel()">üì§ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</button>
                            <button class="btn btn-success" onclick="testQuickPost()">üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</button>
                            <button class="btn" onclick="sendBreakfast()">üç≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫</button>
                            <button class="btn btn-success" onclick="sendAdvice()">üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç</button>
                            <button class="btn" onclick="sendDessert()">üç∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Å–µ—Ä—Ç</button>
                            <button class="btn btn-warning" onclick="runDiagnostics()">üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</button>
                            <button class="btn" onclick="showManualPost()">üìù –†—É—á–Ω–æ–π –ø–æ—Å—Ç</button>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                        <div class="metrics-grid">
                            <div class="metric-item">
                                <div class="stat-number">4.2%</div>
                                <div class="stat-label">üìà CTR</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">2.4 –º–∏–Ω</div>
                                <div class="stat-label">‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">89</div>
                                <div class="stat-label">üîÑ –†–µ–ø–æ—Å—Ç—ã</div>
                            </div>
                            <div class="metric-item">
                                <div class="stat-number">156</div>
                                <div class="stat-label">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="widget">
                        <h3>üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h3>
                        <div class="automation-status">
                            <span>‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥</span>
                            <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è</span>
                            <span>90 –¥–Ω–µ–π</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è</span>
                            <span>–ê–∫—Ç–∏–≤–Ω–∞</span>
                        </div>
                        <div class="automation-status">
                            <span>‚úÖ Keep-alive</span>
                            <span>–ê–∫—Ç–∏–≤–µ–Ω (5 –º–∏–Ω)</span>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                function testChannel() {{
                    fetch('/test-channel').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ö–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!' : '‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞');
                    }});
                }}
                
                function testQuickPost() {{
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = '‚è≥ –¢–µ—Å—Ç...';
                    btn.disabled = true;
                    
                    fetch('/test-quick-post')
                        .then(r => r.json())
                        .then(data => {{
                            alert(data.status === 'success' ? '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                        }})
                        .catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
                        }})
                        .finally(() => {{
                            btn.textContent = originalText;
                            btn.disabled = false;
                        }});
                }}
                
                function sendBreakfast() {{
                    fetch('/send-breakfast').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –ó–∞–≤—Ç—Ä–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    }});
                }}
                
                function sendAdvice() {{
                    fetch('/send-advice').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –°–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    }});
                }}
                
                function sendDessert() {{
                    fetch('/send-dessert').then(r => r.json()).then(data => {{
                        alert(data.status === 'success' ? '‚úÖ –î–µ—Å–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    }});
                }}
                
                function runDiagnostics() {{
                    fetch('/diagnostics').then(r => r.json()).then(data => {{
                        alert('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ' + (data.status === 'success' ? '‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ' : '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'));
                    }});
                }}
                
                function showManualPost() {{
                    const content = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞):');
                    if (content) {{
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                        const btn = event.target;
                        const originalText = btn.textContent;
                        btn.textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
                        btn.disabled = true;
                        
                        fetch('/quick-post', {{
                            method: 'POST',
                            headers: {{'Content-Type': 'application/json'}},
                            body: JSON.stringify({{content: content}})
                        }}).then(r => r.json()).then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }}
                        }}).catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
                        }}).finally(() => {{
                            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                            btn.textContent = originalText;
                            btn.disabled = false;
                        }});
                    }}
                }}
                
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(() => {{
                    window.location.reload();
                }}, 30000);
            </script>
        </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

# HEALTH CHECK
@app.route('/health')
def health_check():
    return jsonify(service_monitor.get_status())

@app.route('/ping')
def ping():
    return "pong", 200

# API –ú–ê–†–®–†–£–¢–´
@app.route('/test-channel')
@rate_limit
def test_channel():
    success = telegram_manager.send_message("üé™ <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:</b> –ö–ª—É–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ")
    return jsonify({"status": "success" if success else "error"})

@app.route('/test-quick-post')
@rate_limit
def test_quick_post():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        test_content = """üé™ <b>–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –ò–ó –î–ê–®–ë–û–†–î–ê</b>

‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

üí´ <b>–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üìä <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!

#—Ç–µ—Å—Ç #–¥–∞—à–±–æ—Ä–¥ #—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        
        success = telegram_manager.send_message(test_content)
        return jsonify({
            "status": "success" if success else "error", 
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-breakfast')
@rate_limit
def send_breakfast():
    content = content_generator._get_breakfast_option()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-dessert')
@rate_limit
def send_dessert():
    content = content_generator._get_dessert_option()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/send-advice')
@rate_limit
def send_advice():
    content = content_generator._get_advice_option()
    success = telegram_manager.send_message(content)
    return jsonify({"status": "success" if success else "error"})

@app.route('/diagnostics')
@rate_limit
def diagnostics():
    try:
        member_count = telegram_manager.get_member_count()
        current_times = TimeManager.get_current_times()
        
        return jsonify({
            "status": "success",
            "components": {
                "telegram": "active" if member_count > 0 else "error",
                "scheduler": "active" if content_scheduler.is_running else "error",
                "database": "active",
                "keep_alive": "active",
                "rotation_system": "active",
                "duplicate_protection": "active",
                "smart_generator": "active"
            },
            "metrics": {
                "member_count": member_count,
                "system_time": current_times['kemerovo_time'],
                "uptime": service_monitor.get_status()['uptime_seconds'],
                "recipes_total": 178,
                "base_recipes": 35,
                "sent_messages": len(telegram_manager.sent_hashes)
            }
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/quick-post', methods=['POST'])
@rate_limit
def quick_post():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        data = request.get_json()
        content = data.get('content', '')
        
        if not content:
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        current_times = TimeManager.get_current_times()
        content_with_time = f"{content}\n\n‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = telegram_manager.send_message(content_with_time)
        
        if success:
            logger.info(f"‚úÖ –†—É—á–Ω–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {content[:50]}...")
            return jsonify({"status": "success", "message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
        else:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route('/cleanup-messages', methods=['POST'])
@require_api_key
def cleanup_messages():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        days = request.json.get('days', 90)
        telegram_manager.cleanup_old_messages(days)
        return jsonify({"status": "success", "message": f"–û—á–∏—â–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–º–Ω–æ–≥–æ –î–∞—à–±–æ—Ä–¥–∞ @ppsupershef —Å —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π")
    print("üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –ù–∞—É—á–Ω–∞—è –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ")
    print("üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 178 –º–µ—Ç–æ–¥–æ–≤ √ó 35 –±–∞–∑–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    print("üîÑ –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è: 90 –¥–Ω–µ–π –±–µ–∑ –æ—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤")
    print("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –ê–∫—Ç–∏–≤–Ω–∞ (–ø–∞–º—è—Ç—å + –ë–î)")
    print("üî¨ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–Ω–µ–π")
    print("üì∏ –í–∏–∑—É–∞–ª—ã: –ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("üõ°Ô∏è Keep-alive: –ê–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    print("üéÆ –î–∞—à–±–æ—Ä–¥: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )
