import os
import requests
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from threading import Thread
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
app = Flask(__name__)

# –ö–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '@ppsupershef')  # –ü–†–ê–í–ò–õ–¨–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï
YANDEX_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')

class AIContentGenerator:
    def __init__(self):
        self.yandex_gpt = YandexGPT()
        self.deepseek_gpt = DeepSeekGPT()
        
    def generate_content(self, prompt, content_type="recipe"):
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º DeepSeek (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π)
        content = self.deepseek_gpt.generate_content(prompt, content_type)
        if content:
            return f"ü§ñ {content}\n\n#AI_—Ä–µ—Ü–µ–ø—Ç"
        
        # –ï—Å–ª–∏ DeepSeek –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Yandex GPT
        content = self.yandex_gpt.generate_text(prompt)
        if content:
            return f"ü§ñ {content}\n\n#AI_—Ä–µ—Ü–µ–ø—Ç"
        
        return None

class YandexGPT:
    def __init__(self):
        self.api_key = YANDEX_API_KEY
        self.folder_id = YANDEX_FOLDER_ID
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.is_active = bool(self.api_key and self.folder_id and self.api_key != 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
        print(f"ü§ñ Yandex GPT: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
    def generate_text(self, prompt, temperature=0.7):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        if not self.is_active:
            return None
            
        headers = {
            'Authorization': f'Api-Key {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'modelUri': f'gpt://{self.folder_id}/yandexgpt-lite',
            'completionOptions': {
                'stream': False,
                'temperature': temperature,
                'maxTokens': 2000
            },
            'messages': [
                {
                    'role': 'user',
                    'text': prompt
                }
            ]
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data, timeout=20)
            if response.status_code == 200:
                result = response.json()
                return result['result']['alternatives'][0]['message']['text']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT API: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Yandex GPT: {e}")
            return None

class DeepSeekGPT:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.base_url = "https://api.deepseek.com/v1/chat/completions"
        self.is_active = bool(self.api_key and self.api_key != 'sk-8af2b1f4bce441f8a802c2653516237a')
        print(f"ü§ñ DeepSeek GPT: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
    def generate_content(self, prompt, content_type="recipe"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek"""
        if not self.is_active:
            return None
            
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        system_prompts = {
            "recipe": """–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. 
–°–æ–∑–¥–∞–≤–∞–π —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫—É—Å–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ. 
–§–æ—Ä–º–∞—Ç:
üç≥ –ù–ê–ó–í–ê–ù–ò–ï –ë–õ–Æ–î–ê

ü•ó –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ –°–ø–∏—Å–æ–∫

üë®‚Äçüç≥ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –®–∞–≥–∏

üìä –ü–ò–¢–ê–¢–ï–õ–¨–ù–ê–Ø –¶–ï–ù–ù–û–°–¢–¨:
–ö–∞–ª–æ—Ä–∏–∏, –ë–ñ–£, –ø–æ–ª—å–∑–∞

üéØ –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê:""",
            
            "science": """–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.
–§–æ—Ä–º–∞—Ç:
üî¨ –ù–ê–£–ß–ù–´–ô –§–ê–ö–¢

üìö –û–ë–™–Ø–°–ù–ï–ù–ò–ï:
–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è""",
            
            "advice": """–¢—ã –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —à–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä.
–î–∞–≤–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏."""
        }
        
        data = {
            'model': 'deepseek-chat',
            'messages': [
                {
                    'role': 'system',
                    'content': system_prompts.get(content_type, system_prompts["recipe"])
                },
                {
                    'role': 'user', 
                    'content': prompt
                }
            ],
            'temperature': 0.7,
            'max_tokens': 2000
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data, timeout=25)
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å DeepSeek: {e}")
            return None

class EliteContentManager:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL  # @ppsupershef
        self.timezone_offset = 7
        self.ai_generator = AIContentGenerator()
        self.content_strategy = self._initialize_content_strategy()
        
    def get_kemerovo_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)"""
        utc_time = datetime.now(timezone.utc)
        kemerovo_time = utc_time + timedelta(hours=self.timezone_offset)
        return kemerovo_time
    
    def _initialize_content_strategy(self):
        """–≠–ª–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ '–≠–ª–∏–∫—Å–∏—Ä –ñ–∏–∑–Ω–∏'"""
        return {
            "weekly_themes": {
                0: "üß¨ –ù–ê–£–ß–ù–´–ô –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö: –ë–∏–æ—Ö–∏–º–∏—è –ø–∏—Ç–∞–Ω–∏—è",
                1: "üë®‚Äçüç≥ TECH CHECK: –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ–∞", 
                2: "üí¨ –°–†–ï–î–ê –û–¢–í–ï–¢–û–í: –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
                3: "üçΩÔ∏è –†–ï–¶–ï–ü–¢ –ù–ï–î–ï–õ–ò: –®–µ–¥–µ–≤—Ä –æ—Ç –ú–∏—à–ª–µ–Ω",
                4: "üìä –¢–†–ï–ù–î–û–í–ê–Ø –ü–Ø–¢–ù–ò–¶–ê: –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π",
                5: "‚ö° –ë–´–°–¢–†–û & –ó–î–û–†–û–í–û: –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                6: "üéØ –í–û–°–ö–†–ï–°–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢: –ò—Ç–æ–≥–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è"
            },
            "content_pillars": {
                "science": "üß¨ –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é",
                "taste": "üë®‚Äçüç≥ –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —à–µ–¥–µ–≤—Ä—ã", 
                "results": "üí™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            },
            "expert_voices": {
                "nutritionist": "üß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º",
                "chef": "üë®‚Äçüç≥ –®–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω",
                "trainer": "üí™ –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"
            }
        }
    
    def generate_elite_content(self, content_type, weekday=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏"""
        if weekday is None:
            weekday = self.get_kemerovo_time().weekday()
            
        theme = self.content_strategy["weekly_themes"][weekday]
        
        content_generators = {
            'breakfast': self._generate_breakfast_content,
            'lunch': self._generate_lunch_content,
            'dinner': self._generate_dinner_content,
            'snack': self._generate_snack_content,
            'science': self._generate_science_content,
            'visual': self._generate_visual_content,
            'interactive': self._generate_interactive_content,
            'expert_advice': self._generate_expert_advice
        }
        
        content = content_generators[content_type](weekday, theme)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        content += self._add_expert_context(content_type)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        content += self._get_elite_call_to_action()
        
        return content
    
    def _generate_breakfast_content(self, weekday, theme):
        """–≠–ª–∏—Ç–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º"""
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è —Ç–µ–º—ã: {theme}
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–∏—Ä–∫–∞–¥–Ω—ã–º —Ä–∏—Ç–º–∞–º
        - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ë–ñ–£ –¥–ª—è —É—Ç—Ä–∞
        - –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã
        - –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏
        
        –í–∫–ª—é—á–∏ —Ä–∞–∑–¥–µ–ª "üß¨ –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï" –æ—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞
        """
        
        ai_content = self.ai_generator.generate_content(prompt, "recipe")
        if ai_content:
            return f"üåÖ –ó–ê–í–¢–†–ê–ö –ü–†–ï–ú–ò–£–ú-–ö–õ–ê–°–°–ê\n\n{theme}\n\n{ai_content}"
        
        return self._get_static_breakfast(weekday)
    
    def _generate_lunch_content(self, weekday, theme):
        """–≠–ª–∏—Ç–Ω—ã–π –æ–±–µ–¥ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è —Ç–µ–º—ã: {theme}
        
        –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        - –ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å
        - –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –º–æ–∑–≥–∞
        - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–∞–Ω—á–±–æ–∫—Å–∞
        
        –î–æ–±–∞–≤—å —Å–æ–≤–µ—Ç –æ—Ç —à–µ—Ñ–∞ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é
        """
        
        ai_content = self.ai_generator.generate_content(prompt, "recipe")
        if ai_content:
            return f"üçΩÔ∏è –û–ë–ï–î –î–õ–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò\n\n{theme}\n\n{ai_content}"
        
        return self._get_static_lunch(weekday)
    
    def _generate_dinner_content(self, weekday, theme):
        """–≠–ª–∏—Ç–Ω—ã–π —É–∂–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ –¥–ª—è —Ç–µ–º—ã: {theme}
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏:
        - –°–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É
        - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º
        - –õ–µ–≥–∫–∏–π –Ω–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π
        - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
        
        –í–∫–ª—é—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        """
        
        ai_content = self.ai_generator.generate_content(prompt, "recipe")
        if ai_content:
            return f"üåô –£–ñ–ò–ù –î–õ–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø\n\n{theme}\n\n{ai_content}"
        
        return self._get_static_dinner(weekday)
    
    def _generate_science_content(self, weekday, theme):
        """–ù–∞—É—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞"""
        science_topics = [
            "–¶–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ: –∫–∞–∫ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º",
            "–ú–∏–∫—Ä–æ–±–∏–æ–º –∫–∏—à–µ—á–Ω–∏–∫–∞: –∫–∞–∫ –±–∞–∫—Ç–µ—Ä–∏–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—à–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º",
            "–ì–æ—Ä–º–æ–Ω—ã –≥–æ–ª–æ–¥–∞ –∏ –Ω–∞—Å—ã—â–µ–Ω–∏—è: –ª–µ–ø—Ç–∏–Ω –∏ –≥—Ä–µ–ª–∏–Ω",
            "–≠–ø–∏–≥–µ–Ω–µ—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è: –∫–∞–∫ –µ–¥–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–∫—Å–ø—Ä–µ—Å—Å–∏—é –≥–µ–Ω–æ–≤",
            "–í–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ –∏ –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
            "–û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã",
            "–ò–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"
        ]
        
        prompt = f"""
        –†–∞—Å–∫—Ä–æ–π —Ç–µ–º—É: {science_topics[weekday]}
        
        –§–æ—Ä–º–∞—Ç:
        üî¨ –ù–ê–£–ß–ù–´–ô –§–ê–ö–¢
        üìö –ü–†–û–°–¢–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï
        üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï
        üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –≠–ö–°–ü–ï–†–¢–ê
        
        –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫, –ø–æ–Ω—è—Ç–Ω—ã–π –Ω–µ—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
        """
        
        ai_content = self.ai_generator.generate_content(prompt, "science")
        if ai_content:
            return f"üß¨ –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ù–ê–ù–ò–ï\n\n{theme}\n\n{ai_content}"
        
        return self._get_static_science(weekday)
    
    def _generate_visual_content(self, weekday, theme):
        """–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        infographics = [
            {
                'title': 'üìä –ü–†–ê–í–ò–õ–û –¢–ê–†–ï–õ–ö–ò –û–¢ –ú–ò–®–õ–ï–ù',
                'content': '''‚Ä¢ ¬Ω –¢–∞—Ä–µ–ª–∫–∏ - –û–í–û–©–ò (–∫–ª–µ—Ç—á–∞—Ç–∫–∞, –≤–∏—Ç–∞–º–∏–Ω—ã)
‚Ä¢ ¬º –¢–∞—Ä–µ–ª–∫–∏ - –ë–ï–õ–ö–ò (—Ä—ã–±–∞, –∫—É—Ä–∏—Ü–∞, —Ç–æ—Ñ—É)  
‚Ä¢ ¬º –¢–∞—Ä–µ–ª–∫–∏ - –°–õ–û–ñ–ù–´–ï –£–ì–õ–ï–í–û–î–´ (–∫–∏–Ω–æ–∞, –≥—Ä–µ—á–∫–∞)
‚Ä¢ + –ü–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã (–∞–≤–æ–∫–∞–¥–æ, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ)

üéØ –®–µ—Ñ-—Å–æ–≤–µ—Ç: "–ë–∞–ª–∞–Ω—Å —Ç–µ–∫—Å—Ç—É—Ä –∏ –≤–∫—É—Å–æ–≤"''',
                'hashtags': '#–ü—Ä–∞–≤–∏–ª–æ–¢–∞—Ä–µ–ª–∫–∏ #–ú–∏—à–ª–µ–Ω #–ë–∞–ª–∞–Ω—Å'
            },
            {
                'title': '‚è±Ô∏è –¶–ò–†–ö–ê–î–ù–û–ï –ü–ò–¢–ê–ù–ò–ï',
                'content': '''üïó 7-9 –£–¢–†–ê: –ë–µ–ª–∫–æ–≤–æ-—É–≥–ª–µ–≤–æ–¥–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫
üïõ 12-14 –î–ù–Ø: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–µ–¥
üïê 16-17 –í–ï–ß–ï–†–ê: –õ–µ–≥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å
üï¢ 18-20 –í–ï–ß–ï–†–ê: –õ–µ–≥–∫–∏–π —É–∂–∏–Ω

üß¨ –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç: –°–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –Ω–∞ 15%''',
                'hashtags': '#–¶–∏—Ä–∫–∞–¥–Ω–æ–µ–ü–∏—Ç–∞–Ω–∏–µ #–ú–µ—Ç–∞–±–æ–ª–∏–∑–º #–ù–∞—É–∫–∞'
            }
        ]
        
        visual = infographics[weekday % len(infographics)]
        return f"üé® –ü–†–ï–ú–ò–£–ú –ò–ù–§–û–ì–†–ê–§–ò–ö–ê\n\n{visual['title']}\n\n{visual['content']}\n\n{visual['hashtags']}"
    
    def _generate_interactive_content(self, weekday, theme):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞"""
        interactions = [
            "üí¨ **–û–ü–†–û–° –≠–ö–°–ü–ï–†–¢–û–í**: –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –≤–∞—Å —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π?\n\n‚Ä¢ üïí –¢–∞–π–º–∏–Ω–≥ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n‚Ä¢ üõí –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n‚Ä¢ üç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–ª—é–¥\n‚Ä¢ üí™ –ë–∞–ª–∞–Ω—Å –ë–ñ–£\n\nüéØ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö - –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –¥–∞–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            
            "üéØ **–ß–ï–õ–õ–ï–ù–î–ñ –ù–ï–î–ï–õ–ò**: –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –±–ª—é–¥–æ –ø–æ –Ω–∞—à–µ–º—É —Ä–µ—Ü–µ–ø—Ç—É –∏:\n\n1. üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å/—Ä–µ–∑—É–ª—å—Ç–∞—Ç\n2. üí¨ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö\n3. üè∑Ô∏è –û—Ç–º–µ—Ç—å—Ç–µ @ppsupershef\n\nüèÜ –õ—É—á—à–∏–µ —Ä–∞–±–æ—Ç—ã –±—É–¥—É—Ç featured –≤ —Å—Ç–æ—Ä–∏—Å —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π!",
            
            "ü§î **–î–ò–õ–ï–ú–ú–ê –ü–ò–¢–ê–ù–ò–Ø**: '–°—Ç–æ–∏—Ç –ª–∏ –∏—Å–∫–ª—é—á–∞—Ç—å —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?'\n\nüß¨ –ú–Ω–µ–Ω–∏–µ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞: [—Å–∫–æ—Ä–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö]\nüë®‚Äçüç≥ –ú–Ω–µ–Ω–∏–µ —à–µ—Ñ–∞: [—Å–∫–æ—Ä–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö]\n\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ - –æ–±—Å—É–¥–∏–º —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏!"
        ]
        
        return f"üíé –ò–ù–¢–ï–†–ê–ö–¢–ò–í –ü–†–ï–ú–ò–£–ú\n\n{theme}\n\n{interactions[weekday % len(interactions)]}"
    
    def _generate_expert_advice(self, weekday, theme):
        """–°–æ–≤–µ—Ç—ã –æ—Ç –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        prompt = f"""
        –î–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ: {theme}
        
        –í–∫–ª—é—á–∏ –º–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:
        - –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º (–Ω–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞)
        - –®–µ—Ñ-–ø–æ–≤–∞—Ä –ú–∏—à–ª–µ–Ω (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ)  
        - –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é)
        
        –§–æ—Ä–º–∞—Ç:
        üß¨ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì: [–Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]
        üë®‚Äçüç≥ –®–ï–§: [–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç]
        üí™ –¢–†–ï–ù–ï–†: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]
        """
        
        ai_content = self.ai_generator.generate_content(prompt, "advice")
        if ai_content:
            return f"üåü –ö–û–ú–ê–ù–î–ê –≠–ö–°–ü–ï–†–¢–û–í\n\n{theme}\n\n{ai_content}"
        
        return self._get_static_expert_advice(weekday)
    
    def _add_expert_context(self, content_type):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        experts = {
            'breakfast': "üß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: '–ó–∞–≤—Ç—Ä–∞–∫ –∑–∞–¥–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω—É—Å –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å'",
            'lunch': "üë®‚Äçüç≥ –®–µ—Ñ: '–û–±–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –ø–æ —Ç–µ–∫—Å—Ç—É—Ä–∞–º –∏ –≤–∫—É—Å–∞–º'", 
            'dinner': "üí™ –¢—Ä–µ–Ω–µ—Ä: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É–∂–∏–Ω = –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'",
            'science': "üß¨ –ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥: '–ü–∏—Ç–∞–Ω–∏–µ - —ç—Ç–æ –±–∏–æ—Ö–∏–º–∏—è, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å'",
            'visual': "üé® –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞: '–ó–Ω–∞–Ω–∏–µ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ'"
        }
        
        return f"\n\n{experts.get(content_type, 'üåü –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ @ppsupershef')}"
    
    def _get_elite_call_to_action(self):
        """–≠–ª–∏—Ç–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"""
        return """

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üíé **–ü–û–ù–†–ê–í–ò–õ–û–°–¨? –ü–û–î–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!**

üëâ @ppsupershef - —ç–ª–∏—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏

üí¨ **–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï!** –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã —á–∏—Ç–∞—é—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –ª—É—á—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã

üëá **–û–¢–ú–ï–¢–¨–¢–ï –†–ï–ê–ö–¶–ò–ï–ô:**
‚ù§Ô∏è - –í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç | üî• - –ü—Ä–∏–º–µ–Ω—é | üìö - –£–∑–Ω–∞–ª –Ω–æ–≤–æ–µ

üì§ **–ü–û–î–ï–õ–ò–¢–ï–°–¨** —Å –¥—Ä—É–∑—å—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!

üè∑Ô∏è #ppsupershef #–ú–∏—à–ª–µ–Ω #–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è
"""
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∫–∞–∫ fallback
    def _get_static_breakfast(self, weekday):
        breakfasts = [
            "ü•£ –û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 200–º–ª\n‚Ä¢ –Ø–≥–æ–¥—ã - 100–≥\n‚Ä¢ –ú–µ–¥ - 1 —á.–ª.\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):\n1. –ó–∞–ª–∏—Ç—å –æ–≤—Å—è–Ω–∫—É –º–æ–ª–æ–∫–æ–º\n2. –í–∞—Ä–∏—Ç—å 5 –º–∏–Ω—É—Ç\n3. –î–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã –∏ –º–µ–¥\n\nüìä –ö–ë–ñ–£: 250 –∫–∫–∞–ª",
            "üç≥ –û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä - 1 —à—Ç\n‚Ä¢ –ü–µ—Ä–µ—Ü - 0.5 —à—Ç\n‚Ä¢ –ó–µ–ª–µ–Ω—å\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç):\n1. –í–∑–±–∏—Ç—å —è–π—Ü–∞\n2. –û–±–∂–∞—Ä–∏—Ç—å –æ–≤–æ—â–∏\n3. –ó–∞–ª–∏—Ç—å —è–π—Ü–∞–º–∏\n4. –ì–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π\n\nüìä –ö–ë–ñ–£: 280 –∫–∫–∞–ª"
        ]
        return f"üåÖ –ó–ê–í–¢–†–ê–ö –ü–†–ï–ú–ò–£–ú\n\n{breakfasts[weekday % len(breakfasts)]}"
    
    def _get_static_lunch(self, weekday):
        lunches = [
            "üç≤ –ö—É—Ä–∏–Ω—ã–π —Å—É–ø\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 2 —à—Ç\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç\n‚Ä¢ –õ–∞–ø—à–∞ - 50–≥\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (30 –º–∏–Ω—É—Ç):\n1. –°–≤–∞—Ä–∏—Ç—å –±—É–ª—å–æ–Ω\n2. –î–æ–±–∞–≤–∏—Ç—å –æ–≤–æ—â–∏\n3. –î–æ–±–∞–≤–∏—Ç—å –ª–∞–ø—à—É\n\nüìä –ö–ë–ñ–£: 250 –∫–∫–∞–ª"
        ]
        return f"üçΩÔ∏è –û–ë–ï–î –ü–†–ï–ú–ò–£–ú\n\n{lunches[weekday % len(lunches)]}"
    
    def _get_static_dinner(self, weekday):
        dinners = [
            "üçΩÔ∏è –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞\n\nü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ –†—ã–±–∞ - 200–≥\n‚Ä¢ –õ–∏–º–æ–Ω - 0.5 —à—Ç\n‚Ä¢ –ó–µ–ª–µ–Ω—å\n‚Ä¢ –°–ø–µ—Ü–∏–∏\n\nüë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (25 –º–∏–Ω—É—Ç):\n1. –ó–∞–º–∞—Ä–∏–Ω–æ–≤–∞—Ç—å —Ä—ã–±—É\n2. –ó–∞–ø–µ—á—å 20 –º–∏–Ω—É—Ç\n3. –ü–æ–¥–∞—Ç—å —Å –ª–∏–º–æ–Ω–æ–º\n\nüìä –ö–ë–ñ–£: 220 –∫–∫–∞–ª"
        ]
        return f"üåô –£–ñ–ò–ù –ü–†–ï–ú–ò–£–ú\n\n{dinners[weekday % len(dinners)]}"
    
    def _get_static_science(self, weekday):
        sciences = [
            "üß¨ –¶–ò–†–ö–ê–î–ù–´–ï –†–ò–¢–ú–´\n\nüìö –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç: –ü—Ä–∏–µ–º –ø–∏—â–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –Ω–∞ 10-15%\n\nüí° –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–≤—Ç—Ä–∞–∫–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è, —É–∂–∏–Ω–∞–π—Ç–µ –∑–∞ 3-4 —á–∞—Å–∞ –¥–æ —Å–Ω–∞"
        ]
        return f"üî¨ –ù–ê–£–ö–ê –ü–ò–¢–ê–ù–ò–Ø\n\n{sciences[weekday % len(sciences)]}"
    
    def _get_static_expert_advice(self, weekday):
        advices = [
            "üíé –°–û–í–ï–¢ –ö–û–ú–ê–ù–î–´\n\nüß¨ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: '–°–ª—É—à–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≥–æ–ª–æ–¥–∞ –∏ –Ω–∞—Å—ã—â–µ–Ω–∏—è'\nüë®‚Äçüç≥ –®–µ—Ñ: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'\nüí™ –¢—Ä–µ–Ω–µ—Ä: '–°–æ—á–µ—Ç–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ —Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é'"
        ]
        return f"üåü –≠–ö–°–ü–ï–†–¢–ù–´–ô –°–û–í–ï–¢\n\n{advices[weekday % len(advices)]}"

    def run_elite_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —ç–ª–∏—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        schedule.every().day.at("09:00").do(lambda: self.publish_content('breakfast'))
        schedule.every().day.at("13:00").do(lambda: self.publish_content('lunch')) 
        schedule.every().day.at("15:00").do(lambda: self.publish_content('science'))
        schedule.every().day.at("18:00").do(lambda: self.publish_content('interactive'))
        schedule.every().day.at("19:00").do(lambda: self.publish_content('dinner'))
        schedule.every().day.at("21:00").do(lambda: self.publish_content('expert_advice'))
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—á–µ—Ä–µ–∑ –¥–µ–Ω—å)
        if self.get_kemerovo_time().day % 2 == 0:
            schedule.every().day.at("16:00").do(lambda: self.publish_content('visual'))
        
        kemerovo_time = self.get_kemerovo_time()
        print(f"üéØ –≠–õ–ò–¢–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û!")
        print(f"üìç –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time.strftime('%H:%M')}")
        print(f"üì± –ö–∞–Ω–∞–ª: @ppsupershef")
        print(f"ü§ñ Yandex GPT: {'‚úÖ' if self.ai_generator.yandex_gpt.is_active else '‚ùå'}")
        print(f"ü§ñ DeepSeek: {'‚úÖ' if self.ai_generator.deepseek_gpt.is_active else '‚ùå'}")
        print("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("ü•û 09:00 - –≠–ª–∏—Ç–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫")
        print("üçΩÔ∏è 13:00 - –û–±–µ–¥ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏") 
        print("üß¨ 15:00 - –ù–∞—É—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è")
        print("üí¨ 18:00 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤")
        print("üçΩÔ∏è 19:00 - –£–∂–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        print("üåü 21:00 - –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        print("üé® 16:00 - –í–∏–∑—É–∞–ª (—á–µ—Ä–µ–∑ –¥–µ–Ω—å)")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        print("üß™ –¢–µ—Å—Ç —ç–ª–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.publish_content('breakfast')
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def publish_content(self, content_type):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        kemerovo_time = self.get_kemerovo_time()
        print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {content_type}... ({kemerovo_time.strftime('%H:%M')})")
        
        message = self.generate_elite_content(content_type)
        success = self.send_to_telegram(message)
        
        if success:
            print(f"‚úÖ {content_type.upper()} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ @ppsupershef!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {content_type}")
    
    def send_to_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token or not self.channel:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª!")
            return False
            
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.channel,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                kemerovo_time = self.get_kemerovo_time()
                print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ @ppsupershef: {kemerovo_time.strftime('%H:%M')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
elite_channel = EliteContentManager()

def start_elite_scheduler():
    elite_channel.run_elite_scheduler()

scheduler_thread = Thread(target=start_elite_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

@app.route('/')
def home():
    kemerovo_time = elite_channel.get_kemerovo_time()
    weekday = kemerovo_time.weekday()
    theme = elite_channel.content_strategy["weekly_themes"][weekday]
    
    return f"""
    <html>
        <head>
            <title>@ppsupershef - –≠–ª–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
                .status {{ padding: 10px; margin: 10px 0; border-radius: 5px; }}
                .success {{ background: #d4edda; color: #155724; }}
                .warning {{ background: #fff3cd; color: #856404; }}
                .schedule {{ background: #e2e3e5; padding: 15px; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üíé @ppsupershef - –≠–ª–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h1>
                
                <div class="status success">
                    <strong>üìç –ö–µ–º–µ—Ä–æ–≤–æ:</strong> {kemerovo_time.strftime('%H:%M')} | 
                    <strong>üéØ –¢–µ–º–∞:</strong> {theme} |
                    <strong>üì± –ö–∞–Ω–∞–ª:</strong> @ppsupershef
                </div>
                
                <div class="status {'success' if elite_channel.ai_generator.yandex_gpt.is_active else 'warning'}">
                    <strong>ü§ñ Yandex GPT:</strong> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if elite_channel.ai_generator.yandex_gpt.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                </div>
                
                <div class="status {'success' if elite_channel.ai_generator.deepseek_gpt.is_active else 'warning'}">
                    <strong>ü§ñ DeepSeek:</strong> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if elite_channel.ai_generator.deepseek_gpt.is_active else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                </div>
                
                <div class="schedule">
                    <h3>üéØ –≠–ª–∏—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</h3>
                    <ul>
                        <li>ü•û 09:00 - –≠–ª–∏—Ç–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫</li>
                        <li>üçΩÔ∏è 13:00 - –û–±–µ–¥ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
                        <li>üß¨ 15:00 - –ù–∞—É—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è</li>
                        <li>üé® 16:00 - –í–∏–∑—É–∞–ª (—á–µ—Ä–µ–∑ –¥–µ–Ω—å)</li>
                        <li>üí¨ 18:00 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤</li>
                        <li>üçΩÔ∏è 19:00 - –£–∂–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</li>
                        <li>üåü 21:00 - –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</li>
                    </ul>
                </div>
                
                <p>
                    <a href="/test">üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã</a> | 
                    <a href="/force/breakfast">üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞</a> |
                    <a href="/debug">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</a>
                </p>
            </div>
        </body>
    </html>
    """

@app.route('/test')
def test():
    test_message = "üß™ –¢–ï–°–¢ –≠–õ–ò–¢–ù–û–ô –°–ò–°–¢–ï–ú–´\n\n–°–∏—Å—Ç–µ–º–∞ @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–µ! ‚úÖ\n\nüíé –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: @ppsupershef"
    success = elite_channel.send_to_telegram(test_message)
    return f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ @ppsupershef: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}"

@app.route('/force/<content_type>')
def force_publish(content_type):
    valid_types = ['breakfast', 'lunch', 'dinner', 'science', 'visual', 'interactive', 'expert_advice']
    if content_type not in valid_types:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(valid_types)}"
    
    elite_channel.publish_content(content_type)
    return f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {content_type} –≤ @ppsupershef"

@app.route('/debug')
def debug():
    kemerovo_time = elite_channel.get_kemerovo_time()
    return jsonify({
        "system": "@ppsupershef - –≠–ª–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "version": "2.0",
        "channel": "@ppsupershef",
        "kemerovo_time": kemerovo_time.strftime('%Y-%m-%d %H:%M:%S'),
        "ai_status": {
            "yandex_gpt": elite_channel.ai_generator.yandex_gpt.is_active,
            "deepseek": elite_channel.ai_generator.deepseek_gpt.is_active
        },
        "telegram": {
            "token_set": bool(TELEGRAM_TOKEN),
            "channel_set": bool(TELEGRAM_CHANNEL)
        },
        "status": "elite_active"
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–ª–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üíé –ö–∞–Ω–∞–ª: @ppsupershef")
    print(f"üéØ –†–µ–∂–∏–º: –ü–†–ï–ú–ò–£–ú –ö–û–ù–¢–ï–ù–¢")
    app.run(host='0.0.0.0', port=port)
