import os
import logging
import requests
import json
import time
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps
import secrets

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET', secrets.token_hex(32))

# üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class SecureConfig:
    def __init__(self):
        load_dotenv()
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        self.TELEGRAM_BOT_TOKEN = self._get_secure_env('TELEGRAM_BOT_TOKEN')
        self.YANDEX_GPT_API_KEY = self._get_secure_env('YANDEX_GPT_API_KEY')
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.TELEGRAM_CHANNEL = self._get_secure_env('TELEGRAM_CHANNEL', '-1003152210862')
        self.TELEGRAM_GROUP = self._get_secure_env('TELEGRAM_GROUP', '@ppsupershef_chat')
        self.YANDEX_FOLDER_ID = self._get_secure_env('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
        self.DEEPSEEK_API_KEY = self._get_secure_env('DEEPSEEK_API_KEY', '')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        self.SERVER_TIMEZONE = pytz.timezone('UTC')
        self.KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')
        
        self._validate_config()
    
    def _get_secure_env(self, key, default=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key, default)
        if value is None:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {key}")
        return value
    
    def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.TELEGRAM_BOT_TOKEN:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        if not self.YANDEX_GPT_API_KEY:
            logger.warning("‚ö†Ô∏è YANDEX_GPT_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# üîí –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def rate_limit(requests_per_minute=30):
    def decorator(f):
        requests = []
        lock = Lock()
        
        @wraps(f)
        def decorated_function(*args, **kwargs):
            with lock:
                now = time.time()
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                requests[:] = [req for req in requests if now - req < 60]
                
                if len(requests) >= requests_per_minute:
                    return jsonify({
                        "status": "error", 
                        "message": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
                    }), 429
                
                requests.append(now)
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = SecureConfig()
    logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# üé® –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class ModernContentFormatter:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    THEMES = {
        'neuro': {
            'emoji': 'üß†',
            'name': '–ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ',
            'color': '#8B5CF6',
            'triggers': [
                "–Ø—Å–Ω–æ—Å—Ç—å —É–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≤—Ç—Ä–∞–∫–∞",
                "–ù–µ–π—Ä–æ–Ω—ã –ª—é–±—è—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∏—â—É",
                "–ú–æ–∑–≥ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ç–æ–ø–ª–∏–≤–∞"
            ]
        },
        'energy': {
            'emoji': '‚ö°', 
            'name': '–≠–Ω–µ—Ä–≥–∏—è',
            'color': '#F59E0B',
            'triggers': [
                "–ó–∞—Ä—è–¥–∏—Ç–µ—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å",
                "–¢–æ–ø–ª–∏–≤–æ –¥–ª—è –≤–∞—à–∏—Ö –∞–º–±–∏—Ü–∏–π",
                "–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π"
            ]
        },
        'longevity': {
            'emoji': 'üõ°Ô∏è',
            'name': '–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ', 
            'color': '#10B981',
            'triggers': [
                "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤–æ–µ –±—É–¥—É—â–µ–µ",
                "–ö–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ - —à–∞–≥ –∫ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é",
                "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è"
            ]
        },
        'gastronomy': {
            'emoji': 'üçΩÔ∏è',
            'name': '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'color': '#EC4899', 
            'triggers': [
                "–ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
                "–ò–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π —Ç–∞—Ä–µ–ª–∫–µ",
                "–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ"
            ]
        },
        'analytics': {
            'emoji': 'üìä',
            'name': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'color': '#3B82F6',
            'triggers': [
                "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π", 
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è"
            ]
        },
        'shopping': {
            'emoji': 'üõí',
            'name': '–ü–æ–∫—É–ø–∫–∏',
            'color': '#8B5CF6',
            'triggers': [
                "–£–º–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ - –≤–∞—à –≤—ã–±–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è"
            ]
        },
        'rituals': {
            'emoji': 'üìà',
            'name': '–†–∏—Ç—É–∞–ª—ã',
            'color': '#F59E0B',
            'triggers': [
                "–°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
                "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ù–∞—á–Ω–∏—Ç–µ –Ω–µ–¥–µ–ª—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è"
            ]
        }
    }
    
    # –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø YANDEX GPT
    SYSTEM_PROMPT = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –∏ –Ω–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏—é, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –®–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.

–§–ò–õ–û–°–û–§–ò–Ø: 
"–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å"

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:
1. –ù–∞—á–∏–Ω–∞–π —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∂–∏–∑–Ω–∏
2. –î–æ–±–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã –¢–ï–ó–ò–°–ù–û:
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã/–º–∏–Ω–µ—Ä–∞–ª—ã  
   ‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
3. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
4. –û–±—ä—è—Å–Ω—è–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º –¢–ï–ó–ò–°–ù–û:
   ‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–ª–µ
   ‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–º–∞
   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–¶–ï–ü–¢–û–í:
- –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –ú–∏—à–ª–µ–Ω, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞
- –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
- –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π

–¢–û–ù:
- –î—Ä—É–∂–µ—Å–∫–∏–π, –Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞  
- –ù–∞—É—á–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
    
    @staticmethod
    def create_modern_message(theme_type, title, content, recipe_type):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        theme = ModernContentFormatter.THEMES.get(theme_type, ModernContentFormatter.THEMES['neuro'])
        
        header = f"""üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø</b>

{theme['emoji']} <b>{theme['name'].upper()}</b>

{random.choice(theme['triggers'])}

<b>{title}</b>"""
        
        footer = f"""
---
üí´ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è!</b>

üì¢ <b>–ö–∞–Ω–∞–ª:</b> @ppsupershef
üí¨ <b>–ß–∞—Ç:</b> @ppsupershef_chat

üòã –í–∫—É—Å–Ω–æ | üí™ –ü–æ–ª–µ–∑–Ω–æ | üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é

#–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #{theme_type}"""
        
        return header + "\n\n" + content + footer

# üïê –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(config.SERVER_TIMEZONE)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        try:
            server_now = datetime.now(config.SERVER_TIMEZONE)
            kemerovo_now = datetime.now(config.KEMEROVO_TIMEZONE)
            
            return {
                'server_time': server_now.strftime('%H:%M:%S'),
                'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
                'server_timezone': str(config.SERVER_TIMEZONE),
                'kemerovo_timezone': str(config.KEMEROVO_TIMEZONE)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return {
                'server_time': '00:00:00',
                'kemerovo_time': '00:00:00',
                'server_timezone': 'UTC',
                'kemerovo_timezone': 'Asia/Novokuznetsk'
            }

# üîß –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Telegram
class SecureTelegramManager:
    def __init__(self):
        self.token = config.TELEGRAM_BOT_TOKEN
        self.channel = config.TELEGRAM_CHANNEL
        self.session = requests.Session()
        self.session.timeout = (10, 30)  # 10s connect, 30s read
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.message_cache = set()
        self.cache_lock = Lock()
    
    def _create_message_hash(self, content):
        """–°–æ–∑–¥–∞–µ—Ç —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import hashlib
        return hashlib.md5(content.encode()).hexdigest()
    
    @rate_limit(requests_per_minute=20)
    def send_message(self, content, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            message_hash = self._create_message_hash(content)
            with self.cache_lock:
                if message_hash in self.message_cache:
                    logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    return False
                self.message_cache.add(message_hash)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if len(self.message_cache) > 100:
                    self.message_cache.clear()
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': content,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = self.session.post(url, json=payload)
            
            if response.status_code == 429:
                # Rate limiting - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                retry_after = response.json().get('parameters', {}).get('retry_after', 30)
                logger.warning(f"‚ö†Ô∏è Rate limit, –∂–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥")
                time.sleep(retry_after)
                return self.send_message(content, parse_mode)
            
            result = response.json()
            
            if result.get('ok'):
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {result.get('description')}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                with self.cache_lock:
                    self.message_cache.discard(message_hash)
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            with self.cache_lock:
                self.message_cache.discard(message_hash)
            return False
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = self.session.get(url)
            result = response.json()
            
            if result.get('ok'):
                return {
                    "status": "success",
                    "bot_username": result['result']['username'],
                    "bot_id": result['result']['id']
                }
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"}
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def get_channel_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/getChat"
            payload = {
                'chat_id': self.channel
            }
            response = self.session.post(url, json=payload)
            result = response.json()
            
            if result.get('ok'):
                return {
                    "status": "success",
                    "title": result['result'].get('title', 'Unknown'),
                    "username": result['result'].get('username', 'Unknown'),
                    "type": result['result'].get('type', 'Unknown')
                }
            return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"}
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def get_member_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            url = f"https://api.telegram.org/bot{self.token}/getChatMembersCount"
            payload = {
                'chat_id': self.channel
            }
            response = self.session.post(url, json=payload)
            result = response.json()
            
            if result.get('ok'):
                return result['result']
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0

# üß† –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ù–¢–ï–ù–¢–ê –° YANDEX GPT
class AIContentGenerator:
    def __init__(self):
        self.formatter = ModernContentFormatter()
        self.telegram = SecureTelegramManager()
        self.yandex_key = config.YANDEX_GPT_API_KEY
        self.yandex_folder = config.YANDEX_FOLDER_ID
        
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 2000
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': self.formatter.SYSTEM_PROMPT
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT...")
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                content = result['result']['alternatives'][0]['message']['text']
                logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return content
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None

    def generate_daily_content(self, day_type, meal_type="breakfast"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É –¥–Ω—è —á–µ—Ä–µ–∑ AI"""
        content_map = {
            'monday': {
                'theme': 'neuro', 
                'titles': {
                    'breakfast': 'üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê',
                    'lunch': 'üéØ –û–ë–ï–î –î–õ–Ø –§–û–ö–£–°–ê –ò –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–ò',
                    'dinner': 'üåô –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–©–ò–ô –£–ñ–ò–ù –î–õ–Ø –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´',
                    'dessert': 'üç´ –£–ú–ù–´–ô –î–ï–°–ï–†–¢ –î–õ–Ø –ö–û–ì–ù–ò–¢–ò–í–ù–´–• –§–£–ù–ö–¶–ò–ô',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ñ–æ–∫—É—Å–∞ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤–∏—Ç –º–æ–∑–≥ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –£–ú–ù–û–ì–û –î–ï–°–ï–†–¢–ê –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è –º–æ–∑–≥–∞ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
                }
            },
            'tuesday': {
                'theme': 'energy',
                'titles': {
                    'breakfast': '‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø',
                    'lunch': 'üèÉ –û–ë–ï–î –î–õ–Ø –í–´–ù–û–°–õ–ò–í–û–°–¢–ò –ò –≠–ù–ï–†–ì–ò–ò', 
                    'dinner': 'üí™ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–©–ò–ô –£–ñ–ò–ù –î–õ–Ø –ú–´–®–¶',
                    'dessert': 'üçì –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ô –î–ï–°–ï–†–¢ –î–õ–Ø –¢–û–ù–£–°–ê',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–û–ì–û –ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –í–´–ù–û–°–õ–ò–í–û–°–¢–ò'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–∂–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ - –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ã—à—Ü –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–û–ì–û –î–ï–°–ï–†–¢–ê –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–æ–Ω—É—Å–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏."""
                }
            },
            'wednesday': {
                'theme': 'longevity',
                'titles': {
                    'breakfast': 'üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø',
                    'lunch': 'üåø –û–ë–ï–î –î–õ–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø',
                    'dinner': 'üåô –£–ñ–ò–ù –î–õ–Ø –ö–õ–ï–¢–û–ß–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø',
                    'dessert': 'üçá –ê–ù–¢–ò–≠–ô–î–ñ –î–ï–°–ï–†–¢ –î–õ–Ø –ú–û–õ–û–î–û–°–¢–ò',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –ü–ò–¢–ê–ù–ò–Ø –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –ì–ï–ù–û–í –î–û–õ–ì–û–õ–ï–¢–ò–Ø'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ —Å –≥–µ—Ä–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–µ—Ç–æ—á–Ω–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ê–ù–¢–ò–≠–ô–î–ñ –î–ï–°–ï–†–¢–ê –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–ª–æ–¥–æ—Å—Ç–∏.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–µ–Ω–æ–≤ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è –∏ –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
                }
            },
            'thursday': {
                'theme': 'gastronomy',
                'titles': {
                    'breakfast': 'üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö',
                    'lunch': 'üçΩÔ∏è –†–ï–°–¢–û–†–ê–ù–ù–´–ô –û–ë–ï–î –° –ü–û–õ–¨–ó–û–ô',
                    'dinner': 'üåô –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –£–ñ–ò–ù',
                    'dessert': 'üé≠ –®–ï–§-–î–ï–°–ï–†–¢ –û–¢ –ú–ò–®–õ–ï–ù –° –ü–û–õ–¨–ó–û–ô',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –û–°–û–ó–ù–ê–ù–ò–Ø –í –ü–ò–¢–ê–ù–ò–ò'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–≥–æ –æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∫—É—Å–Ω—ã–º.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ –¥–ª—è –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –®–ï–§-–î–ï–°–ï–†–¢–ê –û–¢ –ú–ò–®–õ–ï–ù —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–π.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–∞ –∏ –ø–æ–ª—å–∑—ã."""
                }
            },
            'friday': {
                'theme': 'analytics', 
                'titles': {
                    'breakfast': 'üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö',
                    'lunch': 'üéØ –û–ë–ï–î –î–õ–Ø –ü–û–î–í–ï–î–ï–ù–ò–Ø –ò–¢–û–ì–û–í',
                    'dinner': 'üåô –£–ñ–ò–ù –î–õ–Ø –ü–õ–ê–ù–û–í –ù–ê –í–´–•–û–î–ù–´–ï',
                    'dessert': 'üçç –î–ï–°–ï–†–¢ –î–õ–Ø –û–°–ú–´–°–õ–ï–ù–ò–Ø –ù–ï–î–ï–õ–ò',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–î–•–û–î–ê –ö –ü–ò–¢–ê–ù–ò–Æ'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –Ω–µ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–∏–ª—ã.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –î–ï–°–ï–†–¢–ê –î–õ–Ø –û–°–ú–´–°–õ–ï–ù–ò–Ø, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø–∏—Ç–∞–Ω–∏—é (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞."""
                }
            },
            'saturday': {
                'theme': 'shopping',
                'titles': {
                    'breakfast': 'ü•ó –°–£–ë–ë–û–¢–ù–ò–ô –ë–†–ê–ù–ß',
                    'lunch': 'üç≤ –°–ï–ú–ï–ô–ù–´–ô –û–ë–ï–î',
                    'dinner': 'üåô –°–£–ë–ë–û–¢–ù–ò–ô –£–ñ–ò–ù',
                    'dessert': 'üßÅ –°–£–ë–ë–û–¢–ù–ò–ô –î–ï–°–ï–†–¢ –î–õ–Ø –°–ï–ú–¨–ò',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –£–ú–ù–´–• –ü–†–û–î–£–ö–¢–û–í–´–• –í–´–ë–û–†–û–í'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —Å—É–±–±–æ—Ç–Ω–µ–≥–æ –±—Ä–∞–Ω—á–∞ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —Å–µ–º–µ–π–Ω–æ–≥–æ –æ–±–µ–¥–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å—É–±–±–æ—Ç–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –°–ï–ú–ï–ô–ù–û–ì–û –°–£–ë–ë–û–¢–ù–ï–ì–û –î–ï–°–ï–†–¢–ê, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –¥–µ—Ç—è–º, –∏ –≤–∑—Ä–æ—Å–ª—ã–º.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø —É–º–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –≤—ã–±–æ—Ä–æ–≤ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ–º—å–∏ –∏ –±—é–¥–∂–µ—Ç–∞."""
                }
            },
            'sunday': {
                'theme': 'rituals',
                'titles': {
                    'breakfast': 'üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ',
                    'lunch': 'ü•ò –í–û–°–ö–†–ï–°–ù–´–ô –û–ë–ï–î', 
                    'dinner': 'üåô –í–û–°–ö–†–ï–°–ù–´–ô –£–ñ–ò–ù –î–õ–Ø –ü–û–î–ì–û–¢–û–í–ö–ò –ö –ù–ï–î–ï–õ–ï',
                    'dessert': 'üçÆ –í–û–°–ö–†–ï–°–ù–´–ô –î–ï–°–ï–†–¢-–†–ò–¢–£–ê–õ –î–õ–Ø –ù–ê–°–¢–†–û–Ø',
                    'advice': 'üí° –ü–†–ò–ù–¶–ò–ü –ü–ò–¢–ê–¢–ï–õ–¨–ù–´–• –†–ò–¢–£–ê–õ–û–í –î–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –ñ–ò–ó–ù–ò'
                },
                'prompts': {
                    'breakfast': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±—Ä–∞–Ω—á–∞ –∫–∞–∫ —Ä–∏—Ç—É–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –Ω–µ–¥–µ–ª–µ.""",
                    'lunch': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.""",
                    'dinner': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –Ω–µ–¥–µ–ª—é.""",
                    'dessert': """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –í–û–°–ö–†–ï–°–ù–û–ì–û –î–ï–°–ï–†–¢–ê-–†–ò–¢–£–ê–õ–ê –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é.""",
                    'advice': """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –ø–æ–ª—å–∑—ã –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏."""
                }
            }
        }
        
        day_data = content_map.get(day_type, content_map['monday'])
        theme = day_data['theme']
        title = day_data['titles'].get(meal_type, day_data['titles']['breakfast'])
        base_prompt = day_data['prompts'].get(meal_type, day_data['prompts']['breakfast'])
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        if meal_type == 'advice':
            full_prompt = f"""{base_prompt}

–§–æ—Ä–º–∞—Ç: –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) + –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã

–¢–µ–º–∞ –¥–Ω—è: {theme} - {day_data['titles']['breakfast'].split(' ', 1)[1]}

–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."""
        else:
            full_prompt = f"""{base_prompt}

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "{random.choice(self.formatter.THEMES[theme]['triggers'])}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {"–¥–æ 15 –º–∏–Ω—É—Ç" if meal_type == "breakfast" else "–¥–æ 30 –º–∏–Ω—É—Ç" if meal_type == "lunch" else "–¥–æ 25 –º–∏–Ω—É—Ç" if meal_type == "dinner" else "–¥–æ 20 –º–∏–Ω—É—Ç"}
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
- –£—á–∏—Ç—ã–≤–∞–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –î–æ–±–∞–≤—å –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã

–§–æ—Ä–º–∞—Ç:
1. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
2. –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
3. –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã
4. –°–æ–≤–µ—Ç—ã –ø–æ —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–µ"""
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ AI
        ai_content = self.generate_with_yandex_gpt(full_prompt)
        
        if ai_content:
            content = ai_content
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {meal_type}")
        else:
            # –§–æ–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content = self._generate_fallback_content(theme, title, meal_type)
            logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–æ–ª–±—ç–∫-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {meal_type}")
        
        return self.formatter.create_modern_message(theme, title, content, meal_type)
    
    def _generate_fallback_content(self, theme, title, meal_type):
        """–§–æ–ª–±—ç–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if meal_type == 'advice':
            advice_map = {
                'neuro': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–ö–û–†–ú–ò–¢–ï –ú–û–ó–ì, –ê –ù–ï –≠–ú–û–¶–ò–ò"</b>

üí° –ö–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–∞: "–ß—Ç–æ –Ω—É–∂–Ω–æ –º–æ–µ–º—É –º–æ–∑–≥—É –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏?"

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ú–æ–∑–≥ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç 20% –≤—Å–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ª–∞
‚Ä¢ –û–º–µ–≥–∞-3 —É–∫—Ä–µ–ø–ª—è—é—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
‚Ä¢ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –∑–∞—â–∏—â–∞—é—Ç –æ—Ç –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏""",
                'energy': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–¢–û–ü–õ–ò–í–û –î–õ–Ø –ú–ò–¢–û–•–û–ù–î–†–ò–ô"</b>

üí° –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä—è–∂–∞—é—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—Ç–æ–ª—è—é—Ç –≥–æ–ª–æ–¥.

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç 90% —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ª–∞
‚Ä¢ –ú–∞–≥–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ê–¢–§-—Å–∏–Ω—Ç–µ–∑
‚Ä¢ –ö–æ—ç–Ω–∑–∏–º Q10 —É–ª—É—á—à–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏""",
                'longevity': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–ê–ö–¢–ò–í–ò–†–£–ô–¢–ï –ì–ï–ù–´ –î–û–õ–ì–û–õ–ï–¢–ò–Ø"</b>

üí° –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–∞—à–µ–π —Ç–∞—Ä–µ–ª–∫–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –°–∏—Ä—Ç—É–∏–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –ê—É—Ç–æ—Ñ–∞–≥–∏—è –æ—á–∏—â–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
‚Ä¢ –¢–µ–ª–æ–º–µ—Ä–∞–∑–∞ –∑–∞—â–∏—â–∞–µ—Ç —Ö—Ä–æ–º–æ—Å–æ–º—ã

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è, —É–ª—É—á—à–µ–Ω–∏–µ –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è""",
                'gastronomy': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–ü–†–ï–í–†–ê–¢–ò–¢–ï –ï–î–£ –í –ò–°–ö–£–°–°–¢–í–û"</b>

üí° –ö–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å.

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –≠—Å—Ç–µ—Ç–∏–∫–∞ –ø–∏—â–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è
‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤–∫—É—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–æ—Ä—ã
‚Ä¢ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è, —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞, –ø–æ–≤—ã—à–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏""",
                'analytics': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–î–ê–ù–ù–´–ï –î–õ–Ø –ó–î–û–†–û–í–¨–Ø"</b>

üí° –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –Ω–µ –∫–∞–ª–æ—Ä–∏–∏, –∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ë–∏–æ—Ö–∞–∫–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—è–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –≤—ã–±–æ—Ä—ã

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π""",
                'shopping': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–ò–ù–í–ï–°–¢–ò–¶–ò–Ø –í –ö–ê–ß–ï–°–¢–í–û"</b>

üí° –ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤–æ–µ –±—É–¥—É—â–µ–µ —Å –∫–∞–∂–¥—ã–º –≤—ã–±–æ—Ä–æ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ.

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–µ–ª–∫–∏ –ª—É—á—à–µ —É—Å–≤–∞–∏–≤–∞—é—Ç—Å—è
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –æ–≤–æ—â–∏ –∏–º–µ—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è, —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ª–µ—á–µ–Ω–∏–∏""",
                'rituals': """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–†–ò–¢–£–ê–õ–´ –î–õ–Ø –ë–ê–õ–ê–ù–°–ê"</b>

üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∏—â–µ–≤—ã–µ —Ä–∏—Ç—É–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —è–∫–æ—Ä—è–º–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ö–∞–æ—Ç–∏—á–Ω–æ–º –º–∏—Ä–µ.

üî¨ <b>–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –†–∏—Ç—É–∞–ª—ã —Å–Ω–∏–∂–∞—é—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —É–ª—É—á—à–∞–µ—Ç —Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã
‚Ä¢ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–∏—â–µ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞, —É–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞"""
            }
            return advice_map.get(theme, advice_map['neuro'])
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
            recipes = {
                'neuro': {
                    'breakfast': """ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (1 –ø–æ—Ä—Ü–∏—è):
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ ü•¨ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ ü´í –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å–æ —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –∞–≤–æ–∫–∞–¥–æ –∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ü–æ–ª—å–∑–∞: –£–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞—â–∏—â–∞–µ—Ç –º–æ–∑–≥""",
                    'dessert': """üç´ –®–æ–∫–æ–ª–∞–¥–Ω—ã–π –º—É—Å—Å –∏–∑ –∞–≤–æ–∫–∞–¥–æ

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (2 –ø–æ—Ä—Ü–∏–∏):
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 2 —Å–ø–µ–ª—ã—Ö
‚Ä¢ üç´ –ö–∞–∫–∞–æ-–ø–æ—Ä–æ—à–æ–∫ - 3 —Å—Ç.–ª.
‚Ä¢ üçØ –ú–µ–¥ - 2 —Å—Ç.–ª. 
‚Ä¢ üçå –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (10 –º–∏–Ω—É—Ç):
1. –û—á–∏—Å—Ç–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ –∏ –±–∞–Ω–∞–Ω
2. –í–∑–±–µ–π—Ç–µ –≤ –±–ª–µ–Ω–¥–µ—Ä–µ –¥–æ –∫—Ä–µ–º–æ–æ–±—Ä–∞–∑–Ω–æ–π –º–∞—Å—Å—ã
3. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫–∞–æ –∏ –º–µ–¥, –≤–∑–±–µ–π—Ç–µ –µ—â–µ —Ä–∞–∑
4. –û—Ö–ª–∞–¥–∏—Ç–µ 15 –º–∏–Ω—É—Ç, –ø–æ—Å—ã–ø—å—Ç–µ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - –æ–ª–µ–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –ö–∞–∫–∞–æ - —Ñ–ª–∞–≤–æ–Ω–æ–∏–¥—ã –¥–ª—è –ø–∞–º—è—Ç–∏
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –£–∫—Ä–µ–ø–ª—è–µ—Ç –º–µ–º–±—Ä–∞–Ω—ã –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç —Å–∏–Ω–∞–ø—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–¥–∞—á—É
‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –≥–∏–±–∫–æ—Å—Ç—å"""
                },
                # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–æ–ª–±—ç–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
            }
            theme_recipes = recipes.get(theme, recipes['neuro'])
            return theme_recipes.get(meal_type, theme_recipes['breakfast'])
    
    def generate_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
        season = self._get_current_season()
        
        shopping_list = f"""üõí <b>–£–ú–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ù–ê –ù–ï–î–ï–õ–Æ</b>

üéØ –û—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è ({season})

üß† <b>–î–õ–Ø –ú–û–ó–ì–ê –ò –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´:</b>
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 200 –≥
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 3-4 —à—Ç
‚Ä¢ üêü –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ - 500 –≥
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 10 —à—Ç
‚Ä¢ üç´ –¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ 85% - 100 –≥

üí™ <b>–î–õ–Ø –≠–ù–ï–†–ì–ò–ò –ò –¢–û–ù–£–°–ê:</b>
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 500 g
‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 1 –∫–≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 100 –≥
‚Ä¢ üçó –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 1 –∫–≥
‚Ä¢ üü§ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 500 –≥

üõ°Ô∏è <b>–î–õ–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø:</b>
‚Ä¢ üü° –ö—É—Ä–∫—É–º–∞ - 50 –≥
‚Ä¢ üü† –ò–º–±–∏—Ä—å - 100 –≥
‚Ä¢ ‚ö™ –ß–µ—Å–Ω–æ–∫ - 3 –≥–æ–ª–æ–≤–∫–∏
‚Ä¢ üçì –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 500 –≥
‚Ä¢ ü•¨ –ó–µ–ª–µ–Ω—ã–µ –æ–≤–æ—â–∏ - 1 –∫–≥

üç∞ <b>–î–õ–Ø –£–ú–ù–´–• –î–ï–°–ï–†–¢–û–í:</b>
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 2 —à—Ç
‚Ä¢ üç´ –ö–∞–∫–∞–æ-–ø–æ—Ä–æ—à–æ–∫ - 100 –≥
‚Ä¢ üçØ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–µ–¥ - 300 –≥
‚Ä¢ ü•õ –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ - 400 –º–ª
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 50 –≥
‚Ä¢ üçã –ê–≥–∞—Ä-–∞–≥–∞—Ä - 30 –≥
‚Ä¢ üçì –°–º–µ—Å—å —è–≥–æ–¥ - 500 –≥

üí° <b>–°–û–í–ï–¢–´ –û–¢ –®–ï–§-–ü–û–í–ê–†–ê:</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã - –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –æ—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ

üéØ <b>–§–ò–õ–û–°–û–§–ò–Ø –ü–û–ö–£–ü–û–ö:</b>
–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!

#—á–µ–∫–ª–∏—Å—Ç #—É–º–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏ #{season}"""
        
        return shopping_list
    
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ AI"""
        prompt = """–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–∏–Ω—Ü–∏–ø –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ü—Ä–∏–Ω—Ü–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–¥—É –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞"

–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ö–∞–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º
‚Ä¢ –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–º–∞
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞
2. –ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞—É–∫–∞ –¢–ï–ó–ò–°–ù–û)
3. –ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
4. –ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–µ—Ç
5. –ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        
        ai_content = self.generate_with_yandex_gpt(prompt)
        
        if ai_content:
            return ai_content
        else:
            # –§–æ–ª–±—ç–∫ —Å–æ–≤–µ—Ç
            return """üéØ <b>–ü–†–ò–ù–¶–ò–ü: "–ï–®–¨–¢–ï –¶–í–ï–¢–ê –†–ê–î–£–ì–ò"</b>

üéØ <b>–§–û–†–ú–£–õ–ò–†–û–í–ö–ê:</b> –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏.

üî¨ <b>–ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:</b>
‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–µ - –ª–∏–∫–æ–ø–∏–Ω –ø—Ä–æ—Ç–∏–≤ —Ä–∞–∫–∞
‚Ä¢ üü† –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω –¥–ª—è –∑—Ä–µ–Ω–∏—è  
‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–µ - –ª—é—Ç–µ–∏–Ω –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ üîµ –°–∏–Ω–∏–µ - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞

‚ö° <b>–ú–ï–•–ê–ù–ò–ó–ú –î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ–∏—Ç–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
‚Ä¢ –£–∫—Ä–µ–ø–ª—è–µ—Ç –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—É—é –∑–∞—â–∏—Ç—É
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ

üí° <b>–ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:</b> –î–æ–±–∞–≤—å—Ç–µ 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏.

üìà <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´:</b> –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π."""
    
    def _get_current_season(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"

# üìä –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
class ChannelAnalytics:
    def __init__(self):
        self.telegram = SecureTelegramManager()
    
    def get_full_stats(self):
        """–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞"""
        try:
            member_count = self.telegram.get_member_count()
            channel_info = self.telegram.get_channel_info()
            bot_info = self.telegram.test_connection()
            
            return {
                "status": "success",
                "member_count": member_count,
                "channel_title": channel_info.get('title', 'Unknown') if channel_info.get('status') == 'success' else 'Unknown',
                "channel_username": channel_info.get('username', 'Unknown') if channel_info.get('status') == 'success' else 'Unknown',
                "bot_username": bot_info.get('bot_username', 'Unknown'),
                "bot_status": bot_info.get('status', 'error'),
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def generate_analytics_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        stats = self.get_full_stats()
        
        if stats["status"] == "success":
            report = f"""üìä <b>–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</b>

üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {stats['member_count']}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {stats['channel_title']}
üîó <b>Username:</b> @{stats['channel_username']}
ü§ñ <b>–ë–æ—Ç:</b> @{stats['bot_username']}
üïê <b>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:</b> {stats['timestamp']}

üí´ <b>–ö–û–ù–¢–ï–ù–¢-–°–¢–†–ê–¢–ï–ì–ò–Ø:</b>
‚Ä¢ üß† –ü–Ω: –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —É–º–∞
‚Ä¢ ‚ö° –í—Ç: –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ üõ°Ô∏è –°—Ä: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è  
‚Ä¢ üçΩÔ∏è –ß—Ç: –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è —Å –ø–æ–ª—å–∑–æ–π
‚Ä¢ üìä –ü—Ç: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–ª–∞–Ω—ã
‚Ä¢ üõí –°–±: –£–º–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ üìà –í—Å: –†–∏—Ç—É–∞–ª—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

üéØ <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢:</b>
‚Ä¢ üç≥ 07:00 - –ó–∞–≤—Ç—Ä–∞–∫
‚Ä¢ üç≤ 12:00 - –û–±–µ–¥
‚Ä¢ üç∞ 17:00 - –£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç
‚Ä¢ üåô 19:00 - –£–∂–∏–Ω
‚Ä¢ üí° 21:00 - –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤

#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #–æ—Ç—á–µ—Ç #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
            return report
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"

# üïê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ë–ï–ó –í–ù–ï–®–ù–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
class AutoScheduler:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.telegram = SecureTelegramManager()
        self.content_gen = AIContentGenerator()
        self.last_sent = {}  # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.running = True
        
    def should_send_meal(self, meal_type, current_time):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        schedule = {
            'breakfast': '07:00',
            'lunch': '12:00', 
            'dessert': '17:00',
            'dinner': '19:00',
            'advice': '21:00'  # –î–û–ë–ê–í–õ–ï–ù–û –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
        }
        
        scheduled_time = schedule.get(meal_type)
        if not scheduled_time:
            return False
            
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if current_time == scheduled_time:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now(config.KEMEROVO_TIMEZONE).date().isoformat()
            key = f"{today}_{meal_type}"
            
            if key not in self.last_sent:
                self.last_sent[key] = True
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–±–æ–ª—å—à–µ 1 –¥–Ω—è)
                self._clean_old_entries()
                return True
                
        return False
    
    def _clean_old_entries(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞"""
        today = datetime.now(config.KEMEROVO_TIMEZONE).date().isoformat()
        keys_to_remove = []
        
        for key in self.last_sent.keys():
            key_date = key.split('_')[0]
            if key_date != today:
                keys_to_remove.append(key)
                
        for key in keys_to_remove:
            del self.last_sent[key]
    
    def send_scheduled_meal(self, meal_type):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            current_time = datetime.now(config.KEMEROVO_TIMEZONE)
            weekday = current_time.strftime('%A').lower()
            
            logger.info(f"üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {meal_type} –¥–ª—è {weekday}")
            
            content = self.content_gen.generate_daily_content(weekday, meal_type)
            success = self.telegram.send_message(content)
            
            if success:
                logger.info(f"‚úÖ {meal_type} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {current_time.strftime('%H:%M')}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ {meal_type}")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {meal_type}: {e}")
            return False
    
    def run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ
                now = datetime.now(config.KEMEROVO_TIMEZONE)
                current_time_str = now.strftime('%H:%M')
                current_weekday = now.strftime('%A').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–î–û–ë–ê–í–õ–ï–ù advice)
                meal_types = ['breakfast', 'lunch', 'dessert', 'dinner', 'advice']
                
                for meal_type in meal_types:
                    if self.should_send_meal(meal_type, current_time_str):
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π
                        thread = Thread(
                            target=self.send_scheduled_meal,
                            args=(meal_type,),
                            daemon=True
                        )
                        thread.start()
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                self._check_special_messages(now, current_time_str)
                
                # –ñ–¥–µ–º 55 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(55)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _check_special_messages(self, now, current_time_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—á–µ–∫-–ª–∏—Å—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)"""
        try:
            # –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫ –≤ —Å—É–±–±–æ—Ç—É –≤ 10:00
            if (now.strftime('%A').lower() == 'saturday' and 
                current_time_str == '10:00' and 
                f"shopping_{now.date().isoformat()}" not in self.last_sent):
                
                content = self.content_gen.generate_shopping_list()
                success = self.telegram.send_message(content)
                
                if success:
                    self.last_sent[f"shopping_{now.date().isoformat()}"] = True
                    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00
            elif (now.strftime('%A').lower() == 'sunday' and 
                  current_time_str == '11:00' and 
                  f"analytics_{now.date().isoformat()}" not in self.last_sent):
                
                analytics = ChannelAnalytics()
                report = analytics.generate_analytics_report()
                success = self.telegram.send_message(report)
                
                if success:
                    self.last_sent[f"analytics_{now.date().isoformat()}"] = True
                    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# üöÄ –°–û–í–†–ï–ú–ï–ù–ù–´–ô –î–ê–®–ë–û–†–î –° 6 –í–ö–õ–ê–î–ö–ê–ú–ò
@app.route('/')
def modern_dashboard():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º"""
    try:
        current_time = datetime.now(config.KEMEROVO_TIMEZONE)
        weekday = current_time.strftime('%A').lower()
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
        day_name_ru = {
            'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 
            'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
            'wednesday': '–°—Ä–µ–¥–∞', 
            'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday': '–ü—è—Ç–Ω–∏—Ü–∞', 
            'saturday': '–°—É–±–±–æ—Ç–∞', 
            'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }.get(weekday, '–î–µ–Ω—å')
        
        # –¢–µ–º–∞ –¥–Ω—è
        day_theme = {
            'monday': 'üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ',
            'tuesday': '‚ö° –≠–Ω–µ—Ä–≥–∏—è', 
            'wednesday': 'üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ',
            'thursday': 'üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'friday': 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'saturday': 'üõí –ü–æ–∫—É–ø–∫–∏',
            'sunday': 'üìà –†–∏—Ç—É–∞–ª—ã'
        }.get(weekday, 'üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        analytics = ChannelAnalytics()
        
        bot_info = telegram.test_connection()
        channel_stats = analytics.get_full_stats()
        current_times = TimeZoneConverter.get_current_times()
        
        bot_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if bot_info.get('status') == 'success' else "‚ùå –û—à–∏–±–∫–∞"
        ai_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if content_gen.yandex_key else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        member_count = channel_stats.get('member_count', 0) if channel_stats.get('status') == 'success' else 0
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –° –î–ï–°–ï–†–¢–ê–ú–ò –ò –°–û–í–ï–¢–ê–ú–ò
        schedule_data = {
            'monday': [
                {'time': '07:00', 'type': 'breakfast', 'name': 'üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫'},
                {'time': '12:00', 'type': 'lunch', 'name': 'üéØ –û–±–µ–¥ –¥–ª—è —Ñ–æ–∫—É—Å–∞'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üç´ –£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç –¥–ª—è –º–æ–∑–≥–∞'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üåô –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —É–∂–∏–Ω'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø –Ω–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏—è'}
            ],
            'tuesday': [
                {'time': '07:00', 'type': 'breakfast', 'name': '‚ö° –≠–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫'},
                {'time': '12:00', 'type': 'lunch', 'name': 'üèÉ –û–±–µ–¥ –¥–ª—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üçì –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üí™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —É–∂–∏–Ω'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏'}
            ],
            'wednesday': [
                {'time': '07:00', 'type': 'breakfast', 'name': 'üõ°Ô∏è –ó–∞–≤—Ç—Ä–∞–∫ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è'},
                {'time': '12:00', 'type': 'lunch', 'name': 'üåø –û–±–µ–¥ –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üçá –ê–Ω—Ç–∏—ç–π–¥–∂ –¥–µ—Å–µ—Ä—Ç'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üåô –£–∂–∏–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è'}
            ],
            'thursday': [
                {'time': '07:00', 'type': 'breakfast', 'name': 'üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫'},
                {'time': '12:00', 'type': 'lunch', 'name': 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –æ–±–µ–¥'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üé≠ –®–µ—Ñ-–¥–µ—Å–µ—Ä—Ç –æ—Ç –ú–∏—à–ª–µ–Ω'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üåô –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏'}
            ],
            'friday': [
                {'time': '07:00', 'type': 'breakfast', 'name': 'üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫'},
                {'time': '12:00', 'type': 'lunch', 'name': 'üéØ –û–±–µ–¥ –¥–ª—è –∏—Ç–æ–≥–æ–≤'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üçç –î–µ—Å–µ—Ä—Ç –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üåô –£–∂–∏–Ω –¥–ª—è –ø–ª–∞–Ω–æ–≤'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'}
            ],
            'saturday': [
                {'time': '07:00', 'type': 'breakfast', 'name': 'ü•ó –°—É–±–±–æ—Ç–Ω–∏–π –±—Ä–∞–Ω—á'},
                {'time': '12:00', 'type': 'lunch', 'name': 'üç≤ –°–µ–º–µ–π–Ω—ã–π –æ–±–µ–¥'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üßÅ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üåô –°—É–±–±–æ—Ç–Ω–∏–π —É–∂–∏–Ω'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø –ø–æ–∫—É–ø–æ–∫'}
            ],
            'sunday': [
                {'time': '07:00', 'type': 'breakfast', 'name': 'üç≥ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á'},
                {'time': '12:00', 'type': 'lunch', 'name': 'ü•ò –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥'},
                {'time': '17:00', 'type': 'dessert', 'name': 'üçÆ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç-—Ä–∏—Ç—É–∞–ª'},
                {'time': '19:00', 'type': 'dinner', 'name': 'üåô –£–∂–∏–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏'},
                {'time': '21:00', 'type': 'advice', 'name': 'üí° –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∏—Ç—É–∞–ª–æ–≤'}
            ]
        }
        
        today_schedule = schedule_data.get(weekday, [])
        
        html = f'''
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>@ppsupershef - –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥</title>
            <style>
                :root {{
                    --primary: #8B5CF6;
                    --secondary: #F59E0B;
                    --success: #10B981;
                    --danger: #EF4444;
                    --warning: #F59E0B;
                    --info: #3B82F6;
                    --dark: #1F2937;
                    --light: #F9FAFB;
                    --gray: #6B7280;
                }}
                
                * {{ margin: 0; padding: 0; box-sizing: border-box; }}
                
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    color: var(--dark);
                    line-height: 1.6;
                }}
                
                .container {{
                    max-width: 1400px;
                    margin: 0 auto;
                    padding: 20px;
                }}
                
                .header {{
                    background: white;
                    border-radius: 20px;
                    padding: 30px;
                    margin-bottom: 24px;
                    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                    text-align: center;
                }}
                
                .header h1 {{
                    font-size: 2.5rem;
                    margin-bottom: 10px;
                    color: var(--dark);
                }}
                
                .header p {{
                    font-size: 1.2rem;
                    color: var(--gray);
                    font-weight: 500;
                }}
                
                .tabs {{
                    display: flex;
                    background: white;
                    border-radius: 15px;
                    padding: 10px;
                    margin-bottom: 24px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                    flex-wrap: wrap;
                }}
                
                .tab {{
                    flex: 1;
                    min-width: 120px;
                    padding: 15px 20px;
                    text-align: center;
                    background: none;
                    border: none;
                    border-radius: 10px;
                    cursor: pointer;
                    font-weight: 600;
                    color: var(--gray);
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 8px;
                }}
                
                .tab:hover {{
                    background: #F3F4F6;
                    color: var(--dark);
                }}
                
                .tab.active {{
                    background: var(--primary);
                    color: white;
                }}
                
                .tab-content {{
                    display: none;
                    background: white;
                    border-radius: 20px;
                    padding: 30px;
                    margin-bottom: 24px;
                    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                }}
                
                .tab-content.active {{
                    display: block;
                    animation: fadeIn 0.5s ease;
                }}
                
                @keyframes fadeIn {{
                    from {{ opacity: 0; transform: translateY(10px); }}
                    to {{ opacity: 1; transform: translateY(0); }}
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin-bottom: 30px;
                }}
                
                .stat-card {{
                    background: linear-gradient(135deg, var(--primary), #A78BFA);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    text-align: center;
                    box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
                }}
                
                .stat-card.warning {{
                    background: linear-gradient(135deg, var(--warning), #FBBF24);
                }}
                
                .stat-card.success {{
                    background: linear-gradient(135deg, var(--success), #34D399);
                }}
                
                .stat-card.danger {{
                    background: linear-gradient(135deg, var(--danger), #F87171);
                }}
                
                .stat-card.info {{
                    background: linear-gradient(135deg, var(--info), #60A5FA);
                }}
                
                .stat-icon {{
                    font-size: 2.5rem;
                    margin-bottom: 15px;
                }}
                
                .stat-card h3 {{
                    font-size: 1.1rem;
                    margin-bottom: 8px;
                    opacity: 0.9;
                }}
                
                .stat-card .value {{
                    font-size: 2rem;
                    font-weight: bold;
                    margin-bottom: 5px;
                }}
                
                .stat-card .description {{
                    font-size: 0.9rem;
                    opacity: 0.8;
                }}
                
                .actions-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 15px;
                    margin: 25px 0;
                }}
                
                .btn {{
                    background: var(--primary);
                    color: white;
                    border: none;
                    padding: 16px 20px;
                    border-radius: 12px;
                    font-size: 15px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 10px;
                    text-decoration: none;
                }}
                
                .btn:hover {{
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
                }}
                
                .btn-success {{ background: var(--success); }}
                .btn-warning {{ background: var(--warning); }}
                .btn-danger {{ background: var(--danger); }}
                .btn-info {{ background: var(--info); }}
                
                .schedule-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 25px 0;
                }}
                
                .schedule-card {{
                    background: #F8FAFC;
                    border: 2px solid #E5E7EB;
                    border-radius: 15px;
                    padding: 20px;
                    transition: all 0.3s ease;
                }}
                
                .schedule-card:hover {{
                    border-color: var(--primary);
                    transform: translateY(-2px);
                }}
                
                .schedule-time {{
                    font-size: 1.1rem;
                    font-weight: bold;
                    color: var(--primary);
                    margin-bottom: 8px;
                }}
                
                .schedule-name {{
                    font-size: 1rem;
                    color: var(--dark);
                    margin-bottom: 12px;
                }}
                
                .schedule-actions {{
                    display: flex;
                    gap: 10px;
                }}
                
                .schedule-btn {{
                    flex: 1;
                    padding: 8px 12px;
                    border: none;
                    border-radius: 8px;
                    background: var(--primary);
                    color: white;
                    cursor: pointer;
                    font-size: 0.9rem;
                    transition: all 0.3s ease;
                }}
                
                .schedule-btn:hover {{
                    opacity: 0.9;
                    transform: translateY(-1px);
                }}
                
                .diagnostics-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 25px 0;
                }}
                
                .diagnostic-card {{
                    background: #F8FAFC;
                    border-radius: 15px;
                    padding: 20px;
                    border-left: 4px solid var(--primary);
                }}
                
                .diagnostic-card.success {{ border-left-color: var(--success); }}
                .diagnostic-card.warning {{ border-left-color: var(--warning); }}
                .diagnostic-card.danger {{ border-left-color: var(--danger); }}
                
                .diagnostic-header {{
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    margin-bottom: 15px;
                }}
                
                .diagnostic-icon {{
                    font-size: 1.5rem;
                }}
                
                .diagnostic-title {{
                    font-weight: 600;
                    color: var(--dark);
                }}
                
                .diagnostic-status {{
                    margin-left: auto;
                    padding: 4px 12px;
                    border-radius: 20px;
                    font-size: 0.8rem;
                    font-weight: 600;
                }}
                
                .status-success {{ background: #D1FAE5; color: var(--success); }}
                .status-warning {{ background: #FEF3C7; color: var(--warning); }}
                .status-danger {{ background: #FEE2E2; color: var(--danger); }}
                
                .diagnostic-description {{
                    color: var(--gray);
                    font-size: 0.9rem;
                    margin-bottom: 15px;
                }}
                
                .diagnostic-actions {{
                    display: flex;
                    gap: 10px;
                }}
                
                .manual-input {{
                    width: 100%;
                    min-height: 150px;
                    padding: 15px;
                    border: 2px solid #E5E7EB;
                    border-radius: 12px;
                    font-family: inherit;
                    font-size: 14px;
                    resize: vertical;
                    margin-bottom: 15px;
                }}
                
                .manual-input:focus {{
                    outline: none;
                    border-color: var(--primary);
                }}
                
                .time-info {{
                    background: #F8FAFC;
                    border-radius: 12px;
                    padding: 15px;
                    margin: 20px 0;
                    text-align: center;
                }}
                
                .time-info p {{
                    margin: 5px 0;
                    color: var(--gray);
                }}
                
                .footer {{
                    text-align: center;
                    margin-top: 40px;
                    color: white;
                    opacity: 0.8;
                }}
                
                @media (max-width: 768px) {{
                    .container {{ padding: 15px; }}
                    .header {{ padding: 20px; }}
                    .header h1 {{ font-size: 2rem; }}
                    .tabs {{ flex-direction: column; }}
                    .tab {{ min-width: auto; }}
                    .stats-grid {{ grid-template-columns: 1fr; }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üé™ –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ @ppsupershef</h1>
                    <p>–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –ö–ª—É–±–∞ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è</p>
                    <div style="margin-top: 15px; padding: 10px; background: #F0F9FF; border-radius: 10px; display: inline-block;">
                        <strong>üïê –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω:</strong> 5 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å ‚Ä¢ 07:00, 12:00, 17:00, 19:00, 21:00
                    </div>
                </div>
                
                <div class="tabs">
                    <button class="tab active" onclick="openTab('dashboard')">
                        üìä –î–∞—à–±–æ—Ä–¥
                    </button>
                    <button class="tab" onclick="openTab('meals')">
                        üçΩÔ∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏
                    </button>
                    <button class="tab" onclick="openTab('schedule')">
                        üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    </button>
                    <button class="tab" onclick="openTab('analytics')">
                        üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </button>
                    <button class="tab" onclick="openTab('diagnostics')">
                        üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    </button>
                    <button class="tab" onclick="openTab('manual')">
                        ‚úçÔ∏è –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    </button>
                </div>
                
                <!-- –í–ö–õ–ê–î–ö–ê –î–ê–®–ë–û–†–î–ê -->
                <div id="dashboard" class="tab-content active">
                    <h2>üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã</h2>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon">üë•</div>
                            <h3>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</h3>
                            <div class="value">{member_count}</div>
                            <div class="description">–ê–∫—Ç–∏–≤–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</div>
                        </div>
                        
                        <div class="stat-card success">
                            <div class="stat-icon">ü§ñ</div>
                            <h3>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</h3>
                            <div class="value">{bot_status}</div>
                            <div class="description">{bot_info.get('bot_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}</div>
                        </div>
                        
                        <div class="stat-card {'success' if content_gen.yandex_key else 'warning'}">
                            <div class="stat-icon">üß†</div>
                            <h3>Yandex GPT</h3>
                            <div class="value">{ai_status}</div>
                            <div class="description">{"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∞–∫—Ç–∏–≤–Ω–∞" if content_gen.yandex_key else "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"}</div>
                        </div>
                        
                        <div class="stat-card info">
                            <div class="stat-icon">üìÖ</div>
                            <h3>–°–µ–≥–æ–¥–Ω—è</h3>
                            <div class="value">{day_name_ru}</div>
                            <div class="description">{day_theme}</div>
                        </div>
                    </div>
                    
                    <div class="time-info">
                        <p><strong>üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</strong> {current_times['kemerovo_time']} (–ö–µ–º–µ—Ä–æ–≤–æ)</p>
                        <p><strong>üåç –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</strong> {current_times['server_time']} (UTC)</p>
                        <p><strong>üöÄ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:</strong> –ê–∫—Ç–∏–≤–µ–Ω ‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 55 —Å–µ–∫</p>
                    </div>
                    
                    <div class="actions-grid">
                        <button class="btn btn-success" onclick="sendMeal('breakfast')">
                            üç≥ AI –ó–∞–≤—Ç—Ä–∞–∫
                        </button>
                        <button class="btn" onclick="sendContent('shopping')">
                            üõí –ß–µ–∫-–ª–∏—Å—Ç
                        </button>
                        <button class="btn btn-warning" onclick="sendMeal('dessert')">
                            üç∞ –£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç
                        </button>
                        <button class="btn btn-info" onclick="sendMeal('advice')">
                            üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                        </button>
                    </div>
                </div>
                
                <!-- –í–ö–õ–ê–î–ö–ê –ü–†–ò–ï–ú–û–í –ü–ò–©–ò -->
                <div id="meals" class="tab-content">
                    <h2>üçΩÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
                    <p style="color: var(--gray); margin-bottom: 25px;">AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤</p>
                    
                    <div class="actions-grid">
                        <button class="btn" onclick="sendMeal('breakfast')">
                            üç≥ –ó–∞–≤—Ç—Ä–∞–∫
                        </button>
                        <button class="btn btn-success" onclick="sendMeal('lunch')">
                            üç≤ –û–±–µ–¥
                        </button>
                        <button class="btn btn-warning" onclick="sendMeal('dinner')">
                            üåô –£–∂–∏–Ω
                        </button>
                        <button class="btn btn-info" onclick="sendMeal('dessert')">
                            üç∞ –£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç
                        </button>
                        <button class="btn" style="background: #8B5CF6;" onclick="sendMeal('advice')">
                            üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                        </button>
                    </div>
                    
                    <div style="background: #F0F9FF; border-radius: 15px; padding: 20px; margin: 25px 0;">
                        <h3 style="color: var(--info); margin-bottom: 15px;">üéØ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç ({day_name_ru})</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center;">
                                <div style="font-size: 2rem; margin-bottom: 10px;">üç≥</div>
                                <strong>–ó–∞–≤—Ç—Ä–∞–∫</strong>
                                <p style="color: var(--gray); font-size: 0.9rem; margin-top: 5px;">07:00 ‚Ä¢ {day_theme}</p>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center;">
                                <div style="font-size: 2rem; margin-bottom: 10px;">üç≤</div>
                                <strong>–û–±–µ–¥</strong>
                                <p style="color: var(--gray); font-size: 0.9rem; margin-top: 5px;">12:00 ‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è</p>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center;">
                                <div style="font-size: 2rem; margin-bottom: 10px;">üç∞</div>
                                <strong>–î–µ—Å–µ—Ä—Ç</strong>
                                <p style="color: var(--gray); font-size: 0.9rem; margin-top: 5px;">17:00 ‚Ä¢ –£–º–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ</p>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center;">
                                <div style="font-size: 2rem; margin-bottom: 10px;">üåô</div>
                                <strong>–£–∂–∏–Ω</strong>
                                <p style="color: var(--gray); font-size: 0.9rem; margin-top: 5px;">19:00 ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</p>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center;">
                                <div style="font-size: 2rem; margin-bottom: 10px;">üí°</div>
                                <strong>–°–æ–≤–µ—Ç—ã</strong>
                                <p style="color: var(--gray); font-size: 0.9rem; margin-top: 5px;">21:00 ‚Ä¢ {day_theme}</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –í–ö–õ–ê–î–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø -->
                <div id="schedule" class="tab-content">
                    <h2>üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π</h2>
                    <p style="color: var(--gray); margin-bottom: 25px;">–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)</p>
                    
                    <div style="background: #F0F9FF; border-radius: 15px; padding: 20px; margin-bottom: 25px;">
                        <h3 style="color: var(--info); margin-bottom: 15px;">üìÖ –°–µ–≥–æ–¥–Ω—è: {day_name_ru} ‚Ä¢ {day_theme}</h3>
                        <div class="schedule-grid">
                            {"".join([f'''
                            <div class="schedule-card">
                                <div class="schedule-time">üïê {item["time"]}</div>
                                <div class="schedule-name">{item["name"]}</div>
                                <div class="schedule-actions">
                                    <button class="schedule-btn" style="background: var(--success);" onclick="sendMeal('{item["type"]}')">
                                        üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å
                                    </button>
                                </div>
                            </div>
                            ''' for item in today_schedule])}
                        </div>
                    </div>
                    
                    <h3 style="margin-bottom: 20px;">üìã –ü–æ–ª–Ω–æ–µ –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h3>
                    <div style="background: white; border-radius: 15px; padding: 20px; border: 2px solid #E5E7EB;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px;">
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: var(--primary); margin-bottom: 10px;">–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: var(--warning); margin-bottom: 10px;">–í—Ç–æ—Ä–Ω–∏–∫</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">‚ö° –≠–Ω–µ—Ä–≥–∏—è</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: var(--success); margin-bottom: 10px;">–°—Ä–µ–¥–∞</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: #EC4899; margin-bottom: 10px;">–ß–µ—Ç–≤–µ—Ä–≥</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: var(--info); margin-bottom: 10px;">–ü—è—Ç–Ω–∏—Ü–∞</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: var(--primary); margin-bottom: 10px;">–°—É–±–±–æ—Ç–∞</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">üõí –ü–æ–∫—É–ø–∫–∏</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-weight: bold; color: var(--warning); margin-bottom: 10px;">–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</div>
                                <div style="font-size: 0.9rem; color: var(--gray);">üìà –†–∏—Ç—É–∞–ª—ã</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –í–ö–õ–ê–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò -->
                <div id="analytics" class="tab-content">
                    <h2>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h2>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon">üë•</div>
                            <h3>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏</h3>
                            <div class="value">{member_count}</div>
                            <div class="description">–¢–µ–∫—É—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</div>
                        </div>
                        
                        <div class="stat-card success">
                            <div class="stat-icon">üìä</div>
                            <h3>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω</h3>
                            <div class="value">35/–Ω–µ–¥</div>
                            <div class="description">–ü–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é</div>
                        </div>
                        
                        <div class="stat-card info">
                            <div class="stat-icon">üéØ</div>
                            <h3>–û—Ö–≤–∞—Ç</h3>
                            <div class="value">100%</div>
                            <div class="description">–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
                        </div>
                        
                        <div class="stat-card warning">
                            <div class="stat-icon">üí´</div>
                            <h3>–§–∏–ª–æ—Å–æ—Ñ–∏—è</h3>
                            <div class="value">–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å</div>
                            <div class="description">–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å</div>
                        </div>
                    </div>
                    
                    <div class="actions-grid">
                        <button class="btn btn-success" onclick="sendAnalyticsReport()">
                            üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ –∫–∞–Ω–∞–ª
                        </button>
                        <button class="btn" onclick="updateStats()">
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        </button>
                        <button class="btn btn-info" onclick="checkSchedulerStatus()">
                            üïê –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                        </button>
                    </div>
                    
                    <div style="background: #F0F9FF; border-radius: 15px; padding: 25px; margin-top: 25px;">
                        <h3 style="color: var(--info); margin-bottom: 20px;">üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <div style="font-weight: bold; color: var(--dark);">–ö–∞–Ω–∞–ª</div>
                                <div style="color: var(--gray); font-size: 0.9rem;">@{channel_stats.get('channel_username', 'Unknown')}</div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <div style="font-weight: bold; color: var(--dark);">–ù–∞–∑–≤–∞–Ω–∏–µ</div>
                                <div style="color: var(--gray); font-size: 0.9rem;">{channel_stats.get('channel_title', 'Unknown')}</div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <div style="font-weight: bold; color: var(--dark);">–ë–æ—Ç</div>
                                <div style="color: var(--gray); font-size: 0.9rem;">@{bot_info.get('bot_username', 'Unknown')}</div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <div style="font-weight: bold; color: var(--dark);">–°—Ç–∞—Ç—É—Å</div>
                                <div style="color: var(--gray); font-size: 0.9rem;">{bot_status}</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –í–ö–õ–ê–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò -->
                <div id="diagnostics" class="tab-content">
                    <h2>üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
                    <p style="color: var(--gray); margin-bottom: 25px;">–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫</p>
                    
                    <div class="diagnostics-grid">
                        <div class="diagnostic-card {'success' if bot_info.get('status') == 'success' else 'danger'}">
                            <div class="diagnostic-header">
                                <div class="diagnostic-icon">ü§ñ</div>
                                <div class="diagnostic-title">Telegram Bot</div>
                                <div class="diagnostic-status {'status-success' if bot_info.get('status') == 'success' else 'status-danger'}">
                                    {bot_status}
                                </div>
                            </div>
                            <div class="diagnostic-description">
                                –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ Telegram API
                            </div>
                            <div class="diagnostic-actions">
                                <button class="schedule-btn" style="background: var(--info);" onclick="testConnection()">
                                    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                            </div>
                        </div>
                        
                        <div class="diagnostic-card {'success' if content_gen.yandex_key else 'warning'}">
                            <div class="diagnostic-header">
                                <div class="diagnostic-icon">üß†</div>
                                <div class="diagnostic-title">Yandex GPT API</div>
                                <div class="diagnostic-status {'status-success' if content_gen.yandex_key else 'status-warning'}">
                                    {ai_status}
                                </div>
                            </div>
                            <div class="diagnostic-description">
                                {"API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞" if content_gen.yandex_key else "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞"}
                            </div>
                            <div class="diagnostic-actions">
                                <button class="schedule-btn" style="background: var(--warning);" onclick="alert('–î–æ–±–∞–≤—å—Ç–µ YANDEX_GPT_API_KEY –≤ —Ñ–∞–π–ª .env')">
                                    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                                </button>
                            </div>
                        </div>
                        
                        <div class="diagnostic-card success">
                            <div class="diagnostic-header">
                                <div class="diagnostic-icon">üåç</div>
                                <div class="diagnostic-title">–ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞</div>
                                <div class="diagnostic-status status-success">
                                    ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã
                                </div>
                            </div>
                            <div class="diagnostic-description">
                                –°–µ—Ä–≤–µ—Ä: UTC, –ö–µ–º–µ—Ä–æ–≤–æ: Asia/Novokuznetsk
                            </div>
                            <div class="diagnostic-actions">
                                <button class="schedule-btn" style="background: var(--info);" onclick="showTimeInfo()">
                                    –í—Ä–µ–º—è
                                </button>
                            </div>
                        </div>
                        
                        <div class="diagnostic-card success">
                            <div class="diagnostic-header">
                                <div class="diagnostic-icon">üìä</div>
                                <div class="diagnostic-title">–ö–∞–Ω–∞–ª</div>
                                <div class="diagnostic-status status-success">
                                    ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω
                                </div>
                            </div>
                            <div class="diagnostic-description">
                                {channel_stats.get('channel_title', '–ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω')}
                            </div>
                            <div class="diagnostic-actions">
                                <button class="schedule-btn" style="background: var(--info);" onclick="testChannel()">
                                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="actions-grid" style="margin-top: 30px;">
                        <button class="btn btn-warning" onclick="runFullDiagnostics()">
                            üîß –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                        </button>
                        <button class="btn btn-success" onclick="sendTestMessage()">
                            üì® –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        </button>
                        <button class="btn btn-info" onclick="showDebugInfo()">
                            üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        </button>
                    </div>
                </div>
                
                <!-- –í–ö–õ–ê–î–ö–ê –†–£–ß–ù–û–ô –û–¢–ü–†–ê–í–ö–ò -->
                <div id="manual" class="tab-content">
                    <h2>‚úçÔ∏è –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                    <p style="color: var(--gray); margin-bottom: 25px;">–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª</p>
                    
                    <textarea 
                        id="manualContent" 
                        class="manual-input" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram... –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    ></textarea>
                    
                    <div class="actions-grid">
                        <button class="btn btn-success" onclick="sendManualContent()">
                            üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª
                        </button>
                        <button class="btn" onclick="previewManualContent()">
                            üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                        <button class="btn btn-warning" onclick="clearManualContent()">
                            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                        </button>
                    </div>
                    
                    <div style="background: #F0F9FF; border-radius: 15px; padding: 20px; margin-top: 25px;">
                        <h3 style="color: var(--info); margin-bottom: 15px;">üí° –°–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <strong>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</strong>
                                <div style="color: var(--gray); font-size: 0.9rem;">&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <strong>–ö—É—Ä—Å–∏–≤</strong>
                                <div style="color: var(--gray); font-size: 0.9rem;">&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <strong>–°—Å—ã–ª–∫–∞</strong>
                                <div style="color: var(--gray); font-size: 0.9rem;">&lt;a href="url"&gt;—Ç–µ–∫—Å—Ç&lt;/a&gt;</div>
                            </div>
                            <div style="background: white; padding: 15px; border-radius: 10px;">
                                <strong>–≠–º–æ–¥–∑–∏</strong>
                                <div style="color: var(--gray); font-size: 0.9rem;">üé™ üß† ‚ö° üõ°Ô∏è üç∞ üí°</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="footer">
                    <p>üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef</p>
                    <p>üí´ –ü–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏ ‚Ä¢ üß† –ù–µ–π—Ä–æ–Ω–∞—É–∫–∞ ‚Ä¢ üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ ‚Ä¢ üç∞ –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã ‚Ä¢ üí° –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å</p>
                </div>
            </div>
            
            <script>
                function openTab(tabName) {{
                    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                    document.querySelectorAll('.tab-content').forEach(tab => {{
                        tab.classList.remove('active');
                    }});
                    
                    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                    document.querySelectorAll('.tab').forEach(tab => {{
                        tab.classList.remove('active');
                    }});
                    
                    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                    document.getElementById(tabName).classList.add('active');
                    
                    // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
                    event.currentTarget.classList.add('active');
                }}
                
                async function testConnection() {{
                    try {{
                        const response = await fetch('/health');
                        const data = await response.json();
                        if (data.status === 'healthy') {{
                            alert('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\\\\nü§ñ –ë–æ—Ç: ' + data.bot_username + '\\\\nüß† Yandex GPT: ' + data.ai_status);
                        }} else {{
                            alert('‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π: ' + data.message);
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
                    }}
                }}
                
                async function sendContent(type) {{
                    const endpoints = {{
                        'breakfast': '/send-breakfast',
                        'shopping': '/send-shopping-list', 
                        'advice': '/send-advice'
                    }};
                    
                    if (endpoints[type]) {{
                        try {{
                            const response = await fetch(endpoints[type]);
                            const data = await response.json();
                            if (data.status === 'success') {{
                                alert('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }}
                        }} catch (error) {{
                            alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
                        }}
                    }}
                }}
                
                async function sendMeal(mealType) {{
                    try {{
                        const response = await fetch(`/send-meal/${{mealType}}`);
                        const data = await response.json();
                        if (data.status === 'success') {{
                            const mealNames = {{
                                'breakfast': '–ó–∞–≤—Ç—Ä–∞–∫',
                                'lunch': '–û–±–µ–¥',
                                'dinner': '–£–∂–∏–Ω', 
                                'dessert': '–£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç',
                                'advice': '–°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤'
                            }};
                            alert(`‚úÖ ${{mealNames[mealType] || '–ö–æ–Ω—Ç–µ–Ω—Ç'}} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`);
                        }} else {{
                            alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
                    }}
                }}
                
                async function sendAnalyticsReport() {{
                    try {{
                        const response = await fetch('/send-analytics-report');
                        const data = await response.json();
                        if (data.status === 'success') {{
                            alert('‚úÖ –û—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
                        }} else {{
                            alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞');
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞');
                    }}
                }}
                
                async function runFullDiagnostics() {{
                    try {{
                        const response = await fetch('/full-diagnostics');
                        const data = await response.json();
                        
                        let message = 'üîß –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò\\\\n\\\\n';
                        
                        if (data.bot_status === 'success') {{
                            message += '‚úÖ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω (' + data.bot_username + ')\\\\n';
                        }} else {{
                            message += '‚ùå –ë–æ—Ç: –û—à–∏–±–∫–∞ (' + data.bot_message + ')\\\\n';
                        }}
                        
                        if (data.ai_available) {{
                            message += '‚úÖ Yandex GPT: –î–æ—Å—Ç—É–ø–µ–Ω\\\\n';
                        }} else {{
                            message += '‚ö†Ô∏è Yandex GPT: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\\\\n';
                        }}
                        
                        if (data.channel_status === 'success') {{
                            message += '‚úÖ –ö–∞–Ω–∞–ª: –î–æ—Å—Ç—É–ø–µ–Ω (' + data.member_count + ' –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\\\\n';
                        }} else {{
                            message += '‚ùå –ö–∞–Ω–∞–ª: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞\\\\n';
                        }}
                        
                        message += '‚úÖ –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞: –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã\\\\n';
                        message += '‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –†–∞–±–æ—Ç–∞–µ—Ç\\\\n';
                        
                        alert(message);
                        
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error);
                    }}
                }}
                
                async function sendTestMessage() {{
                    try {{
                        const response = await fetch('/test-channel');
                        const data = await response.json();
                        if (data.status === 'success') {{
                            alert('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!');
                        }} else {{
                            alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–∞');
                    }}
                }}
                
                async function checkSchedulerStatus() {{
                    try {{
                        const response = await fetch('/scheduler-status');
                        const data = await response.json();
                        
                        if (data.status === 'active') {{
                            let message = 'üïê –°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê\\\\n\\\\n';
                            message += '‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\\\\n';
                            message += 'üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ' + data.current_time_kemerovo + '\\\\n';
                            message += 'üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ' + data.current_weekday + '\\\\n';
                            message += '‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ' + data.next_check + '\\\\n\\\\n';
                            message += 'üìã –†–ê–°–ü–ò–°–ê–ù–ò–ï:\\\\n';
                            message += '‚Ä¢ üç≥ –ó–∞–≤—Ç—Ä–∞–∫: ' + data.schedule.breakfast + '\\\\n';
                            message += '‚Ä¢ üç≤ –û–±–µ–¥: ' + data.schedule.lunch + '\\\\n';
                            message += '‚Ä¢ üç∞ –î–µ—Å–µ—Ä—Ç: ' + data.schedule.dessert + '\\\\n';
                            message += '‚Ä¢ üåô –£–∂–∏–Ω: ' + data.schedule.dinner + '\\\\n';
                            message += '‚Ä¢ üí° –°–æ–≤–µ—Ç—ã: ' + data.schedule.advice + '\\\\n';
                            message += '‚Ä¢ üõí –ß–µ–∫-–ª–∏—Å—Ç: ' + data.schedule.shopping_list + '\\\\n';
                            message += '‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ' + data.schedule.analytics;
                            
                            alert(message);
                        }} else {{
                            alert('‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
                    }}
                }}
                
                async function sendManualContent() {{
                    const content = document.getElementById('manualContent').value;
                    if (!content) {{
                        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
                        return;
                    }}
                
                    try {{
                        const response = await fetch('/send-manual-content', {{
                            method: 'POST',
                            headers: {{ 'Content-Type': 'application/json' }},
                            body: JSON.stringify({{ content: content }})
                        }});
                        
                        const data = await response.json();
                        if (data.status === 'success') {{
                            alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!');
                            document.getElementById('manualContent').value = '';
                        }} else {{
                            alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
                    }}
                }}
                
                function previewManualContent() {{
                    const content = document.getElementById('manualContent').value;
                    if (!content) {{
                        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
                        return;
                    }}
                    
                    const previewWindow = window.open('', '_blank');
                    previewWindow.document.write(`
                        <html>
                            <head>
                                <title>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è</title>
                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                <style>
                                    body {{ 
                                        font-family: Arial, sans-serif; 
                                        padding: 20px;
                                        background: #f5f5f5;
                                    }}
                                    .preview-container {{
                                        background: white;
                                        padding: 20px;
                                        border-radius: 10px;
                                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                                    }}
                                </style>
                            </head>
                            <body>
                                <div class="preview-container">
                                    <h3>üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                                    <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                                        ${{content}}
                                    </div>
                                    <button onclick="window.close()" style="margin-top: 20px; padding: 10px 20px; background: #8B5CF6; color: white; border: none; border-radius: 5px; cursor: pointer;">
                                        –ó–∞–∫—Ä—ã—Ç—å
                                    </button>
                                </div>
                            </body>
                        </html>
                    `);
                }}
                
                function clearManualContent() {{
                    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ?')) {{
                        document.getElementById('manualContent').value = '';
                    }}
                }}
                
                function showTimeInfo() {{
                    alert('üïê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:\\\\n\\\\n–°–µ—Ä–≤–µ—Ä: UTC\\\\n–ö–µ–º–µ—Ä–æ–≤–æ: Asia/Novokuznetsk (UTC+7)\\\\n\\\\n–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ö–µ–º–µ—Ä–æ–≤–æ.');
                }}
                
                function showDebugInfo() {{
                    alert('üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\\\\n\\\\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É Console.');
                    console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:');
                    console.log('- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', new Date().toString());
                    console.log('- User Agent:', navigator.userAgent);
                    console.log('- Screen:', screen.width + 'x' + screen.height);
                }}
                
                async function testChannel() {{
                    try {{
                        const response = await fetch('/test-channel');
                        const data = await response.json();
                        if (data.status === 'success') {{
                            alert('‚úÖ –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                        }} else {{
                            alert('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–Ω–∞–ª—É');
                        }}
                    }} catch (error) {{
                        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞');
                    }}
                }}
                
                async function updateStats() {{
                    location.reload();
                }}
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                window.addEventListener('load', function() {{
                    console.log('‚úÖ –£–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    console.log('üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef');
                    console.log('üç∞ –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 17:00');
                    console.log('üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 21:00');
                    console.log('üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω');
                }});
            </script>
        </body>
        </html>
        '''
        return html
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–û—à–∏–±–∫–∞ - –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    text-align: center;
                }
                .error-container {
                    background: rgba(255,255,255,0.1);
                    padding: 40px;
                    border-radius: 20px;
                    backdrop-filter: blur(10px);
                }
            </style>
        </head>
        <body>
            <div class="error-container">
                <h1>‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</p>
            </div>
        </body>
        </html>
        """

# üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
@app.route('/send-meal/<meal_type>')
@rate_limit()
def send_meal(meal_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    try:
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        
        current_time = datetime.now(config.KEMEROVO_TIMEZONE)
        weekday = current_time.strftime('%A').lower()
        
        content = content_gen.generate_daily_content(weekday, meal_type)
        success = telegram.send_message(content)
        
        meal_names = {
            'breakfast': '–∑–∞–≤—Ç—Ä–∞–∫',
            'lunch': '–æ–±–µ–¥', 
            'dinner': '—É–∂–∏–Ω',
            'dessert': '—É–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç',
            'advice': '—Å–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤'
        }
        
        return jsonify({
            "status": "success" if success else "error",
            "message": f"{meal_names.get(meal_type, '–∫–æ–Ω—Ç–µ–Ω—Ç')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "ai_generated": bool(content_gen.yandex_key)
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-analytics-report')
@rate_limit()
def send_analytics_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    try:
        telegram = SecureTelegramManager()
        analytics = ChannelAnalytics()
        
        report = analytics.generate_analytics_report()
        success = telegram.send_message(report)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/full-diagnostics')
def full_diagnostics():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        analytics = ChannelAnalytics()
        
        bot_info = telegram.test_connection()
        channel_stats = analytics.get_full_stats()
        
        return jsonify({
            "status": "success",
            "bot_status": bot_info.get('status'),
            "bot_username": bot_info.get('bot_username'),
            "bot_message": bot_info.get('message', 'OK'),
            "ai_available": bool(content_gen.yandex_key),
            "channel_status": channel_stats.get('status'),
            "member_count": channel_stats.get('member_count', 0),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/scheduler-status')
def scheduler_status():
    """–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        now = datetime.now(config.KEMEROVO_TIMEZONE)
        current_time = now.strftime('%H:%M')
        weekday = now.strftime('%A').lower()
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
        weekdays_ru = {
            'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
            'wednesday': '–°—Ä–µ–¥–∞',
            'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
            'saturday': '–°—É–±–±–æ—Ç–∞',
            'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        
        return jsonify({
            "status": "active",
            "current_time_kemerovo": current_time,
            "current_weekday": weekdays_ru.get(weekday, weekday),
            "next_check": "—á–µ—Ä–µ–∑ 55 —Å–µ–∫—É–Ω–¥",
            "schedule": {
                "breakfast": "07:00",
                "lunch": "12:00",
                "dessert": "17:00", 
                "dinner": "19:00",
                "advice": "21:00",
                "shopping_list": "–°—É–±–±–æ—Ç–∞ 10:00",
                "analytics": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 11:00"
            }
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# üîß –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        bot_info = telegram.test_connection()
        
        return jsonify({
            "status": "healthy" if bot_info.get('status') == 'success' else "degraded",
            "bot_status": bot_info.get('status'),
            "bot_username": bot_info.get('bot_username'),
            "ai_status": "available" if content_gen.yandex_key else "unavailable",
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "message": "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if bot_info.get('status') == 'success' else "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "timestamp": datetime.now().strftime("%H:%M:%S")
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        telegram = SecureTelegramManager()
        current_times = TimeZoneConverter.get_current_times()
        
        test_message = f"""üé™ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø</b>

‚úÖ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef
ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
üß† Yandex GPT: {"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if config.YANDEX_GPT_API_KEY else "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 35 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—é
üç∞ –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã: 17:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: 21:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –ü–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏

üí´ <b>–†–ê–°–ü–ò–°–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê:</b>
‚Ä¢ üç≥ 07:00 - –ó–∞–≤—Ç—Ä–∞–∫
‚Ä¢ üç≤ 12:00 - –û–±–µ–¥  
‚Ä¢ üç∞ 17:00 - –£–ú–ù–´–ô –î–ï–°–ï–†–¢
‚Ä¢ üåô 19:00 - –£–∂–∏–Ω
‚Ä¢ üí° 21:00 - –°–û–í–ï–¢–´ –≠–ö–°–ü–ï–†–¢–û–í

üïê <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {current_times['kemerovo_time']}

#—Ç–µ—Å—Ç #–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
        
        success = telegram.send_message(test_message)
        return jsonify({
            "status": "success" if success else "error", 
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-breakfast')
@rate_limit()
def send_breakfast():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ AI"""
    try:
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        
        current_time = datetime.now(config.KEMEROVO_TIMEZONE)
        weekday = current_time.strftime('%A').lower()
        
        content = content_gen.generate_daily_content(weekday, "breakfast")
        success = telegram.send_message(content)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "AI-–∑–∞–≤—Ç—Ä–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "ai_generated": bool(content_gen.yandex_key)
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-shopping-list')
@rate_limit()
def send_shopping_list():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
    try:
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        
        content = content_gen.generate_shopping_list()
        success = telegram.send_message(content)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "–ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-advice')
@rate_limit()
def send_advice():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ AI"""
    try:
        telegram = SecureTelegramManager()
        content_gen = AIContentGenerator()
        
        current_time = datetime.now(config.KEMEROVO_TIMEZONE)
        weekday = current_time.strftime('%A').lower()
        
        content = content_gen.generate_daily_content(weekday, "advice")
        success = telegram.send_message(content)
        
        return jsonify({
            "status": "success" if success else "error",
            "message": "AI-—Å–æ–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
            "ai_generated": bool(content_gen.yandex_key)
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-manual-content', methods=['POST'])
@rate_limit()
def send_manual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        telegram = SecureTelegramManager()
        data = request.get_json()
        
        if not data or 'content' not in data:
            return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"})
            
        content = data['content']
        if not content.strip():
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        current_times = TimeZoneConverter.get_current_times()
        content_with_footer = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = telegram.send_message(content_with_footer)
        return jsonify({"status": "success" if success else "error"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.errorhandler(404)
def not_found(error):
    return jsonify({"status": "error", "message": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {str(error)}")
    return jsonify({"status": "error", "message": "Internal server error"}), 500

# üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–ú
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    logger.info("üç∞ –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 17:00")
    logger.info("üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 21:00")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    telegram = SecureTelegramManager()
    content_gen = AIContentGenerator()
    
    bot_test = telegram.test_connection()
    if bot_test.get('status') == 'success':
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_test.get('bot_username')} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º: {bot_test.get('message')}")
    
    if content_gen.yandex_key:
        logger.info("‚úÖ Yandex GPT –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    else:
        logger.warning("‚ö†Ô∏è Yandex GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–æ–ª–±—ç–∫-–∫–æ–Ω—Ç–µ–Ω—Ç")
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AutoScheduler()
    scheduler_thread = Thread(target=scheduler.run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π:")
    logger.info("   üç≥ –ó–∞–≤—Ç—Ä–∞–∫: 07:00")
    logger.info("   üç≤ –û–±–µ–¥: 12:00") 
    logger.info("   üç∞ –î–µ—Å–µ—Ä—Ç: 17:00")
    logger.info("   üåô –£–∂–∏–Ω: 19:00")
    logger.info("   üí° –°–æ–≤–µ—Ç—ã: 21:00")
    logger.info("   üõí –ß–µ–∫-–ª–∏—Å—Ç: –°—É–±–±–æ—Ç–∞ 10:00")
    logger.info("   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 11:00")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
