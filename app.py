import os
import requests
import schedule
import time
import random
from datetime import datetime
from threading import Thread
from flask import Flask
from dotenv import load_dotenv

load_dotenv()
app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL')

class SmartFoodChannel:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL
        self.content_themes = self.get_weekly_themes()
        
    def get_weekly_themes(self):
        return {
            0: "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏",  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            1: "üíº –û–±–µ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã",   # –í—Ç–æ—Ä–Ω–∏–∫
            2: "‚ö° –£–∂–∏–Ω—ã –∑–∞ 20 –º–∏–Ω—É—Ç",  # –°—Ä–µ–¥–∞
            3: "üîç –†–∞–∑–±–æ—Ä –º–∏—Ñ–æ–≤",       # –ß–µ—Ç–≤–µ—Ä–≥
            4: "üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",  # –ü—è—Ç–Ω–∏—Ü–∞
            5: "üéØ –°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã",        # –°—É–±–±–æ—Ç–∞
            6: "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        }
    
    def get_daily_content(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
        weekday = datetime.now().weekday()
        theme = self.content_themes[weekday]
        
        content_generators = {
            0: self.monday_breakfast,
            1: self.tuesday_lunch,
            2: self.wednesday_dinner,
            3: self.thursday_myths,
            4: self.friday_budget,
            5: self.saturday_special,
            6: self.sunday_qa
        }
        
        return content_generators[weekday]()
    
    def monday_breakfast(self):
        recipes = [
            {
                'name': 'ü•û –û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∑–∞ 5 –º–∏–Ω—É—Ç',
                'ingredients': ['–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥', '–ú–æ–ª–æ–∫–æ - 200–º–ª', '–Ø–≥–æ–¥—ã - 100–≥', '–ú–µ–¥ - 1 —á.–ª.'],
                'steps': ['–ó–∞–ª–∏—Ç—å –æ–≤—Å—è–Ω–∫—É –º–æ–ª–æ–∫–æ–º', '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ 3 –º–∏–Ω—É—Ç—ã', '–î–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã –∏ –º–µ–¥'],
                'time': '5 –º–∏–Ω—É—Ç',
                'calories': '250 –∫–∫–∞–ª',
                'lifehack': 'üí° –õ–∞–π—Ñ—Ö–∞–∫: –î–æ–±–∞–≤—å—Ç–µ —â–µ–ø–æ—Ç–∫—É —Å–æ–ª–∏ –≤ –æ–≤—Å—è–Ω–∫—É - –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≥–æ—Ä–∞—Ç—å!',
                'video_idea': 'üé• –í–∏–¥–µ–æ: "–ó–∞–≤—Ç—Ä–∞–∫ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ Zoom-–∑–≤–æ–Ω–∫–∞"'
            }
        ]
        return self.format_recipe(random.choice(recipes), "üöÄ –ë–´–°–¢–†–´–ï –ó–ê–í–¢–†–ê–ö–ò")
    
    def tuesday_lunch(self):
        recipes = [
            {
                'name': 'üç± –õ–∞–Ω—á–±–æ–∫—Å: –ö—É—Ä–∏—Ü–∞ —Å –∫–∏–Ω–æ–∞',
                'ingredients': ['–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥', '–ö–∏–Ω–æ–∞ - 100–≥', '–û–≤–æ—â–∏ - 200–≥', '–°–æ—É—Å - 30–≥'],
                'steps': ['–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∫—É—Ä–∏—Ü—É –∏ –∫–∏–Ω–æ–∞', '–ù–∞—Ä–µ–∑–∞—Ç—å –æ–≤–æ—â–∏', '–°–æ–±—Ä–∞—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª—É –ø–æ–ª–æ–≤–∏–Ω–æ–∫'],
                'time': '15 –º–∏–Ω—É—Ç',
                'calories': '400 –∫–∫–∞–ª',
                'rule': 'üìê –ü—Ä–∞–≤–∏–ª–æ –ª–∞–Ω—á–±–æ–∫—Å–∞: 1/2 –æ–≤–æ—â–∏, 1/4 –±–µ–ª–æ–∫, 1/4 —É–≥–ª–µ–≤–æ–¥—ã',
                'poll': 'üìä –û–ø—Ä–æ—Å: –í —á–µ–º –Ω–æ—Å–∏—Ç–µ –æ–±–µ–¥? (—Å—Ç–µ–∫–ª–æ/–ø–ª–∞—Å—Ç–∏–∫/–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–µ)'
            }
        ]
        return self.format_recipe(random.choice(recipes), "üíº –û–ë–ï–î–´ –î–õ–Ø –†–ê–ë–û–¢–´")
    
    def wednesday_dinner(self):
        recipes = [
            {
                'name': 'üç≤ –õ–æ—Å–æ—Å—å —Å –±—Ä–æ–∫–∫–æ–ª–∏',
                'ingredients': ['–õ–æ—Å–æ—Å—å - 200–≥', '–ë—Ä–æ–∫–∫–æ–ª–∏ - 200–≥', '–ß–µ—Å–Ω–æ–∫ - 2 –∑—É–±—á–∏–∫–∞', '–õ–∏–º–æ–Ω - 0.5 —à—Ç'],
                'steps': ['–ó–∞–ø–µ—á—å –ª–æ—Å–æ—Å—å 15 –º–∏–Ω', '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±—Ä–æ–∫–∫–æ–ª–∏ –Ω–∞ –ø–∞—Ä—É', '–ü–æ–¥–∞—Ç—å —Å –ª–∏–º–æ–Ω–æ–º'],
                'time': '20 –º–∏–Ω—É—Ç',
                'calories': '350 –∫–∫–∞–ª',
                'infographic': 'üìà 3 —à–∞–≥–∞: 1. –ù–∞—Ä–µ–∑–∞—Ç—å 2. –ó–∞–ø–µ—á—å 3. –ü–æ–¥–∞—Ç—å',
                'ingredient_week': '‚≠ê –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏: –õ–û–°–û–°–¨ - –∏—Å—Ç–æ—á–Ω–∏–∫ –û–º–µ–≥–∞-3'
            }
        ]
        return self.format_recipe(random.choice(recipes), "‚ö° –£–ñ–ò–ù–´ –ó–ê 20 –ú–ò–ù–£–¢")
    
    def thursday_myths(self):
        myths = [
            {
                'myth': '‚ùå –£–≥–ª–µ–≤–æ–¥—ã –ø–æ—Å–ª–µ 18:00 –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∂–∏—Ä',
                'truth': '‚úÖ –ü—Ä–∞–≤–¥–∞: –û—Ä–≥–∞–Ω–∏–∑–º—É –≤–∞–∂–µ–Ω –û–ë–©–ò–ô –∫–∞–ª–æ—Ä–∞–∂ –∑–∞ –¥–µ–Ω—å, –∞ –Ω–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏!',
                'explanation': '–ú–æ–∂–Ω–æ –µ—Å—Ç—å —É–≥–ª–µ–≤–æ–¥—ã –≤–µ—á–µ—Ä–æ–º, –µ—Å–ª–∏ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ—Å—å –≤ –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.'
            },
            {
                'myth': '‚ùå –û–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –ø–æ—Ö—É–¥–µ—Ç—å',
                'truth': '‚úÖ –ü—Ä–∞–≤–¥–∞: –ß–∞—Å—Ç–æ –≤ –Ω–∏—Ö –¥–æ–±–∞–≤–ª—è—é—Ç –±–æ–ª—å—à–µ —Å–∞—Ö–∞—Ä–∞ –¥–ª—è –≤–∫—É—Å–∞!',
                'explanation': '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∂–∏—Ä—ã –≤–∞–∂–Ω—ã –¥–ª—è –≥–æ—Ä–º–æ–Ω–æ–≤ –∏ —É—Å–≤–æ–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤.'
            }
        ]
        myth = random.choice(myths)
        return self.format_myth(myth)
    
    def friday_budget(self):
        recipes = [
            {
                'name': 'üçõ –ì—Ä–µ—á–∫–∞ —Å –≥—Ä–∏–±–∞–º–∏ –∏ –ª—É–∫–æ–º',
                'ingredients': ['–ì—Ä–µ—á–∫–∞ - 150–≥ (30‚ÇΩ)', '–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 200–≥ (60‚ÇΩ)', '–õ—É–∫ - 2 —à—Ç (20‚ÇΩ)', '–°–º–µ—Ç–∞–Ω–∞ - 50–≥ (25‚ÇΩ)'],
                'steps': ['–û—Ç–≤–∞—Ä–∏—Ç—å –≥—Ä–µ—á–∫—É', '–û–±–∂–∞—Ä–∏—Ç—å –≥—Ä–∏–±—ã —Å –ª—É–∫–æ–º', '–°–º–µ—à–∞—Ç—å —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π'],
                'time': '25 –º–∏–Ω—É—Ç',
                'calories': '320 –∫–∫–∞–ª',
                'cost': 'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: ~45 —Ä—É–±–ª–µ–π',
                'product_tip': 'üõí –ü—Ä–æ–¥—É–∫—Ç-–≤—ã—Ä—É—á–∞–ª–∫–∞: –ì–†–ï–ß–ö–ê - —Ö—Ä–∞–Ω–∏—Ç—Å—è –≥–æ–¥–∞–º–∏, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –±—ã—Å—Ç—Ä–æ!'
            }
        ]
        return self.format_recipe(random.choice(recipes), "üí∞ –ë–Æ–î–ñ–ï–¢–ù–´–ï –†–ï–¶–ï–ü–¢–´")
    
    def saturday_special(self):
        specials = [
            {
                'topic': 'üí™ –°–ø–æ—Ä—Ç–ø–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                'content': '‚Ä¢ –ü—Ä–æ—Ç–µ–∏–Ω –î–û —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —ç–Ω–µ—Ä–≥–∏—è\n‚Ä¢ –ü—Ä–æ—Ç–µ–∏–Ω –ü–û–°–õ–ï - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è–π—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –µ–¥—É!',
                'expert_tip': 'üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä —Å–æ–≤–µ—Ç—É–µ—Ç: "–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å 1–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞"',
                'checklist': 'üìã 5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –±–µ–ª–∫–∞: 1. –í—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å 2. –°–ª–∞–±–æ—Å—Ç—å 3. –ß–∞—Å—Ç—ã–µ –±–æ–ª–µ–∑–Ω–∏ 4. –ü–ª–æ—Ö–∏–µ –Ω–æ–≥—Ç–∏ 5. –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'
            },
            {
                'topic': 'üåø –î–µ—Ç–æ–∫—Å: –ø—Ä–∞–≤–¥–∞ –∏ –º–∏—Ñ—ã',
                'content': '–ù–∞—à–µ —Ç–µ–ª–æ —Å–∞–º–æ –æ—á–∏—â–∞–µ—Ç—Å—è! –ü–æ–º–æ–≥–∏—Ç–µ –µ–º—É:\n‚Ä¢ –ë–æ–ª—å—à–µ –≤–æ–¥—ã\n‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞\n‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω\n‚Ä¢ –ú–∏–Ω–∏–º—É–º –∞–ª–∫–æ–≥–æ–ª—è',
                'expert_tip': 'ü•¶ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: "–î–µ—Ç–æ–∫—Å - —ç—Ç–æ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –∞ –Ω–µ —Ä–∞–∑–æ–≤–∞—è –∞–∫—Ü–∏—è"'
            }
        ]
        return self.format_special(random.choice(specials))
    
    def sunday_qa(self):
        qa_list = [
            {
                'question': '‚ùì "–ü–æ—á–µ–º—É —è –Ω–µ —Ö—É–¥–µ—é –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π?"',
                'answer': 'üìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ó–∞–Ω–∏–∂–∞–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–∏\n‚Ä¢ –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç–µ —Å–æ—É—Å—ã/–Ω–∞–ø–∏—Ç–∫–∏\n‚Ä¢ –°—Ç—Ä–µ—Å—Å –∏ –Ω–µ–¥–æ—Å—ã–ø\n‚Ä¢ –ü–ª–∞—Ç–æ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!'
            },
            {
                'question': '‚ùì "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω—É–∂–Ω–æ –µ—Å—Ç—å?"',
                'answer': 'üìù –ì–ª–∞–≤–Ω–æ–µ - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£!\n‚Ä¢ 3-4 –ø—Ä–∏–µ–º–∞ - –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞\n‚Ä¢ 1-2 –ø—Ä–∏–µ–º–∞ - –µ—Å–ª–∏ —É–¥–æ–±–Ω–æ –≤–∞–º\n‚Ä¢ –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–π –≥–æ–ª–æ–¥!'
            }
        ]
        return self.format_qa(random.choice(qa_list))
    
    def format_recipe(self, recipe, theme):
        message = f"{theme}\n\n"
        message += f"üç≥ *{recipe['name']}*\n\n"
        
        message += "ü•ó *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
        for ing in recipe['ingredients']:
            message += f"‚Ä¢ {ing}\n"
            
        message += f"\nüë®‚Äçüç≥ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ ({recipe['time']}):*\n"
        for i, step in enumerate(recipe['steps'], 1):
            message += f"{i}. {step}\n"
            
        message += f"\nüìä *–ö–ë–ñ–£:* {recipe['calories']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'lifehack' in recipe:
            message += f"\n{recipe['lifehack']}\n"
        if 'rule' in recipe:
            message += f"\n{recipe['rule']}\n"
        if 'poll' in recipe:
            message += f"\n{recipe['poll']}\n"
        if 'infographic' in recipe:
            message += f"\n{recipe['infographic']}\n"
        if 'ingredient_week' in recipe:
            message += f"\n{recipe['ingredient_week']}\n"
        if 'cost' in recipe:
            message += f"\n{recipe['cost']}\n"
        if 'product_tip' in recipe:
            message += f"\n{recipe['product_tip']}\n"
        if 'video_idea' in recipe:
            message += f"\n{recipe['video_idea']}\n"
            
        message += f"\n#{theme.replace(' ', '').replace('-', '')}"
        message += "\n\nüîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
        
        return message
    
    def format_myth(self, myth):
        message = "üîç –†–ê–ó–ë–û–† –ú–ò–§–û–í –û –ü–ò–¢–ê–ù–ò–ò\n\n"
        message += f"{myth['myth']}\n\n"
        message += f"{myth['truth']}\n\n"
        message += f"üí° {myth['explanation']}\n\n"
        message += "#–ú–∏—Ñ—ã–û–î–∏–µ—Ç–æ–ª–æ–≥–∏–∏ #–ü–∏—Ç–∞–Ω–∏–µ–ù–∞—É—á–Ω–æ"
        return message
    
    def format_special(self, special):
        message = "üéØ –°–ü–ï–¶–ü–†–û–ï–ö–¢\n\n"
        message += f"*{special['topic']}*\n\n"
        message += f"{special['content']}\n\n"
        message += f"üíé {special['expert_tip']}\n\n"
        if 'checklist' in special:
            message += f"{special['checklist']}\n\n"
        message += "#–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ–ú–∞—Ç–µ—Ä–∏–∞–ª—ã #–°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç"
        return message
    
    def format_qa(self, qa):
        message = "‚ùì –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´\n\n"
        message += f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:\n{qa['question']}\n\n"
        message += f"–ù–∞—à –æ—Ç–≤–µ—Ç:\n{qa['answer']}\n\n"
        message += "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\n"
        message += "#–í–æ–ø—Ä–æ—Å–û—Ç–≤–µ—Ç #–ü–æ–º–æ—â—å–≠–∫—Å–ø–µ—Ä—Ç–∞"
        return message
    
    def send_to_telegram(self, message):
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.channel,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
        schedule.every().day.at("09:00").do(self.daily_post)
        
        print("üìÖ –£–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        print("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 - –Ω–æ–≤—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç")
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def daily_post(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—É"""
        weekday = datetime.now().weekday()
        theme = self.content_themes[weekday]
        print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: {theme}")
        
        message = self.get_daily_content()
        self.send_to_telegram(message)

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
channel = SmartFoodChannel()

# –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_scheduler():
    channel.run_scheduler()

scheduler_thread = Thread(target=start_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

@app.route('/')
def home():
    return "üç≥ –£–º–Ω–∞—è –ö—É—Ö–Ω—è 2.0 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω!"

@app.route('/test')
def test():
    test_message = channel.get_daily_content()
    channel.send_to_telegram("üß™ –¢–ï–°–¢: " + test_message[:100] + "...")
    return "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
