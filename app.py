import os
import logging
import requests
import json
import time
import schedule
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, request, jsonify
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    SERVER_TIMEZONE = pytz.timezone('UTC')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤ UTC
    KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')  # –ö–µ–º–µ—Ä–æ–≤–æ UTC+7
    TIME_DIFFERENCE_HOURS = 7  # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: –ö–µ–º–µ—Ä–æ–≤–æ = –°–µ—Ä–≤–µ—Ä + 7 —á–∞—Å–æ–≤

class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        kemerovo_time_str: —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM' –ø–æ –ö–µ–º–µ—Ä–æ–≤–æ
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM' –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –ö–µ–º–µ—Ä–æ–≤–æ
            today = datetime.now(Config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TIMEZONE)
            
            return server_dt.strftime('%H:%M')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def server_to_kemerovo_time(server_time_str):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è
        """
        try:
            today = datetime.now(Config.SERVER_TIMEZONE).date()
            server_dt = datetime.combine(today, datetime.strptime(server_time_str, '%H:%M').time())
            server_dt = Config.SERVER_TIMEZONE.localize(server_dt)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è
            kemerovo_dt = server_dt.astimezone(Config.KEMEROVO_TIMEZONE)
            
            return kemerovo_dt.strftime('%H:%M')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {server_time_str}: {e}")
            return server_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        server_now = datetime.now(Config.SERVER_TIMEZONE)
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_timezone': str(Config.SERVER_TIMEZONE),
            'kemerovo_timezone': str(Config.KEMEROVO_TIMEZONE)
        }

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
        try:
            if not self.token:
                return {"status": "error", "message": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            return {
                "status": "success", 
                "bot": bot_info['result']['username'],
                "channel_id": self.channel
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 800
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.'
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None
    
    def generate_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = "–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø–æ–ª—å–∑–æ–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è"
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return f"üç≥ –ó–ê–í–¢–†–ê–ö\n\n{content}\n\n#–∑–∞–≤—Ç—Ä–∞–∫ #—Ä–µ—Ü–µ–ø—Ç #–∑–¥–æ—Ä–æ–≤–æ–µ–ø–∏—Ç–∞–Ω–∏–µ"
        return "üç≥ –ó–ê–í–¢–†–ê–ö\n\n–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞! –û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏ - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä.\n\n#–∑–∞–≤—Ç—Ä–∞–∫ #–∑–¥–æ—Ä–æ–≤–æ–µ–ø–∏—Ç–∞–Ω–∏–µ"
    
    def generate_lunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞"""
        prompt = "–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–µ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return f"üç≤ –û–ë–ï–î\n\n{content}\n\n#–æ–±–µ–¥ #—Ä–µ—Ü–µ–ø—Ç #–ø–∏—Ç–∞–Ω–∏–µ"
        return "üç≤ –û–ë–ï–î\n\n–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–µ–¥ - –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏!\n\n#–æ–±–µ–¥ #–ø–∏—Ç–∞–Ω–∏–µ"
    
    def generate_science(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompt = "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –∫—É–ª–∏–Ω–∞—Ä–∏–∏"
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return f"üî¨ –ù–ê–£–ö–ê\n\n{content}\n\n#–Ω–∞—É–∫–∞ #—Ñ–∞–∫—Ç—ã #–ø–∏—Ç–∞–Ω–∏–µ"
        return "üî¨ –ù–ê–£–ö–ê\n\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç: —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–π –≤–µ—Å.\n\n#–Ω–∞—É–∫–∞ #–ø–∏—Ç–∞–Ω–∏–µ"
    
    def generate_interval(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
        prompt = "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é –º—ã—Å–ª—å –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–º –≥–æ–ª–æ–¥–∞–Ω–∏–∏"
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return f"‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ\n\n{content}\n\n#–∏–Ω—Ç–µ—Ä–≤–∞–ª #–ø–µ—Ä–µ—Ä—ã–≤ #–ø–∏—Ç–∞–Ω–∏–µ"
        return "‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ\n\n–ü–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 3-4 —á–∞—Å–∞.\n\n#–∏–Ω—Ç–µ—Ä–≤–∞–ª #–ø–∏—Ç–∞–Ω–∏–µ"
    
    def generate_dinner(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–∂–∏–Ω–∞"""
        prompt = "–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç –ª–µ–≥–∫–æ–≥–æ —É–∂–∏–Ω–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞"
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return f"üçΩÔ∏è –£–ñ–ò–ù\n\n{content}\n\n#—É–∂–∏–Ω #—Ä–µ—Ü–µ–ø—Ç #–∑–¥–æ—Ä–æ–≤—å–µ"
        return "üçΩÔ∏è –£–ñ–ò–ù\n\n–õ–µ–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ—Ç–¥—ã—Ö—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.\n\n#—É–∂–∏–Ω #–∑–¥–æ—Ä–æ–≤—å–µ"
    
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        prompt = "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return f"üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê\n\n{content}\n\n#—Å–æ–≤–µ—Ç #—ç–∫—Å–ø–µ—Ä—Ç #–∫—É–ª–∏–Ω–∞—Ä–∏—è"
        return "üí° –°–û–í–ï–¢ –≠–ö–°–ü–ï–†–¢–ê\n\n–ü–µ–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã - —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç.\n\n#—Å–æ–≤–µ—Ç #—ç–∫—Å–ø–µ—Ä—Ç"

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
class ContentScheduler:
    def __init__(self):
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–∏ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)
        self.kemerovo_schedule = {
            "07:00": {"type": "breakfast", "name": "üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "generator": "generate_breakfast"},
            "12:00": {"type": "lunch", "name": "üç≤ –û–±–µ–¥", "generator": "generate_lunch"},
            "16:00": {"type": "science", "name": "üî¨ –ù–∞—É–∫–∞", "generator": "generate_science"},
            "18:00": {"type": "interval", "name": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª", "generator": "generate_interval"},
            "19:00": {"type": "dinner", "name": "üçΩÔ∏è –£–∂–∏–Ω", "generator": "generate_dinner"},
            "21:00": {"type": "expert_advice", "name": "üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "generator": "generate_expert_advice"}
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        self.server_schedule = {}
        for kemerovo_time, event in self.kemerovo_schedule.items():
            server_time = TimeZoneConverter.kemerovo_to_server_time(kemerovo_time)
            self.server_schedule[server_time] = event
            logger.info(f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–µ–º–µ—Ä–æ–≤–æ {kemerovo_time} -> –°–µ—Ä–≤–µ—Ä {server_time} - {event['name']}")
        
        self.is_running = False
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")
    
    def get_schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        return {
            'kemerovo_schedule': self.kemerovo_schedule,
            'server_schedule': self.server_schedule
        }
    
    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
        current_times = TimeZoneConverter.get_current_times()
        current_server_time = current_times['server_time'][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ HH:MM
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        times_today = [t for t in self.server_schedule.keys() if t > current_server_time]
        if times_today:
            next_server_time = min(times_today)
            next_event = self.server_schedule[next_server_time]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            next_kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(next_server_time)
            
            return next_server_time, next_kemerovo_time, next_event
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–≤—Ç—Ä–∞
        first_server_time = min(self.server_schedule.keys())
        first_event = self.server_schedule[first_server_time]
        first_kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(first_server_time)
        
        return first_server_time, first_kemerovo_time, first_event
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
        if self.is_running:
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤...")
        
        def schedule_job(server_time_str, content_type, kemerovo_time_str):
            method_name = self.server_schedule[server_time_str]['generator']
            method = getattr(content_gen, method_name)
            
            def job():
                current_times = TimeZoneConverter.get_current_times()
                logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {content_type} (–ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time_str}, –°–µ—Ä–≤–µ—Ä: {current_times['server_time']})")
                content = method()
                if content:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']} (–ö–µ–º–µ—Ä–æ–≤–æ)"
                    success = elite_channel.send_to_telegram(content_with_time)
                    if success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {content_type}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {content_type}")
            
            schedule.every().day.at(server_time_str).do(job)
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: –°–µ—Ä–≤–µ—Ä {server_time_str} (–ö–µ–º–µ—Ä–æ–≤–æ {kemerovo_time_str}) - {content_type}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for server_time, event in self.server_schedule.items():
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ
            kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(server_time)
            schedule_job(server_time, event['type'], kemerovo_time)
        
        self.is_running = True
        
        def run_scheduler():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        
        thread = Thread(target=run_scheduler, daemon=True)
        thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
elite_channel = EliteChannel()
content_gen = ContentGenerator()
content_scheduler = ContentScheduler()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    content_scheduler.start_scheduler()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    current_times = TimeZoneConverter.get_current_times()
    logger.info(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}")
    logger.info(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        next_server_time, next_kemerovo_time, next_event = content_scheduler.get_next_event()
        connection_info = elite_channel.test_connection()
        current_times = TimeZoneConverter.get_current_times()
        schedule_info = content_scheduler.get_schedule()
        
        html = f"""
        <html>
            <head>
                <title>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                    .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                    .time-info {{ background: #3498db; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .schedule-container {{ display: flex; gap: 20px; margin: 20px 0; }}
                    .schedule {{ flex: 1; background: #ecf0f1; padding: 20px; border-radius: 5px; }}
                    .event {{ padding: 10px; margin: 5px 0; background: white; border-left: 4px solid #3498db; }}
                    .event-kemerovo {{ border-left-color: #e74c3c; }}
                    .status-success {{ color: #27ae60; }}
                    .status-error {{ color: #e74c3c; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üç≥ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                        <p>ID –∫–∞–Ω–∞–ª–∞: {Config.TELEGRAM_CHANNEL}</p>
                        <p class="status-{'success' if connection_info.get('status') == 'success' else 'error'}">
                            –°—Ç–∞—Ç—É—Å: {connection_info.get('status', 'unknown')}
                        </p>
                    </div>
                    
                    <div class="time-info">
                        <h3>üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏</h3>
                        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: <strong>{current_times['server_time']}</strong> ({current_times['server_timezone']})</p>
                        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: <strong>{current_times['kemerovo_time']}</strong> ({current_times['kemerovo_timezone']})</p>
                        <p>–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: <strong>+{Config.TIME_DIFFERENCE_HOURS} —á–∞—Å–æ–≤</strong> (–ö–µ–º–µ—Ä–æ–≤–æ –≤–ø–µ—Ä–µ–¥)</p>
                    </div>
                    
                    <div class="schedule-container">
                        <div class="schedule">
                            <h3>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è)</h3>
        """
        
        for time_str, event in schedule_info['kemerovo_schedule'].items():
            is_next = " (–°–ª–µ–¥—É—é—â–∞—è)" if time_str == next_kemerovo_time else ""
            html += f'<div class="event event-kemerovo">{time_str} - {event["name"]}{is_next}</div>'
        
        html += """
                        </div>
                        
                        <div class="schedule">
                            <h3>üñ•Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è)</h3>
        """
        
        for time_str, event in schedule_info['server_schedule'].items():
            is_next = " (–°–ª–µ–¥—É—é—â–∞—è)" if time_str == next_server_time else ""
            html += f'<div class="event">{time_str} - {event["name"]}{is_next}</div>'
        
        html += f"""
                        </div>
                    </div>
                    
                    <div>
                        <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <a class="btn" href="/test-channel">–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</a>
                        <a class="btn" href="/debug">–û—Ç–ª–∞–¥–∫–∞</a>
                        <a class="btn" href="/health">Health Check</a>
                        <a class="btn" href="/time-info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏</a>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <h3>üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
        """
        
        for event in schedule_info['kemerovo_schedule'].values():
            html += f'<a class="btn" href="/send-now/{event["type"]}" style="background: #9b59b6;">{event["name"]}</a>'
        
        html += f"""
                    </div>
                    
                    <div style="margin-top: 20px; color: #7f8c8d;">
                        <p>–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: <strong>{next_kemerovo_time} - {next_event['name']}</strong> (–ö–µ–º–µ—Ä–æ–≤–æ)</p>
                        <p>–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: <strong>{next_server_time}</strong></p>
                        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}</p>
                    </div>
                </div>
            </body>
        </html>
        """
        
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return f"""
        <html>
            <body>
                <h1>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                <p>–û—à–∏–±–∫–∞: {str(e)}</p>
                <p><a href="/debug">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–ª–∞–¥–∫–µ</a></p>
            </body>
        </html>
        """

@app.route('/time-info')
def time_info():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏"""
    current_times = TimeZoneConverter.get_current_times()
    schedule_info = content_scheduler.get_schedule()
    
    return jsonify({
        "current_times": current_times,
        "schedules": schedule_info,
        "time_difference_hours": Config.TIME_DIFFERENCE_HOURS,
        "next_event": content_scheduler.get_next_event()
    })

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    connection_test = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    
    return jsonify({
        "status": "active",
        "telegram_channel_id": Config.TELEGRAM_CHANNEL,
        "channel_username": "@ppsupershef",
        "bot_token_exists": bool(Config.TELEGRAM_BOT_TOKEN),
        "scheduler_status": "running" if content_scheduler.is_running else "stopped",
        "connection_test": connection_test,
        "time_info": current_times,
        "time_difference": f"+{Config.TIME_DIFFERENCE_HOURS} hours (Kemerovo ahead)",
        "environment": "production" if os.getenv('PRODUCTION') else "development"
    })

@app.route('/send-now/<content_type>')
def send_now(content_type):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content = None
        
        if content_type == 'breakfast':
            content = content_gen.generate_breakfast()
        elif content_type == 'lunch':
            content = content_gen.generate_lunch()
        elif content_type == 'science':
            content = content_gen.generate_science()
        elif content_type == 'dinner':
            content = content_gen.generate_dinner()
        elif content_type == 'interval':
            content = content_gen.generate_interval()
        elif content_type == 'expert_advice':
            content = content_gen.generate_expert_advice()
        else:
            return jsonify({
                "status": "error", 
                "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}"
            })
        
        if not content:
            return jsonify({
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        current_times = TimeZoneConverter.get_current_times()
        content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']} (–ö–µ–º–µ—Ä–æ–≤–æ)"
        
        success = elite_channel.send_to_telegram(content_with_time)
        
        if success:
            return jsonify({
                "status": "success",
                "message": f"–ö–æ–Ω—Ç–µ–Ω—Ç '{content_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª",
                "channel_id": Config.TELEGRAM_CHANNEL,
                "kemerovo_time": current_times['kemerovo_time'],
                "server_time": current_times['server_time']
            })
        else:
            return jsonify({
                "status": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '{content_type}'"
            })
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send-now: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
    current_times = TimeZoneConverter.get_current_times()
    test_message = f"‚úÖ –¢–ï–°–¢: –ö–∞–Ω–∞–ª @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}\n–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}"
    
    success = elite_channel.send_to_telegram(test_message)
    
    return jsonify({
        "status": "success" if success else "error",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "channel_id": Config.TELEGRAM_CHANNEL,
        "kemerovo_time": current_times['kemerovo_time'],
        "server_time": current_times['server_time'],
        "timestamp": datetime.now(Config.SERVER_TIMEZONE).isoformat()
    })

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    connection = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now(Config.SERVER_TIMEZONE).isoformat(),
        "telegram_connection": connection,
        "scheduler_running": content_scheduler.is_running,
        "channel": "@ppsupershef",
        "time_info": current_times
    })

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞: @ppsupershef")
    logger.info(f"üìã ID –∫–∞–Ω–∞–ª–∞: {Config.TELEGRAM_CHANNEL}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    current_times = TimeZoneConverter.get_current_times()
    logger.info(f"üåç –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {current_times['server_time']}")
    logger.info(f"üåç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
