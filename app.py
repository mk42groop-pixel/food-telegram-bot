import os
import logging
import requests
import json
import time
import schedule
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, request, jsonify
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8459555322:AAHeddx-gWdcYXYkQHzyb9w7he9AHmZLhmA')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY', 'AQVN3PPgJleV36f1uQeT6F_Ph5oI5xTyFPNf18h-')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-8af2b1f4bce441f8a802c2653516237a')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    SERVER_TIMEZONE = pytz.timezone('UTC')
    KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')
    TIME_DIFFERENCE_HOURS = 7
    
    # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ADMIN_USER_ID = os.getenv('TELEGRAM_ADMIN_ID', '–≤–∞—à_user_id_–∑–¥–µ—Å—å')

class ContentFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π"""
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    EMOTIONAL_TRIGGERS = {
        'achievement': [
            "–°—Ç–∞–Ω—å—Ç–µ –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è, –∫–æ—Ç–æ—Ä–æ–π –≤–æ—Å—Ö–∏—â–∞–µ—Ç–µ—Å—å",
            "–ï–¥–∞ - –≤–∞—à —Å–æ—é–∑–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∞–º–±–∏—Ü–∏–π", 
            "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è",
            "–ö–∞–∂–¥–∞—è —Ç–∞—Ä–µ–ª–∫–∞ - —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è"
        ],
        'transformation': [
            "–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞",
            "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
            "–í–∞—à–µ —Ç–µ–ª–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ç–æ–ø–ª–∏–≤–∞", 
            "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —É–∂–∏–Ω–∞"
        ],
        'community': [
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
            "–í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é",
            "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞",
            "–í–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É —É–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        ]
    }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    SYSTEM_PROMPT = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –∏ –Ω–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏—é, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –®–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.

–§–ò–õ–û–°–û–§–ò–Ø: 
"–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å"

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:
1. –ù–∞—á–∏–Ω–∞–π —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∂–∏–∑–Ω–∏
2. –î–æ–±–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã
3. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
4. –û–±—ä—è—Å–Ω—è–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º
5. –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –ø—Ä–∏–∑—ã–≤–æ–º –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–¶–ï–ü–¢–û–í:
- –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –ú–∏—à–ª–µ–Ω, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞
- –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
- –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π

–¢–û–ù:
- –î—Ä—É–∂–µ—Å–∫–∏–π, –Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞  
- –ù–∞—É—á–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""
    
    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    VISUAL_CONTENT = {
        'infographics': [
            {'emoji': 'üìä', 'title': '–ü—Ä–∞–≤–∏–ª–æ —Ç–∞—Ä–µ–ª–∫–∏', 'desc': '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'},
            {'emoji': 'üìà', 'title': '–ë–∞–ª–∞–Ω—Å –ë–ñ–£', 'desc': '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤'},
            {'emoji': '‚è±Ô∏è', 'title': '–¢–∞–π–º–∏–Ω–≥ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏', 'desc': '–ö–æ–≥–¥–∞ –∏ —á—Ç–æ –ª—É—á—à–µ –µ—Å—Ç—å'},
            {'emoji': 'ü•ó', 'title': '–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'desc': '–ß—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ'},
            {'emoji': 'üíß', 'title': '–ì–∏–¥—Ä–æ–±–∞–ª–∞–Ω—Å', 'desc': '–°—Ö–µ–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã'}
        ]
    }
    
    # –†–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    REACTIONS = [
        {"emoji": "üòã", "text": "–≤–∫—É—Å–Ω–æ"},
        {"emoji": "üí™", "text": "–ø–æ–ª–µ–∑–Ω–æ"},
        {"emoji": "üë®‚Äçüç≥", "text": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é"},
        {"emoji": "üìù", "text": "–∑–∞–ø–∏—à—É —Å–µ–±–µ"},
        {"emoji": "üìö", "text": "–Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã"}
    ]

    @staticmethod
    def get_emotional_trigger():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        all_triggers = []
        for category in ContentFormatter.EMOTIONAL_TRIGGERS.values():
            all_triggers.extend(category)
        return random.choice(all_triggers)

    @staticmethod
    def format_philosophy_content(title, content, content_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"""
        trigger = ContentFormatter.get_emotional_trigger()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        reactions_line = " | ".join([f"{reaction['emoji']} {reaction['text']}" for reaction in ContentFormatter.REACTIONS])
        
        formatted_content = f"""üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø</b>

{trigger}

{title}

{content}

---
üí´ <b>–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç - –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é</b>

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí @ppsupershef_chat

{reactions_line}

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""
        
        return formatted_content

    @staticmethod
    def format_footer():
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        reactions_line = " | ".join([f"{reaction['emoji']} {reaction['text']}" for reaction in ContentFormatter.REACTIONS])
        
        return f"""
        
üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí @ppsupershef_chat

{reactions_line}

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""

class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(Config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TIMEZONE)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def server_to_kemerovo_time(server_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(Config.SERVER_TIMEZONE).date()
            server_dt = datetime.combine(today, datetime.strptime(server_time_str, '%H:%M').time())
            server_dt = Config.SERVER_TIMEZONE.localize(server_dt)
            kemerovo_dt = server_dt.astimezone(Config.KEMEROVO_TIMEZONE)
            return kemerovo_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {server_time_str}: {e}")
            return server_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        server_now = datetime.now(Config.SERVER_TIMEZONE)
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_timezone': str(Config.SERVER_TIMEZONE),
            'kemerovo_timezone': str(Config.KEMEROVO_TIMEZONE)
        }

class TelegramPolls:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ –≤ Telegram"""
    
    def __init__(self, bot_token):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def create_poll(self, chat_id, question, options, is_anonymous=True, allows_multiple_answers=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendPoll"
            payload = {
                'chat_id': chat_id,
                'question': question,
                'options': options,
                'is_anonymous': is_anonymous,
                'allows_multiple_answers': allows_multiple_answers,
                'type': 'regular'
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {question}")
                return result['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None

class ChannelAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self, bot_token, channel_id):
        self.bot_token = bot_token
        self.channel_id = channel_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    def get_member_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {
                'chat_id': self.channel_id
            }
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            if result.get('ok'):
                return result['result']
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def generate_public_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        member_count = self.get_member_count()
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ö–ê–ù–ê–õ–ê @ppsupershef</b>

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{member_count}</b>
üìÖ –î–∞—Ç–∞: {current_time}
üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {TimeZoneConverter.get_current_times()['kemerovo_time']}

üí´ <b>–°–ï–ì–û–î–ù–Ø –í –ö–ê–ù–ê–õ–ï:</b>
‚Ä¢ üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞
‚Ä¢ üí™ –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ üõ°Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è
‚Ä¢ üç∞ –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è

üéØ <b>–ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –ö–õ–£–ë–£ –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø!</b>

#–æ—Ç—á–µ—Ç #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
        
        return report

    def generate_private_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        member_count = self.get_member_count()
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""üîê <b>–ü–†–ò–í–ê–¢–ù–´–ô –û–¢–ß–ï–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</b>
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{member_count}</b>
üìÖ –î–∞—Ç–∞: {current_time}

üåç <b>–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: ‚úÖ –ù–æ–≤–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è
‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: üìà –†–∞—Å—Ç–µ—Ç

üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫—É—Ä—Å –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

‚ö†Ô∏è <b>–≠–¢–û–¢ –û–¢–ß–ï–¢ –î–û–°–¢–£–ü–ï–ù –¢–û–õ–¨–ö–û –í–ê–ú</b>"""
        
        return report

    def send_private_message(self, message, user_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            if not user_id:
                user_id = Config.ADMIN_USER_ID
            
            if user_id == '–≤–∞—à_user_id_–∑–¥–µ—Å—å':
                logger.error("‚ùå User ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': user_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.group = Config.TELEGRAM_GROUP
        self.polls_manager = TelegramPolls(self.token)
        self.formatter = ContentFormatter()
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.token:
                return {"status": "error", "message": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            return {
                "status": "success", 
                "bot": bot_info['result']['username'],
                "channel_id": self.channel
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def send_poll(self, poll_type='content_preference'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            poll_data = {
                'question': "üéØ –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?",
                'options': ['üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ', 'üí™ –≠–Ω–µ—Ä–≥–∏—è', 'üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ', 'üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è']
            }
            return self.polls_manager.create_poll(self.channel, poll_data['question'], poll_data['options'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    def send_visual_content(self, content_type='infographics'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            visual_item = random.choice(self.formatter.VISUAL_CONTENT[content_type])
            message = f"""üé® <b>{visual_item['title']}</b>

{visual_item['desc']}

üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É - –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è!

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ

#–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ #–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ"""
            
            return self.send_to_telegram(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
            return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.formatter = ContentFormatter()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1500
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': ContentFormatter.SYSTEM_PROMPT
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None

    # –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö: üß† –ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï
    def generate_neuro_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å —è—Å–Ω–æ—Å—Ç—å—é —É–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- –û–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
- –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –º–æ–∑–≥–∞
- –•–æ–ª–∏–Ω –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –æ–±—É—á–µ–Ω–∏—è
- L-—Ç–∏—Ä–æ–∑–∏–Ω –¥–ª—è —Ñ–æ–∫—É—Å–∞

–í–∫–ª—é—á–∏:
1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
2. –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è 
3. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –∫–∞–∫ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞
4. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–¥–æ 15 –º–∏–Ω—É—Ç)
5. –°–æ–≤–µ—Ç—ã –ø–æ —É—Å–∏–ª–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê", content, "breakfast")
        
        fallback = """ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–æ–º—Ç–∏–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ê–≤–æ–∫–∞–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–º–µ–≥–∞-9 –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤, —à–ø–∏–Ω–∞—Ç - –ª—é—Ç–µ–∏–Ω –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏."""
        return self.formatter.format_philosophy_content("üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê", fallback, "breakfast")

    def generate_neuro_dessert(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –¥–µ—Å–µ—Ä—Ç–∞ –¥–ª—è –º–æ–∑–≥–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –¥–µ—Å–µ—Ä—Ç–∞ —Å –∞–≤–æ–∫–∞–¥–æ, –∫–æ—Ç–æ—Ä—ã–π —É–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–°–ª–∞–¥–∫–∞—è –ø–∞—É–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —É–º–Ω–µ–µ"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- –§–ª–∞–≤–æ–Ω–æ–∏–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
- –¢—Ä–∏–ø—Ç–æ—Ñ–∞–Ω –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Å–µ—Ä–æ—Ç–æ–Ω–∏–Ω–∞
- –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –Ω–µ–π—Ä–æ–Ω–æ–≤
- –ú–∞–≥–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ —Ñ–æ–∫—É—Å–∞

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ–ª—ã–π –∞–≤–æ–∫–∞–¥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
- –°–æ—á–µ—Ç–∞—Ç—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤ –†–æ—Å—Å–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫—Ä–µ–º–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –±–µ–∑ —Å–ª–∏–≤–æ–∫
- –û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–ª—å–∑—É –º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –∂–∏—Ä–æ–≤
- –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ 20 –º–∏–Ω—É—Ç

–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
- –û–ª–µ–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞ –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –õ—é—Ç–µ–∏–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≥–ª–∞–∑
- –ì–ª—É—Ç–∞—Ç–∏–æ–Ω –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üç´ –£–ú–ù–´–ô –î–ï–°–ï–†–¢ –î–õ–Ø –ú–û–ó–ì–ê", content, "dessert")
        
        fallback = """ü•ë –®–æ–∫–æ–ª–∞–¥–Ω—ã–π –º—É—Å—Å –∏–∑ –∞–≤–æ–∫–∞–¥–æ

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 2 —Å–ø–µ–ª—ã—Ö –ø–ª–æ–¥–∞
‚Ä¢ –ö–∞–∫–∞–æ-–ø–æ—Ä–æ—à–æ–∫ - 3 —Å—Ç.–ª.
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.
‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –û—á–∏—Å—Ç–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ –∏ –±–∞–Ω–∞–Ω
2. –í–∑–±–µ–π—Ç–µ –≤ –±–ª–µ–Ω–¥–µ—Ä–µ –¥–æ –∫—Ä–µ–º–æ–æ–±—Ä–∞–∑–Ω–æ–π –º–∞—Å—Å—ã
3. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫–∞–æ –∏ –º–µ–¥, –≤–∑–±–µ–π—Ç–µ –µ—â–µ —Ä–∞–∑
4. –û—Ö–ª–∞–¥–∏—Ç–µ 15 –º–∏–Ω—É—Ç, –ø–æ—Å—ã–ø—å—Ç–µ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ê–≤–æ–∫–∞–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ª–µ–∏–Ω–æ–≤—É—é –∫–∏—Å–ª–æ—Ç—É –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤, –∫–∞–∫–∞–æ - —Ñ–ª–∞–≤–æ–Ω–æ–∏–¥—ã –¥–ª—è –ø–∞–º—è—Ç–∏, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è —Å–∏–Ω–∞–ø—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏."""
        return self.formatter.format_philosophy_content("üç´ –£–ú–ù–´–ô –î–ï–°–ï–†–¢ –î–õ–Ø –ú–û–ó–ì–ê", fallback, "dessert")

    # –í–¢–û–†–ù–ò–ö: üí™ –≠–ù–ï–†–ì–ò–Ø –ò –¢–û–ù–£–°
    def generate_energy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–∂–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ - –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ü—Ä–æ—Å–Ω–∏—Å—å —Å —ç–Ω–µ—Ä–≥–∏–µ–π, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏"

–ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- –ö–æ—ç–Ω–∑–∏–º Q10 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏
- –ú–∞–≥–Ω–∏–π –¥–ª—è –ê–¢–§ —Å–∏–Ω—Ç–µ–∑–∞
- –í–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
- –ñ–µ–ª–µ–∑–æ –¥–ª—è –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞

–§–æ–∫—É—Å –Ω–∞:
- –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (–¥–æ 10 –º–∏–Ω—É—Ç)
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±—ã—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
- –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", content, "breakfast")
        
        fallback = """ü•£ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —Å–µ–º–µ–Ω–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50 –≥
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 20 –≥
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - ¬Ω —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π –Ω–∞ 5 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –±–∞–Ω–∞–Ω –∏ —Å–µ–º–µ–Ω–∞ —á–∏–∞
3. –ü–æ—Å—ã–ø—å—Ç–µ –º–∏–Ω–¥–∞–ª–µ–º –∏ –∫–æ—Ä–∏—Ü–µ–π

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –û–≤—Å—è–Ω–∫–∞ –¥–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏, —Å–µ–º–µ–Ω–∞ —á–∏–∞ - –æ–º–µ–≥–∞-3 –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π, –∫–æ—Ä–∏—Ü–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏."""
        return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", fallback, "breakfast")

    # –°–†–ï–î–ê: üõ°Ô∏è –î–û–õ–ì–û–õ–ï–¢–ò–ï
    def generate_longevity_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –≥–æ–¥—ã –∫ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏"

–ì–µ—Ä–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã:
- –†–µ—Å–≤–µ—Ä–∞—Ç—Ä–æ–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Ä—Ç—É–∏–Ω–æ–≤
- –ö—É—Ä–∫—É–º–∏–Ω –ø—Ä–æ—Ç–∏–≤ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è
- –ü–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã –¥–ª—è –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–æ–π –∑–∞—â–∏—Ç—ã
- –°–ø–µ—Ä–º–∏–¥–∏–Ω –¥–ª—è –∞—É—Ç–æ—Ñ–∞–≥–∏–∏

–ê–∫—Ü–µ–Ω—Ç –Ω–∞:
- –ü—Ä–æ–¥—É–∫—Ç—ã, –¥–æ–∫–∞–∑–∞–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ–º
- –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ anti-age
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ –¥–æ—Ä–æ–≥–∏—Ö —Å—É–ø–µ—Ä—Ñ—É–¥–æ–≤"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", content, "breakfast")
        
        fallback = """ü•£ –ö–∞—à–∞ —Å –∫—É—Ä–∫—É–º–æ–π –∏ —è–≥–æ–¥–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 50 –≥
‚Ä¢ –ö—É—Ä–∫—É–º–∞ - 1 —á.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 100 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–Ω–µ–≤—É—é –∫–∞—à—É
2. –î–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∫—É–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —è–≥–æ–¥–∞–º–∏, –æ—Ä–µ—Ö–∞–º–∏ –∏ –ª—å–Ω—è–Ω—ã–º –º–∞—Å–ª–æ–º

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ö—É—Ä–∫—É–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É—Ä–∫—É–º–∏–Ω - –º–æ—â–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç, —è–≥–æ–¥—ã - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã –ø—Ä–æ—Ç–∏–≤ –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞, –ª—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - –æ–º–µ–≥–∞-3 –¥–ª—è –∫–ª–µ—Ç–æ—á–Ω—ã—Ö –º–µ–º–±—Ä–∞–Ω."""
        return self.formatter.format_philosophy_content("üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", fallback, "breakfast")

    # –ß–ï–¢–í–ï–†–ì: üçΩÔ∏è –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –ù–ê–°–õ–ê–ñ–î–ï–ù–ò–ï
    def generate_gastronomy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ø–æ–ª–µ–∑–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å"

–≠–ª–µ–º–µ–Ω—Ç—ã –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç–∏:
- –ù–µ–æ–±—ã—á–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤–∫—É—Å–æ–≤
- –≠—Å—Ç–µ—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏
- –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
- –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞

–§–æ–∫—É—Å –Ω–∞:
- –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–µ–º—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞
- –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ –ø–æ–ª—å–∑—ã
- –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ 20 –º–∏–Ω—É—Ç
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±—ã—á–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", content, "breakfast")
        
        fallback = """üç≥ –ì—Ä–µ–Ω–∫–∏ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —è–π—Ü–æ–º-–ø–∞—à–æ—Ç

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - 2 –ª–æ–º—Ç–∏–∫–∞
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 1 —à—Ç
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –†—É–∫–∫–æ–ª–∞ - 30 –≥
‚Ä¢ –°–µ–º–µ–Ω–∞ –∫—É–Ω–∂—É—Ç–∞ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –ü–æ–¥—Å—É—à–∏—Ç–µ —Ö–ª–µ–± –Ω–∞ —Å—É—Ö–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ
2. –†–∞–∑–æ–º–Ω–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ —Å —Å–æ–ª—å—é
3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —è–π—Ü–∞-–ø–∞—à–æ—Ç (3 –º–∏–Ω—É—Ç—ã –≤ –∫–∏–ø—è—â–µ–π –≤–æ–¥–µ)
4. –°–æ–±–µ—Ä–∏—Ç–µ: —Ö–ª–µ–± + –∞–≤–æ–∫–∞–¥–æ + —Ä—É–∫–∫–æ–ª–∞ + —è–π—Ü–æ

üí° –®–µ—Ñ-—Å–æ–≤–µ—Ç: –î–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —è–π—Ü–∞-–ø–∞—à–æ—Ç –¥–æ–±–∞–≤—å—Ç–µ –≤ –≤–æ–¥—É 1 —Å—Ç.–ª. —É–∫—Å—É—Å–∞."""
        return self.formatter.format_philosophy_content("üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", fallback, "breakfast")

    # –ü–Ø–¢–ù–ò–¶–ê: üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –ü–õ–ê–ù–´
    def generate_analytical_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ó–∞–≤—Ç—Ä–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–ø—ã—Ç –Ω–µ–¥–µ–ª–∏ –≤ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ"

–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:
- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è
- –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
- –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –°–≤—è–∑—å –ø–∏—Ç–∞–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã—Ö–æ–¥–Ω—ã–º –±–µ–∑ —Å—Ä—ã–≤–æ–≤"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", content, "breakfast")
        
        fallback = """ü•£ –¢–≤–æ—Ä–æ–∂–Ω–∞—è –º–∞—Å—Å–∞ —Å –æ—Ä–µ—Ö–∞–º–∏ –∏ –º–µ–¥–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 150 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥
‚Ä¢ –ú–µ–¥ - 1 —Å—Ç.–ª.
‚Ä¢ –ò–∑—é–º - 20 –≥
‚Ä¢ –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–º–µ—à–∞–π—Ç–µ —Ç–≤–æ—Ä–æ–≥ —Å –º–µ–¥–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º
2. –î–æ–±–∞–≤—å—Ç–µ –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–µ –æ—Ä–µ—Ö–∏ –∏ –∏–∑—é–º
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–º–∏ —Ö–ª–µ–±—Ü–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –¢–≤–æ—Ä–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—Ä–æ–∑–∏–Ω –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è, –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –º–µ–¥ - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é –≥–ª—é–∫–æ–∑—É –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –º–æ–∑–≥–∞."""
        return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", fallback, "breakfast")

    # –°–£–ë–ë–û–¢–ê: üõí –£–ú–ù–´–ï –ü–û–ö–£–ü–ö–ò + –†–ï–¶–ï–ü–¢–´
    def generate_smart_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
        season = self._get_current_season()
        
        shopping_list = f"""üõí <b>–£–ú–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ù–ê –ù–ï–î–ï–õ–Æ</b>

–û—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è + —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ({season})

üß† <b>–î–õ–Ø –ú–û–ó–ì–ê –ò –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´:</b>
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 200 –≥
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 3-4 —à—Ç
‚Ä¢ –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ (–ª–æ—Å–æ—Å—å, —Å–∫—É–º–±—Ä–∏—è) - 500 –≥
‚Ä¢ –Ø–π—Ü–∞ - 10 —à—Ç
‚Ä¢ –¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ 85% - 100 –≥

üí™ <b>–î–õ–Ø –≠–ù–ï–†–ì–ò–ò –ò –¢–û–ù–£–°–ê:</b>
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 500 –≥
‚Ä¢ –ë–∞–Ω–∞–Ω—ã - 1 –∫–≥
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 100 –≥
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 1 –∫–≥
‚Ä¢ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 500 –≥

üõ°Ô∏è <b>–î–õ–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø:</b>
‚Ä¢ –ö—É—Ä–∫—É–º–∞ - 50 –≥
‚Ä¢ –ò–º–±–∏—Ä—å - 100 –≥
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 3 –≥–æ–ª–æ–≤–∫–∏
‚Ä¢ –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 500 –≥
‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ –æ–≤–æ—â–∏ - 1 –∫–≥

üçΩÔ∏è <b>–î–õ–Ø –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ù–ê–°–õ–ê–ñ–î–ï–ù–ò–Ø:</b>
‚Ä¢ –°–ø–µ—Ü–∏–∏ (–∫–æ—Ä–∏—Ü–∞, –∫–∞—Ä–¥–∞–º–æ–Ω, –º—É—Å–∫–∞—Ç)
‚Ä¢ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–µ–¥ - 300 –≥
‚Ä¢ –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ - 400 –º–ª
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 500 –º–ª

üí° <b>–°–û–í–ï–¢–´ –û–¢ –®–ï–§-–ü–û–í–ê–†–ê:</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã - –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –æ—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ

üéØ <b>–§–ò–õ–û–°–û–§–ò–Ø –ü–û–ö–£–ü–û–ö:</b>
–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!

#—á–µ–∫–ª–∏—Å—Ç #—É–º–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏ #{season}"""
        
        return shopping_list

    def _get_current_season(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"

    # –í–û–°–ö–†–ï–°–ï–ù–¨–ï: üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê + –†–ï–¶–ï–ü–¢–´
    def generate_sunday_brunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±—Ä–∞–Ω—á–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –±—Ä–∞–Ω—á–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∏—Ç—É–∞–ª–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á - —Ç–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –Ω–µ–¥–µ–ª–∏"

–≠–ª–µ–º–µ–Ω—Ç—ã —Ä–∏—Ç—É–∞–ª–∞:
- –ë–ª—é–¥–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
- –°–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
- –¢–µ—Ö–Ω–∏–∫–∏, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏

–ê–∫—Ü–µ–Ω—Ç –Ω–∞:
- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —á–µ—Ä–µ–∑ –ø–∏—Ç–∞–Ω–∏–µ
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è
- –ü—Ä–∞–∫—Ç–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ", content, "brunch")
        
        fallback = """ü•û –ü–∞–Ω–∫–µ–π–∫–∏ –∏–∑ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π –º—É–∫–∏ —Å —è–≥–æ–¥–Ω—ã–º —Å–æ—É—Å–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è - 150 –≥
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ö–µ—Ñ–∏—Ä - 200 –º–ª
‚Ä¢ –†–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å - 1 —á.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 200 –≥
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–º–µ—à–∞–π—Ç–µ —Å—É—Ö–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
2. –î–æ–±–∞–≤—å—Ç–µ —è–π—Ü–∞ –∏ –∫–µ—Ñ–∏—Ä, –∑–∞–º–µ—Å–∏—Ç–µ —Ç–µ—Å—Ç–æ
3. –ñ–∞—Ä—å—Ç–µ –Ω–∞ –∞–Ω—Ç–∏–ø—Ä–∏–≥–∞—Ä–Ω–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ –ø–æ 2-3 –º–∏–Ω—É—Ç—ã —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
4. –î–ª—è —Å–æ—É—Å–∞ —Ä–∞–∑–æ–≥—Ä–µ–π—Ç–µ —è–≥–æ–¥—ã —Å –º–µ–¥–æ–º

üí° –†–∏—Ç—É–∞–ª –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏: –ì–æ—Ç–æ–≤—å—Ç–µ –≤ —Ç–∏—à–∏–Ω–µ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏. –≠—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—ã—â–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ, –Ω–æ –∏ –¥—É—à—É."""
        return self.formatter.format_philosophy_content("üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ", fallback, "brunch")

    # –ù–ê–£–ß–ù–´–ô –ö–û–ù–¢–ï–ù–¢
    def generate_science_content(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompt = """–ü—Ä–µ–¥—Å—Ç–∞–≤—å –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –∂–µ.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ù–∞—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ç–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –µ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ–ª—å–∫–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –¥–µ–π—Å—Ç–≤–∏—è
- –û–ø–æ—Ä–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –ù–∞—É—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ/—Ñ–∞–∫—Ç
2. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ
3. –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ –ø–∏—Ç–∞–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è
4. –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç
5. –ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üî¨ –ù–ê–£–ö–ê –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø", content, "science")
        
        fallback = """üèÜ –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç: –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞—É—Ç–æ—Ñ–∞–≥–∏—é

–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ: –ê—É—Ç–æ—Ñ–∞–≥–∏—è - –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—â–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ—Ç–∫—Ä—ã—Ç—ã–π —è–ø–æ–Ω—Å–∫–∏–º —É—á–µ–Ω—ã–º –Å—Å–∏–Ω–æ—Ä–∏ –û—Å—É–º–∏ (–ù–æ–±–µ–ª–µ–≤—Å–∫–∞—è –ø—Ä–µ–º–∏—è 2016).

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ü—Ä–∏ 16-—á–∞—Å–æ–≤–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∫–ª–µ—Ç–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç "–ø–æ–µ–¥–∞—Ç—å" —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –±–µ–ª–∫–∏ –∏ –æ—Ä–≥–∞–Ω–µ–ª–ª—ã, –æ–±–Ω–æ–≤–ª—è—è—Å—å –Ω–∞ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–º —É—Ä–æ–≤–Ω–µ.

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–∫–æ–Ω—á–∏—Ç—å —É–∂–∏–Ω –≤ 20:00 –∏ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –≤ 12:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è, —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üí° –ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏: –ù–∞—á–Ω–∏—Ç–µ —Å 12-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–æ 16 —á–∞—Å–æ–≤."""
        return self.formatter.format_philosophy_content("üî¨ –ù–ê–£–ö–ê –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø", fallback, "science")

    # –°–û–í–ï–¢–´ –≠–ö–°–ü–ï–†–¢–û–í
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        prompt = """–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–∏–Ω—Ü–∏–ø –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ü—Ä–∏–Ω—Ü–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–¥—É –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–Ω—Ü–∏–ø—É:
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
- –ù–∞—É—á–Ω–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è
- –ì–ª—É–±–∏–Ω–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞
2. –ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞—É–∫–∞)
3. –ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
4. –ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–µ—Ç
5. –ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", content, "advice")
        
        fallback = """üéØ –ü—Ä–∏–Ω—Ü–∏–ø: "–ï—à—å—Ç–µ —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏"

–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏ - –∫—Ä–∞—Å–Ω—ã–µ, –æ—Ä–∞–Ω–∂–µ–≤—ã–µ, –∂–µ–ª—Ç—ã–µ, –∑–µ–ª–µ–Ω—ã–µ, —Å–∏–Ω–∏–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ.

–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏—Ç–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ - –ª–∏–∫–æ–ø–∏–Ω (–ø—Ä–æ—Ç–∏–≤ —Ä–∞–∫–∞)
‚Ä¢ –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω (–∑—Ä–µ–Ω–∏–µ)
‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ - –ª—é—Ç–µ–∏–Ω (–º–æ–∑–≥)
‚Ä¢ –°–∏–Ω–∏–µ - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã (—Å–µ—Ä–¥—Ü–µ)

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –æ–±–µ–¥ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º - —Å–∞–ª–∞—Ç –∏–∑ –ø–æ–º–∏–¥–æ—Ä–æ–≤, –º–æ—Ä–∫–æ–≤–∏, –ø–µ—Ä—Ü–∞, –æ–≥—É—Ä—Ü–æ–≤ –∏ –∫–∞–ø—É—Å—Ç—ã.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üí° –ü—Ä–æ—Å—Ç–æ–π —à–∞–≥: –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏."""
        return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", fallback, "advice")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
class ContentScheduler:
    def __init__(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π
        self.kemerovo_schedule = {
            # –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö: üß† –ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï
            "07:00": {"type": "neuro_breakfast", "name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫", "generator": "generate_neuro_breakfast"},
            "12:00": {"type": "focus_lunch", "name": "üéØ –û–±–µ–¥ –¥–ª—è —Ñ–æ–∫—É—Å–∞", "generator": "generate_energy_breakfast"},
            "16:00": {"type": "brain_science", "name": "üî¨ –ù–µ–π—Ä–æ–Ω–∞—É–∫–∞", "generator": "generate_science_content"},
            "17:00": {"type": "neuro_dessert", "name": "üç´ –£–º–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "generator": "generate_neuro_dessert"},
            "19:00": {"type": "recovery_dinner", "name": "üåô –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —É–∂–∏–Ω", "generator": "generate_longevity_breakfast"},
            "21:00": {"type": "evening_biohack", "name": "üí´ –í–µ—á–µ—Ä–Ω–∏–π –±–∏–æ—Ö–∞–∫–∏–Ω–≥", "generator": "generate_expert_advice"},

            # –í–¢–û–†–ù–ò–ö: üí™ –≠–ù–ï–†–ì–ò–Ø –ò –¢–û–ù–£–°
            "07:00": {"type": "energy_breakfast", "name": "‚ö° –≠–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫", "generator": "generate_energy_breakfast"},
            "12:00": {"type": "endurance_lunch", "name": "üèÉ –û–±–µ–¥ –¥–ª—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏", "generator": "generate_energy_breakfast"},
            "16:00": {"type": "energy_science", "name": "üî¨ –ù–∞—É–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏", "generator": "generate_science_content"},
            "17:00": {"type": "energy_dessert", "name": "üçì –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç", "generator": "generate_neuro_dessert"},
            "19:00": {"type": "recovery_dinner", "name": "üåô –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —É–∂–∏–Ω", "generator": "generate_longevity_breakfast"},
            "21:00": {"type": "energy_tips", "name": "üí° –ü—Ä–∏–Ω—Ü–∏–ø—ã —ç–Ω–µ—Ä–≥–∏–∏", "generator": "generate_expert_advice"},

            # –°–†–ï–î–ê: üõ°Ô∏è –î–û–õ–ì–û–õ–ï–¢–ò–ï
            "07:00": {"type": "longevity_breakfast", "name": "üõ°Ô∏è –ó–∞–≤—Ç—Ä–∞–∫ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è", "generator": "generate_longevity_breakfast"},
            "12:00": {"type": "longevity_lunch", "name": "üåø –û–±–µ–¥ –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è", "generator": "generate_longevity_breakfast"},
            "16:00": {"type": "longevity_science", "name": "üî¨ –ù–∞—É–∫–∞ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è", "generator": "generate_science_content"},
            "17:00": {"type": "anti_age_dessert", "name": "üçá –ê–Ω—Ç–∏—ç–π–¥–∂ –¥–µ—Å–µ—Ä—Ç", "generator": "generate_neuro_dessert"},
            "19:00": {"type": "cellular_dinner", "name": "üåô –£–∂–∏–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "generator": "generate_longevity_breakfast"},
            "21:00": {"type": "longevity_principles", "name": "üí° –ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è", "generator": "generate_expert_advice"},

            # –ß–ï–¢–í–ï–†–ì: üçΩÔ∏è –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –ù–ê–°–õ–ê–ñ–î–ï–ù–ò–ï
            "07:00": {"type": "gastronomy_breakfast", "name": "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "generator": "generate_gastronomy_breakfast"},
            "12:00": {"type": "restaurant_lunch", "name": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –æ–±–µ–¥", "generator": "generate_gastronomy_breakfast"},
            "16:00": {"type": "taste_science", "name": "üî¨ –ù–∞—É–∫–∞ –≤–∫—É—Å–∞", "generator": "generate_science_content"},
            "17:00": {"type": "michelin_dessert", "name": "üé≠ –®–µ—Ñ-–¥–µ—Å–µ—Ä—Ç", "generator": "generate_neuro_dessert"},
            "19:00": {"type": "gastronomy_dinner", "name": "üåô –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω", "generator": "generate_gastronomy_breakfast"},
            "21:00": {"type": "enjoyment_principles", "name": "üí° –ò—Å–∫—É—Å—Å—Ç–≤–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è", "generator": "generate_expert_advice"},

            # –ü–Ø–¢–ù–ò–¶–ê: üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –ü–õ–ê–ù–´
            "07:00": {"type": "analytical_breakfast", "name": "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "generator": "generate_analytical_breakfast"},
            "12:00": {"type": "results_lunch", "name": "üéØ –û–±–µ–¥ –¥–ª—è –∏—Ç–æ–≥–æ–≤", "generator": "generate_analytical_breakfast"},
            "16:00": {"type": "results_science", "name": "üî¨ –ù–∞—É–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "generator": "generate_science_content"},
            "17:00": {"type": "reflection_dessert", "name": "üçç –î–µ—Å–µ—Ä—Ç –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è", "generator": "generate_neuro_dessert"},
            "19:00": {"type": "planning_dinner", "name": "üåô –£–∂–∏–Ω –¥–ª—è –ø–ª–∞–Ω–æ–≤", "generator": "generate_analytical_breakfast"},
            "21:00": {"type": "weekly_planning", "name": "üí° –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "generator": "generate_expert_advice"},

            # –°–£–ë–ë–û–¢–ê: üõí –£–ú–ù–´–ï –ü–û–ö–£–ü–ö–ò + –†–ï–¶–ï–ü–¢–´
            "07:00": {"type": "weekend_breakfast", "name": "ü•ó –°—É–±–±–æ—Ç–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫", "generator": "generate_energy_breakfast"},
            "10:00": {"type": "shopping_list", "name": "üõí –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫", "generator": "generate_smart_shopping_list"},
            "12:00": {"type": "family_lunch", "name": "üç≤ –°–µ–º–µ–π–Ω—ã–π –æ–±–µ–¥", "generator": "generate_gastronomy_breakfast"},
            "15:00": {"type": "visual_content", "name": "üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", "handler": "send_visual_content"},
            "17:00": {"type": "weekend_dessert", "name": "üßÅ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç", "generator": "generate_neuro_dessert"},
            "19:00": {"type": "weekend_dinner", "name": "üåô –°—É–±–±–æ—Ç–Ω–∏–π —É–∂–∏–Ω", "generator": "generate_gastronomy_breakfast"},
            "21:00": {"type": "weekend_tips", "name": "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö", "generator": "generate_expert_advice"},

            # –í–û–°–ö–†–ï–°–ï–ù–¨–ï: üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê + –†–ï–¶–ï–ü–¢–´
            "07:00": {"type": "sunday_brunch", "name": "üç≥ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á", "generator": "generate_sunday_brunch"},
            "12:00": {"type": "sunday_lunch", "name": "ü•ò –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥", "generator": "generate_gastronomy_breakfast"},
            "17:00": {"type": "sunday_dessert", "name": "üçÆ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç", "generator": "generate_neuro_dessert"},
            "18:00": {"type": "sunday_dinner", "name": "üåô –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π —É–∂–∏–Ω", "generator": "generate_analytical_breakfast"},
            "21:00": {"type": "weekly_motivation", "name": "üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é", "generator": "generate_expert_advice"}
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        self.server_schedule = self._convert_schedule(self.kemerovo_schedule)
        
        self.is_running = False
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π")

    def _convert_schedule(self, schedule):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        converted = {}
        for kemerovo_time, event in schedule.items():
            server_time = TimeZoneConverter.kemerovo_to_server_time(kemerovo_time)
            converted[server_time] = event
            logger.info(f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–µ–º–µ—Ä–æ–≤–æ {kemerovo_time} -> –°–µ—Ä–≤–µ—Ä {server_time} - {event['name']}")
        return converted

    def get_schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        return {
            'kemerovo_schedule': self.kemerovo_schedule,
            'server_schedule': self.server_schedule
        }
    
    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"""
        current_times = TimeZoneConverter.get_current_times()
        current_server_time = current_times['server_time'][:5]
        
        times_today = [t for t in self.server_schedule.keys() if t > current_server_time]
        if times_today:
            next_server_time = min(times_today)
            next_event = self.server_schedule[next_server_time]
            next_kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(next_server_time)
            return next_server_time, next_kemerovo_time, next_event
        
        first_server_time = min(self.server_schedule.keys())
        first_event = self.server_schedule[first_server_time]
        first_kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(first_server_time)
        return first_server_time, first_kemerovo_time, first_event
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        for server_time, event in self.server_schedule.items():
            kemerovo_time = TimeZoneConverter.server_to_kemerovo_time(server_time)
            self._schedule_content(server_time, event, kemerovo_time)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
        self._schedule_analytics_reports()
        
        self.is_running = True
        self._run_scheduler()

    def _schedule_content(self, server_time, event, kemerovo_time):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if 'generator' in event:
            method_name = event['generator']
            method = getattr(content_gen, method_name)
        else:
            return

        def job():
            current_times = TimeZoneConverter.get_current_times()
            logger.info(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['type']} (–ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time})")
            
            content = method()
            if content:
                content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = elite_channel.send_to_telegram(content_with_time)
                if success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['type']}")
        
        schedule.every().day.at(server_time).do(job)
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {server_time} - {event['name']}")

    def _schedule_analytics_reports(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        # –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 09:00 –ø–æ –ö–µ–º–µ—Ä–æ–≤–æ
        public_report_time = TimeZoneConverter.kemerovo_to_server_time("09:00")
        
        def public_analytics_job():
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            report = channel_analytics.generate_public_report()
            elite_channel.send_to_telegram(report)
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 09:30 –ø–æ –ö–µ–º–µ—Ä–æ–≤–æ
        private_report_time = TimeZoneConverter.kemerovo_to_server_time("09:30")
        
        def private_analytics_job():
            logger.info("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            report = channel_analytics.generate_private_report()
            channel_analytics.send_private_message(report)
        
        schedule.every().day.at(public_report_time).do(public_analytics_job)
        schedule.every().day.at(private_report_time).do(private_analytics_job)
        
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ {public_report_time}")
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ {private_report_time}")

    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        def run_scheduler():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        
        thread = Thread(target=run_scheduler, daemon=True)
        thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
elite_channel = EliteChannel()
content_gen = ContentGenerator()
content_scheduler = ContentScheduler()
channel_analytics = ChannelAnalytics(Config.TELEGRAM_BOT_TOKEN, Config.TELEGRAM_CHANNEL)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    content_scheduler.start_scheduler()
    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeZoneConverter.get_current_times()
    logger.info(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}")
    logger.info(f"üåç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
    member_count = channel_analytics.get_member_count()
    logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}")
    
    if Config.ADMIN_USER_ID and Config.ADMIN_USER_ID != '–≤–∞—à_user_id_–∑–¥–µ—Å—å':
        startup_message = "ü§ñ <b>–ë–æ—Ç @ppsupershef –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π!</b>\n\nüé™ –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:30."
        channel_analytics.send_private_message(startup_message)
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        next_server_time, next_kemerovo_time, next_event = content_scheduler.get_next_event()
        connection_info = elite_channel.test_connection()
        current_times = TimeZoneConverter.get_current_times()
        schedule_info = content_scheduler.get_schedule()
        member_count = channel_analytics.get_member_count()
        
        admin_id_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if Config.ADMIN_USER_ID and Config.ADMIN_USER_ID != '–≤–∞—à_user_id_–∑–¥–µ—Å—å' else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        html = f"""
        <html>
            <head>
                <title>–ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                    .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                    .philosophy {{ background: #9b59b6; color: white; padding: 20px; border-radius: 5px; margin: 10px 0; }}
                    .stats-card {{ background: #3498db; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .private-card {{ background: #e74c3c; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .time-info {{ background: #27ae60; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef</h1>
                        <p>–§–ò–õ–û–°–û–§–ò–Ø: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å</p>
                    </div>
                    
                    <div class="philosophy">
                        <h2>üéØ –ù–æ–≤–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</h2>
                        <p><strong>üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ ‚Ä¢ üí™ –≠–Ω–µ—Ä–≥–∏—è ‚Ä¢ üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ ‚Ä¢ üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è</strong></p>
                        <p>–ö–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏</p>
                    </div>
                    
                    <div class="stats-card">
                        <h2>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</h2>
                        <p><strong>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}</strong></p>
                        <p><strong>üìà –ö–æ–Ω—Ç–µ–Ω—Ç: 45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è</strong></p>
                        <p><strong>üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ</strong></p>
                    </div>
                    
                    <div class="private-card">
                        <h2>üîê –ü–†–ò–í–ê–¢–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</h2>
                        <p><strong>ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id_status}</strong></p>
                        <p><strong>üïí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: 09:30 (–ö–µ–º–µ—Ä–æ–≤–æ)</strong></p>
                    </div>
                    
                    <div class="time-info">
                        <h3>üåç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–†–ï–ú–ï–ù–ò</h3>
                        <p>–°–µ—Ä–≤–µ—Ä: <strong>{current_times['server_time']}</strong> ‚Ä¢ –ö–µ–º–µ—Ä–æ–≤–æ: <strong>{current_times['kemerovo_time']}</strong></p>
                        <p>–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: <strong>{next_kemerovo_time} - {next_event['name']}</strong></p>
                    </div>
                    
                    <div>
                        <h3>‚ö° –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø</h3>
                        <a class="btn" href="/test-channel">–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</a>
                        <a class="btn" href="/send-private-report" style="background: #e74c3c;">üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç</a>
                        <a class="btn" href="/send-public-report" style="background: #3498db;">üìä –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç</a>
                        <a class="btn" href="/health">Health Check</a>
                        <a class="btn" href="/debug">–û—Ç–ª–∞–¥–∫–∞</a>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <h3>üé™ –û–°–ù–û–í–ù–´–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê:</h3>
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin-top: 10px;">
                            <div style="background: #e8f6f3; padding: 10px; border-radius: 5px;">
                                <strong>üß† –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</strong> –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ
                            </div>
                            <div style="background: #fdebd0; padding: 10px; border-radius: 5px;">
                                <strong>üí™ –í—Ç–æ—Ä–Ω–∏–∫:</strong> –≠–Ω–µ—Ä–≥–∏—è –∏ —Ç–æ–Ω—É—Å
                            </div>
                            <div style="background: #e8daef; padding: 10px; border-radius: 5px;">
                                <strong>üõ°Ô∏è –°—Ä–µ–¥–∞:</strong> –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ
                            </div>
                            <div style="background: #d5f5e3; padding: 10px; border-radius: 5px;">
                                <strong>üçΩÔ∏è –ß–µ—Ç–≤–µ—Ä–≥:</strong> –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è
                            </div>
                            <div style="background: #fcf3cf; padding: 10px; border-radius: 5px;">
                                <strong>üéØ –ü—è—Ç–Ω–∏—Ü–∞:</strong> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            </div>
                            <div style="background: #d6eaf8; padding: 10px; border-radius: 5px;">
                                <strong>üõí –°—É–±–±–æ—Ç–∞:</strong> –ü–æ–∫—É–ø–∫–∏ + –†–µ—Ü–µ–ø—Ç—ã
                            </div>
                            <div style="background: #fadbd8; padding: 10px; border-radius: 5px;">
                                <strong>üìä –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:</strong> –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                            </div>
                            <div style="background: #d1f2eb; padding: 10px; border-radius: 5px;">
                                <strong>üç∞ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å:</strong> –£–º–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã –≤ 17:00
                            </div>
                        </div>
                    </div>
                </div>
            </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@app.route('/send-private-report')
def send_private_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        report = channel_analytics.generate_private_report()
        success = channel_analytics.send_private_message(report)
        
        if success:
            return jsonify({"status": "success", "message": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
        else:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-public-report')
def send_public_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        report = channel_analytics.generate_public_report()
        success = elite_channel.send_to_telegram(report)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    current_times = TimeZoneConverter.get_current_times()
    test_message = f"""üé™ <b>–¢–ï–°–¢: –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>

–ù–æ–≤–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:

üß† <b>–ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ</b> - –ø–∏—â–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞
üí™ <b>–≠–Ω–µ—Ä–≥–∏—è</b> - —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π  
üõ°Ô∏è <b>–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ</b> - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–π –∂–∏–∑–Ω–∏
üçΩÔ∏è <b>–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è</b> - –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–π

ü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üéØ <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω:</b> 45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è
üí´ <b>–§–∏–ª–æ—Å–æ—Ñ–∏—è:</b> –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å!

üïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"""
    
    success = elite_channel.send_to_telegram(test_message)
    return jsonify({"status": "success" if success else "error"})

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    connection = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    member_count = channel_analytics.get_member_count()
    
    return jsonify({
        "status": "healthy",
        "philosophy": "üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è",
        "member_count": member_count,
        "scheduler_running": content_scheduler.is_running,
        "time_info": current_times
    })

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    connection_test = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    member_count = channel_analytics.get_member_count()
    
    return jsonify({
        "status": "active",
        "philosophy": "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ",
        "content_plan": "45 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è",
        "member_count": member_count,
        "scheduler_status": "running" if content_scheduler.is_running else "stopped",
        "time_info": current_times
    })

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ö–ª—É–±–∞ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è: @ppsupershef")
    logger.info(f"üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏")
    logger.info(f"üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 45 –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
