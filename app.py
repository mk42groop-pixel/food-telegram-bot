import os
import logging
import requests
import json
import time
import schedule
import hashlib
import re
from datetime import datetime, timedelta
from threading import Thread, Lock
from flask import Flask, request, jsonify, render_template_string
import pytz
import random
from dotenv import load_dotenv
from functools import wraps

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL', '-1003152210862')
    TELEGRAM_GROUP = os.getenv('TELEGRAM_GROUP', '@ppsupershef_chat')
    YANDEX_GPT_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
    DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    API_SECRET = os.getenv('API_SECRET', 'your-secret-key-here')
    MAX_REQUESTS_PER_MINUTE = 30
    RATE_LIMIT_WINDOW = 60
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    SERVER_TIMEZONE = pytz.timezone('UTC')
    KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')
    TIME_DIFFERENCE_HOURS = 7

# –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
class SecurityManager:
    _instance = None
    _lock = Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(SecurityManager, cls).__new__(cls)
                cls._instance.request_log = {}
                cls._instance.blocked_ips = set()
            return cls._instance
    
    def check_rate_limit(self, ip_address):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        if ip_address in self.blocked_ips:
            return False
        
        if ip_address not in self.request_log:
            self.request_log[ip_address] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.request_log[ip_address] = [
            req_time for req_time in self.request_log[ip_address]
            if current_time - req_time < Config.RATE_LIMIT_WINDOW
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.request_log[ip_address]) >= Config.MAX_REQUESTS_PER_MINUTE:
            self.blocked_ips.add(ip_address)
            logger.warning(f"üö® IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: {ip_address}")
            return False
        
        self.request_log[ip_address].append(current_time)
        return True

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
def require_api_key(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key') or request.args.get('api_key')
        if not api_key or api_key != Config.API_SECRET:
            return jsonify({"status": "error", "message": "Invalid API key"}), 401
        return f(*args, **kwargs)
    return decorated_function

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting
def rate_limit(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        ip_address = request.remote_addr
        security_manager = SecurityManager()
        
        if not security_manager.check_rate_limit(ip_address):
            return jsonify({
                "status": "error", 
                "message": "Rate limit exceeded. Try again later."
            }), 429
        
        return f(*args, **kwargs)
    return decorated_function

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
class SecureLogger:
    @staticmethod
    def safe_log(message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        sensitive_patterns = [
            r'bot\d+:[A-Za-z0-9_-]{35}',
            r'api_key_[A-Za-z0-9]{20,}',
            r'token_[A-Za-z0-9]{20,}',
            r'[A-Za-z0-9]{40,}'  # –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏
        ]
        
        safe_message = message
        for pattern in sensitive_patterns:
            safe_message = re.sub(pattern, '[REDACTED]', safe_message)
        
        logger.info(safe_message)

# –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–ö–ï–ù–û–í - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
def safe_debug_tokens():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ –∏—Ö –ø–æ–∫–∞–∑–∞"""
    print("üîç –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–ö–ï–ù–û–í:")
    
    tokens_status = {
        'TELEGRAM_BOT_TOKEN': bool(os.getenv('TELEGRAM_BOT_TOKEN')),
        'YANDEX_GPT_API_KEY': bool(os.getenv('YANDEX_GPT_API_KEY')),
        'YANDEX_FOLDER_ID': bool(os.getenv('YANDEX_FOLDER_ID')),
        'DEEPSEEK_API_KEY': bool(os.getenv('DEEPSEEK_API_KEY'))
    }
    
    all_ok = True
    for name, has_value in tokens_status.items():
        if has_value:
            print(f"‚úÖ {name}: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print(f"‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù!")
            all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
    if os.path.exists('.env'):
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        with open('.env', 'r') as f:
            content = f.read()
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("‚ùå –§–∞–π–ª .env –ù–ï –Ω–∞–π–¥–µ–Ω!")
        all_ok = False
    
    return all_ok

class ContentFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π"""
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    EMOTIONAL_TRIGGERS = {
        'achievement': [
            "–°—Ç–∞–Ω—å—Ç–µ –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è, –∫–æ—Ç–æ—Ä–æ–π –≤–æ—Å—Ö–∏—â–∞–µ—Ç–µ—Å—å",
            "–ï–¥–∞ - –≤–∞—à —Å–æ—é–∑–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∞–º–±–∏—Ü–∏–π", 
            "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è",
            "–ö–∞–∂–¥–∞—è —Ç–∞—Ä–µ–ª–∫–∞ - —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è"
        ],
        'transformation': [
            "–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞",
            "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
            "–í–∞—à–µ —Ç–µ–ª–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª—É—á—à–µ–≥–æ —Ç–æ–ø–ª–∏–≤–∞", 
            "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —É–∂–∏–Ω–∞"
        ],
        'community': [
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
            "–í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é",
            "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞",
            "–í–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É —É–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        ]
    }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–û–†–ú–ê–¢
    SYSTEM_PROMPT = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–æ–ª–≥–æ–ª–µ—Ç–∏—é –∏ –Ω–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏—é, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –®–µ—Ñ-–ø–æ–≤–∞—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–∏—à–ª–µ–Ω. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.

–§–ò–õ–û–°–û–§–ò–Ø: 
"–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å"

–°–¢–†–£–ö–¢–£–†–ê –ö–û–ù–¢–ï–ù–¢–ê (20/30/40/10):
1. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–†–Æ–ß–û–ö (20%) - –ª–∏—á–Ω–∞—è –≤—ã–≥–æ–¥–∞, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –ù–ê–£–ß–ù–´–ô –§–ê–ö–¢ (30%) - –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–µ–π—Å—Ç–≤–∏—è
3. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –†–ï–¶–ï–ü–¢ (40%) - —Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
4. –ü–†–ò–ó–´–í –ö –î–ï–ô–°–¢–í–ò–Æ (10%) - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:
- –ù–∞—á–∏–Ω–∞–π —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∂–∏–∑–Ω–∏
- –î–æ–±–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã –¢–ï–ó–ò–°–ù–û
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
- –û–±—ä—è—Å–Ω—è–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º –¢–ï–ó–ò–°–ù–û
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –ø—Ä–∏–∑—ã–≤–æ–º –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–¶–ï–ü–¢–û–í:
- –¢–µ—Ö–Ω–∏–∫–∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –ú–∏—à–ª–µ–Ω, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞
- –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
- –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–æ–π

–¢–û–ù:
- –î—Ä—É–∂–µ—Å–∫–∏–π, –Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞  
- –ù–∞—É—á–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""
    
    # –†–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    REACTIONS = [
        {"emoji": "üòã", "text": "–≤–∫—É—Å–Ω–æ"},
        {"emoji": "üí™", "text": "–ø–æ–ª–µ–∑–Ω–æ"},
        {"emoji": "üë®‚Äçüç≥", "text": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é"},
        {"emoji": "üìù", "text": "–∑–∞–ø–∏—à—É —Å–µ–±–µ"},
        {"emoji": "üìö", "text": "–Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã"}
    ]

    @staticmethod
    def get_emotional_trigger():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        all_triggers = []
        for category in ContentFormatter.EMOTIONAL_TRIGGERS.values():
            all_triggers.extend(category)
        return random.choice(all_triggers)

    @staticmethod
    def format_philosophy_content(title, content, content_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"""
        trigger = ContentFormatter.get_emotional_trigger()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        reactions_line = " | ".join([f"{reaction['emoji']} {reaction['text']}" for reaction in ContentFormatter.REACTIONS])
        
        formatted_content = f"""üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø</b>

{trigger}

{title}

{content}

---
üí´ <b>–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç - –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é</b>

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí @ppsupershef_chat

{reactions_line}

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""
        
        return formatted_content

class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(Config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = Config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(Config.SERVER_TIMEZONE)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def server_to_kemerovo_time(server_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤ –ö–µ–º–µ—Ä–æ–≤–æ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(Config.SERVER_TIMEZONE).date()
            server_dt = datetime.combine(today, datetime.strptime(server_time_str, '%H:%M').time())
            server_dt = Config.SERVER_TIMEZONE.localize(server_dt)
            kemerovo_dt = server_dt.astimezone(Config.KEMEROVO_TIMEZONE)
            return kemerovo_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {server_time_str}: {e}")
            return server_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        server_now = datetime.now(Config.SERVER_TIMEZONE)
        kemerovo_now = datetime.now(Config.KEMEROVO_TIMEZONE)
        
        return {
            'server_time': server_now.strftime('%H:%M:%S'),
            'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
            'server_date': server_now.strftime('%Y-%m-%d'),
            'kemerovo_date': kemerovo_now.strftime('%Y-%m-%d'),
            'server_timezone': str(Config.SERVER_TIMEZONE),
            'kemerovo_timezone': str(Config.KEMEROVO_TIMEZONE)
        }

class TelegramPolls:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ –≤ Telegram"""
    
    def __init__(self, bot_token):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def create_poll(self, chat_id, question, options, is_anonymous=True, allows_multiple_answers=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendPoll"
            payload = {
                'chat_id': chat_id,
                'question': question,
                'options': options,
                'is_anonymous': is_anonymous,
                'allows_multiple_answers': allows_multiple_answers,
                'type': 'regular'
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                SecureLogger.safe_log(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {question}")
                return result['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None

# –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò –ò –ú–ï–¢–†–ò–ö
class ChannelAnalytics:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self, bot_token, channel_id):
        self.bot_token = bot_token
        self.channel_id = channel_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.engagement_data = {}
        self.post_metrics = {}
        
    def get_member_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {
                'chat_id': self.channel_id
            }
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            if result.get('ok'):
                return result['result']
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def track_post_engagement(self, message_id, content_type):
        """–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è engagement –¥–ª—è –ø–æ—Å—Ç–∞"""
        self.post_metrics[message_id] = {
            'content_type': content_type,
            'timestamp': datetime.now(),
            'views': 0,
            'reactions': {},
            'comments': 0,
            'shares': 0,
            'chat_clicks': 0,
            'relevance_score': self._calculate_relevance_score(content_type)
        }
    
    def _calculate_relevance_score(self, content_type):
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ 20/30/40/10"""
        base_scores = {
            'neuro_breakfast': 85,
            'energy_breakfast': 80,
            'longevity_breakfast': 90,
            'gastronomy_breakfast': 75,
            'science_content': 95,
            'expert_advice': 88
        }
        return base_scores.get(content_type, 75)
    
    def update_engagement(self, message_id, metric_type, value=1):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ engagement"""
        if message_id in self.post_metrics:
            if metric_type in self.post_metrics[message_id]:
                self.post_metrics[message_id][metric_type] += value
            else:
                self.post_metrics[message_id][metric_type] = value
    
    def get_engagement_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ engagement"""
        total_posts = len(self.post_metrics)
        if total_posts == 0:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        total_engagement = {
            'reactions': 0,
            'comments': 0,
            'shares': 0,
            'chat_clicks': 0,
            'avg_relevance': 0
        }
        
        for metrics in self.post_metrics.values():
            total_engagement['reactions'] += sum(metrics.get('reactions', {}).values())
            total_engagement['comments'] += metrics.get('comments', 0)
            total_engagement['shares'] += metrics.get('shares', 0)
            total_engagement['chat_clicks'] += metrics.get('chat_clicks', 0)
            total_engagement['avg_relevance'] += metrics.get('relevance_score', 0)
        
        total_engagement['avg_relevance'] = total_engagement['avg_relevance'] / total_posts
        
        return {
            'total_posts': total_posts,
            'engagement_metrics': total_engagement,
            'engagement_rate': (total_engagement['reactions'] + total_engagement['comments']) / total_posts,
            'chat_conversion_rate': total_engagement['chat_clicks'] / total_posts if total_posts > 0 else 0
        }
    
    def generate_public_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        member_count = self.get_member_count()
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        engagement_report = self.get_engagement_report()
        
        report = f"""üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ö–ê–ù–ê–õ–ê @ppsupershef</b>

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{member_count}</b>
üìÖ –î–∞—Ç–∞: {current_time}
üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {TimeZoneConverter.get_current_times()['kemerovo_time']}

üí´ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ:</b>
‚Ä¢ üìà Engagement Rate: {engagement_report['engagement_rate']:.1f}%
‚Ä¢ üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ: {engagement_report['chat_conversion_rate']:.1f}%
‚Ä¢ üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {engagement_report['engagement_metrics']['avg_relevance']:.0f}%

üéØ <b>–ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –ö–õ–£–ë–£ –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø!</b>

#–æ—Ç—á–µ—Ç #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
        
        return report

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.channel = Config.TELEGRAM_CHANNEL
        self.group = Config.TELEGRAM_GROUP
        self.polls_manager = TelegramPolls(self.token)
        self.formatter = ContentFormatter()
        self.sent_posts = set()  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        SecureLogger.safe_log(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª —Å ID: {self.channel}")
    
    def _get_content_hash(self, content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        return hashlib.md5(content.encode()).hexdigest()
    
    def send_to_telegram(self, message, parse_mode='HTML', content_type='general'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            content_hash = self._get_content_hash(message)
            if content_hash in self.sent_posts:
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                message_id = result['result']['message_id']
                # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ engagement
                channel_analytics.track_post_engagement(message_id, content_type)
                self.sent_posts.add(content_hash)
                SecureLogger.safe_log(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel}")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return False
                
        except requests.exceptions.ConnectionError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
            time.sleep(5)
            return self.send_to_telegram(message, parse_mode, content_type)
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.token:
                return {"status": "error", "message": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            return {
                "status": "success", 
                "bot": bot_info['result']['username'],
                "channel_id": self.channel
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def send_poll(self, poll_type='content_preference'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            poll_data = {
                'question': "üéØ –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?",
                'options': ['üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ', 'üí™ –≠–Ω–µ—Ä–≥–∏—è', 'üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ', 'üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è']
            }
            return self.polls_manager.create_poll(self.channel, poll_data['question'], poll_data['options'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = Config.YANDEX_GPT_API_KEY
        self.yandex_folder = Config.YANDEX_FOLDER_ID
        self.formatter = ContentFormatter()
        SecureLogger.safe_log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def generate_with_yandex_gpt(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        try:
            if not self.yandex_key:
                logger.error("‚ùå Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                'Authorization': f'Api-Key {self.yandex_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'modelUri': f'gpt://{self.yandex_folder}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 1500
                },
                'messages': [
                    {
                        'role': 'system',
                        'text': ContentFormatter.SYSTEM_PROMPT
                    },
                    {
                        'role': 'user',
                        'text': prompt
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            result = response.json()
            
            if 'result' in result:
                return result['result']['alternatives'][0]['message']['text']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {result}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Yandex GPT: {str(e)}")
            return None

    # –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö: üß† –ù–ï–ô–†–û–ü–ò–¢–ê–ù–ò–ï
    def generate_neuro_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å —è—Å–Ω–æ—Å—Ç—å—é —É–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –û–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –º–æ–∑–≥–∞  
‚Ä¢ –•–æ–ª–∏–Ω –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ L-—Ç–∏—Ä–æ–∑–∏–Ω –¥–ª—è —Ñ–æ–∫—É—Å–∞

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç –Ω–µ–π—Ä–æ—Ç—Ä–∞–Ω—Å–º–∏—Ç—Ç–µ—Ä—ã
‚Ä¢ –£—Å–∫–æ—Ä—è–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

–í–∫–ª—é—á–∏:
1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
2. –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è 
3. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–¥–æ 15 –º–∏–Ω—É—Ç)
4. –°–æ–≤–µ—Ç—ã –ø–æ —É—Å–∏–ª–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê", content, "neuro_breakfast")
        
        fallback = """ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–æ–º—Ç–∏–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - –æ–º–µ–≥–∞-9 –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –®–ø–∏–Ω–∞—Ç - –ª—é—Ç–µ–∏–Ω –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π  
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –º–æ–∑–≥–∞
‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è

üéØ –ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å —è—Å–Ω–æ—Å—Ç—å—é —É–º–∞ - –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —ç—Ç–æ—Ç –∑–∞–≤—Ç—Ä–∞–∫ —Å–µ–≥–æ–¥–Ω—è!"""
        return self.formatter.format_philosophy_content("üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê", fallback, "neuro_breakfast")

    # –í–¢–û–†–ù–ò–ö: üí™ –≠–ù–ï–†–ì–ò–Ø –ò –¢–û–ù–£–°
    def generate_energy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–∂–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ - –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ü—Ä–æ—Å–Ω–∏—Å—å —Å —ç–Ω–µ—Ä–≥–∏–µ–π, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ö–æ—ç–Ω–∑–∏–º Q10 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –ú–∞–≥–Ω–∏–π –¥–ª—è –ê–¢–§ —Å–∏–Ω—Ç–µ–∑–∞
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
‚Ä¢ –ñ–µ–ª–µ–∑–æ –¥–ª—è –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏
‚Ä¢ –£—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ê–¢–§
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∫–∏—Å–ª–æ—Ä–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º

–§–æ–∫—É—Å –Ω–∞:
- –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ (–¥–æ 10 –º–∏–Ω—É—Ç)
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±—ã—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
- –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", content, "energy_breakfast")
        
        fallback = """ü•£ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —Å–µ–º–µ–Ω–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50 –≥
‚Ä¢ –ú–∏–Ω–¥–∞–ª—å - 20 –≥
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - ¬Ω —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π –Ω–∞ 5 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –±–∞–Ω–∞–Ω –∏ —Å–µ–º–µ–Ω–∞ —á–∏–∞
3. –ü–æ—Å—ã–ø—å—Ç–µ –º–∏–Ω–¥–∞–ª–µ–º –∏ –∫–æ—Ä–∏—Ü–µ–π

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –û–≤—Å—è–Ω–∫–∞ - –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - –æ–º–µ–≥–∞-3 –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π
‚Ä¢ –ö–æ—Ä–∏—Ü–∞ - —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ
‚Ä¢ –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª—é–∫–æ–∑—É –∫—Ä–æ–≤–∏

üéØ –ó–∞—Ä—è–¥–∏—Ç–µ—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!"""
        return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", fallback, "energy_breakfast")

    # –°–†–ï–î–ê: üõ°Ô∏è –î–û–õ–ì–û–õ–ï–¢–ò–ï
    def generate_longevity_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –≥–æ–¥—ã –∫ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏"

–ì–µ—Ä–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –†–µ—Å–≤–µ—Ä–∞—Ç—Ä–æ–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Ä—Ç—É–∏–Ω–æ–≤
‚Ä¢ –ö—É—Ä–∫—É–º–∏–Ω –ø—Ä–æ—Ç–∏–≤ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã –¥–ª—è –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–æ–π –∑–∞—â–∏—Ç—ã
‚Ä¢ –°–ø–µ—Ä–º–∏–¥–∏–Ω –¥–ª—è –∞—É—Ç–æ—Ñ–∞–≥–∏–∏

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω–æ–µ —Å—Ç–∞—Ä–µ–Ω–∏–µ
‚Ä¢ –£—Å–∫–æ—Ä—è–µ—Ç –∞—É—Ç–æ—Ñ–∞–≥–∏—é
‚Ä¢ –ë–æ—Ä–µ—Ç—Å—è —Å –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ–º

–ê–∫—Ü–µ–Ω—Ç –Ω–∞:
- –ü—Ä–æ–¥—É–∫—Ç—ã, –¥–æ–∫–∞–∑–∞–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ–º
- –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ –¥–æ—Ä–æ–≥–∏—Ö —Å—É–ø–µ—Ä—Ñ—É–¥–æ–≤"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", content, "longevity_breakfast")
        
        fallback = """ü•£ –ö–∞—à–∞ —Å –∫—É—Ä–∫—É–º–æ–π –∏ —è–≥–æ–¥–∞–º–∏

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 50 –≥
‚Ä¢ –ö—É—Ä–∫—É–º–∞ - 1 —á.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 100 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–Ω–µ–≤—É—é –∫–∞—à—É
2. –î–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∫—É–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —è–≥–æ–¥–∞–º–∏, –æ—Ä–µ—Ö–∞–º–∏ –∏ –ª—å–Ω—è–Ω—ã–º –º–∞—Å–ª–æ–º

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ö—É—Ä–∫—É–º–∞ - –∫—É—Ä–∫—É–º–∏–Ω –ø—Ä–æ—Ç–∏–≤ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è
‚Ä¢ –Ø–≥–æ–¥—ã - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã –ø—Ä–æ—Ç–∏–≤ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ - –æ–º–µ–≥–∞-3 –¥–ª—è –º–µ–º–±—Ä–∞–Ω

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ damage
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é

üéØ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ —Å –∫–∞–∂–¥—ã–º –∑–∞–≤—Ç—Ä–∞–∫–æ–º!"""
        return self.formatter.format_philosophy_content("üõ°Ô∏è –ó–ê–í–¢–†–ê–ö –î–û–õ–ì–û–ñ–ò–¢–ï–õ–Ø", fallback, "longevity_breakfast")

    # –ß–ï–¢–í–ï–†–ì: üçΩÔ∏è –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –ù–ê–°–õ–ê–ñ–î–ï–ù–ò–ï
    def generate_gastronomy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –ø–æ–ª–µ–∑–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è –º–æ–ª–æ–¥–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚Ä¢ –ü—Ä–æ–±–∏–æ—Ç–∏–∫–∏ –¥–ª—è –º–∏–∫—Ä–æ–±–∏–æ–º–∞
‚Ä¢ –§–ª–∞–≤–æ–Ω–æ–∏–¥—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–æ—Å—É–¥–æ–≤

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –º–∏–∫—Ä–æ–±–∏–æ–º –∫–∏—à–µ—á–Ω–∏–∫–∞
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ
‚Ä¢ –£–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ—Å—É–¥–∏—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

–§–æ–∫—É—Å –Ω–∞:
- –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–µ–º—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞
- –ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ –ø–æ–ª—å–∑—ã
- –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ 20 –º–∏–Ω—É—Ç
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±—ã—á–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", content, "gastronomy_breakfast")
        
        fallback = """üç≥ –ì—Ä–µ–Ω–∫–∏ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —è–π—Ü–æ–º-–ø–∞—à–æ—Ç

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π - 2 –ª–æ–º—Ç–∏–∫–∞
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 1 —à—Ç
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –†—É–∫–∫–æ–ª–∞ - 30 –≥
‚Ä¢ –°–µ–º–µ–Ω–∞ –∫—É–Ω–∂—É—Ç–∞ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –ü–æ–¥—Å—É—à–∏—Ç–µ —Ö–ª–µ–± –Ω–∞ —Å—É—Ö–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ
2. –†–∞–∑–æ–º–Ω–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ —Å —Å–æ–ª—å—é
3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —è–π—Ü–∞-–ø–∞—à–æ—Ç (3 –º–∏–Ω—É—Ç—ã –≤ –∫–∏–ø—è—â–µ–π –≤–æ–¥–µ)
4. –°–æ–±–µ—Ä–∏—Ç–µ: —Ö–ª–µ–± + –∞–≤–æ–∫–∞–¥–æ + —Ä—É–∫–∫–æ–ª–∞ + —è–π—Ü–æ

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - –º–æ–Ω–æ–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã
‚Ä¢ –Ø–π—Ü–∞ - —Ö–æ–ª–∏–Ω –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ –†—É–∫–∫–æ–ª–∞ - –≥–ª—é–∫–æ–∑–∏–Ω–æ–ª–∞—Ç—ã –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –ª–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –°—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–µ—Ç–æ–∫—Å –ø—Ä–æ—Ü–µ—Å—Å—ã

üéØ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–º —É–∫—É—Å–æ–º - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ!"""
        return self.formatter.format_philosophy_content("üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", fallback, "gastronomy_breakfast")

    # –ü–Ø–¢–ù–ò–¶–ê: üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –ü–õ–ê–ù–´
    def generate_analytical_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ó–∞–≤—Ç—Ä–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–ø—ã—Ç –Ω–µ–¥–µ–ª–∏ –≤ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –¢–∏—Ä–æ–∑–∏–Ω –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è
‚Ä¢ –û–º–µ–≥–∞-3 –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –ì–ª—é–∫–æ–∑–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –º–æ–∑–≥–∞
‚Ä¢ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –ø—Ä–µ—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ—Ä—É
‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –∫–æ—Ä—Ç–∏–∑–æ–ª
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–π—Ä–æ—Ç—Ä–∞–Ω—Å–º–∏—Ç—Ç–µ—Ä—ã

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –°–≤—è–∑—å –ø–∏—Ç–∞–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã—Ö–æ–¥–Ω—ã–º –±–µ–∑ —Å—Ä—ã–≤–æ–≤"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", content, "analytical_breakfast")
        
        fallback = """ü•£ –¢–≤–æ—Ä–æ–∂–Ω–∞—è –º–∞—Å—Å–∞ —Å –æ—Ä–µ—Ö–∞–º–∏ –∏ –º–µ–¥–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5% - 150 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 30 –≥
‚Ä¢ –ú–µ–¥ - 1 —Å—Ç.–ª.
‚Ä¢ –ò–∑—é–º - 20 –≥
‚Ä¢ –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–º–µ—à–∞–π—Ç–µ —Ç–≤–æ—Ä–æ–≥ —Å –º–µ–¥–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º
2. –î–æ–±–∞–≤—å—Ç–µ –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–µ –æ—Ä–µ—Ö–∏ –∏ –∏–∑—é–º
3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–º–∏ —Ö–ª–µ–±—Ü–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ - —Ç–∏—Ä–æ–∑–∏–Ω –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –ú–µ–¥ - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –≥–ª—é–∫–æ–∑–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —É–º—Å—Ç–≤–µ–Ω–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å

üéØ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—É—é –Ω–µ–¥–µ–ª—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≤—Ç—Ä–∞–∫–æ–º!"""
        return self.formatter.format_philosophy_content("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–í–¢–†–ê–ö", fallback, "analytical_breakfast")

    # –°–£–ë–ë–û–¢–ê: üõí –£–ú–ù–´–ï –ü–û–ö–£–ü–ö–ò + –†–ï–¶–ï–ü–¢–´
    def generate_smart_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
        season = self._get_current_season()
        
        shopping_list = f"""üõí <b>–£–ú–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ù–ê –ù–ï–î–ï–õ–Æ</b>

–û—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è + —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ({season})

üß† <b>–î–õ–Ø –ú–û–ó–ì–ê –ò –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´:</b>
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 200 –≥
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - 3-4 —à—Ç
‚Ä¢ –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ (–ª–æ—Å–æ—Å—å, —Å–∫—É–º–±—Ä–∏—è) - 500 –≥
‚Ä¢ –Ø–π—Ü–∞ - 10 —à—Ç
‚Ä¢ –¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ 85% - 100 –≥

üí™ <b>–î–õ–Ø –≠–ù–ï–†–ì–ò–ò –ò –¢–û–ù–£–°–ê:</b>
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 500 –≥
‚Ä¢ –ë–∞–Ω–∞–Ω—ã - 1 –∫–≥
‚Ä¢ –°–µ–º–µ–Ω–∞ —á–∏–∞ - 100 –≥
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 1 –∫–≥
‚Ä¢ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞ - 500 –≥

üõ°Ô∏è <b>–î–õ–Ø –î–û–õ–ì–û–õ–ï–¢–ò–Ø:</b>
‚Ä¢ –ö—É—Ä–∫—É–º–∞ - 50 –≥
‚Ä¢ –ò–º–±–∏—Ä—å - 100 –≥
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 3 –≥–æ–ª–æ–≤–∫–∏
‚Ä¢ –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 500 –≥
‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ –æ–≤–æ—â–∏ - 1 –∫–≥

üçΩÔ∏è <b>–î–õ–Ø –ì–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ù–ê–°–õ–ê–ñ–î–ï–ù–ò–Ø:</b>
‚Ä¢ –°–ø–µ—Ü–∏–∏ (–∫–æ—Ä–∏—Ü–∞, –∫–∞—Ä–¥–∞–º–æ–Ω, –º—É—Å–∫–∞—Ç)
‚Ä¢ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–µ–¥ - 300 –≥
‚Ä¢ –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ - 400 –º–ª
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 500 –º–ª

üí° <b>–°–û–í–ï–¢–´ –û–¢ –®–ï–§-–ü–û–í–ê–†–ê:</b>
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤—ã - –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –æ—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ

üéØ <b>–§–ò–õ–û–°–û–§–ò–Ø –ü–û–ö–£–ü–û–ö:</b>
–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!

#—á–µ–∫–ª–∏—Å—Ç #—É–º–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏ #{season}"""
        
        return shopping_list

    def _get_current_season(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"

    # –í–û–°–ö–†–ï–°–ï–ù–¨–ï: üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê + –†–ï–¶–ï–ü–¢–´
    def generate_sunday_brunch(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±—Ä–∞–Ω—á–∞"""
        prompt = """–°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –±—Ä–∞–Ω—á–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∏—Ç—É–∞–ª–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á - —Ç–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –Ω–µ–¥–µ–ª–∏"

–ù–∞—É—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –ë–µ–ª–∫–∏ –¥–ª—è —Å—ã—Ç–æ—Å—Ç–∏ –∏ –º—ã—à—Ü
‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–µ –∂–∏—Ä—ã –¥–ª—è –≥–æ—Ä–º–æ–Ω–æ–≤
‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –¥–µ—Ç–æ–∫—Å–∞

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã

–≠–ª–µ–º–µ–Ω—Ç—ã —Ä–∏—Ç—É–∞–ª–∞:
- –ë–ª—é–¥–∞, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
- –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
- –¢–µ—Ö–Ω–∏–∫–∏, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ", content, "sunday_brunch")
        
        fallback = """ü•û –ü–∞–Ω–∫–µ–π–∫–∏ –∏–∑ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π –º—É–∫–∏ —Å —è–≥–æ–¥–Ω—ã–º —Å–æ—É—Å–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è - 150 –≥
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ö–µ—Ñ–∏—Ä - 200 –º–ª
‚Ä¢ –†–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å - 1 —á.–ª.
‚Ä¢ –Ø–≥–æ–¥—ã (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ) - 200 –≥
‚Ä¢ –ú–µ–¥ - 2 —Å—Ç.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–º–µ—à–∞–π—Ç–µ —Å—É—Ö–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
2. –î–æ–±–∞–≤—å—Ç–µ —è–π—Ü–∞ –∏ –∫–µ—Ñ–∏—Ä, –∑–∞–º–µ—Å–∏—Ç–µ —Ç–µ—Å—Ç–æ
3. –ñ–∞—Ä—å—Ç–µ –Ω–∞ –∞–Ω—Ç–∏–ø—Ä–∏–≥–∞—Ä–Ω–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ –ø–æ 2-3 –º–∏–Ω—É—Ç—ã —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
4. –î–ª—è —Å–æ—É—Å–∞ —Ä–∞–∑–æ–≥—Ä–µ–π—Ç–µ —è–≥–æ–¥—ã —Å –º–µ–¥–æ–º

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è –º—É–∫–∞ - –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –¥–ª—è –º–∏–∫—Ä–æ–±–∏–æ–º–∞
‚Ä¢ –Ø–π—Ü–∞ - —Ö–æ–ª–∏–Ω –¥–ª—è –Ω–µ–π—Ä–æ—Ç—Ä–∞–Ω—Å–º–∏—Ç—Ç–µ—Ä–æ–≤
‚Ä¢ –Ø–≥–æ–¥—ã - –ø–æ–ª–∏—Ñ–µ–Ω–æ–ª—ã –¥–ª—è —Å–æ—Å—É–¥–æ–≤

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

üéØ –°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±—Ä–∞–Ω—á–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –Ω–µ–¥–µ–ª–∏!"""
        return self.formatter.format_philosophy_content("üç≥ –í–û–°–ö–†–ï–°–ù–´–ô –ë–†–ê–ù–ß-–†–ò–¢–£–ê–õ", fallback, "sunday_brunch")

    # –ù–ê–£–ß–ù–´–ô –ö–û–ù–¢–ï–ù–¢
    def generate_science_content(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompt = """–ü—Ä–µ–¥—Å—Ç–∞–≤—å –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –∂–µ.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ù–∞—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ç–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –µ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ–ª—å–∫–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û
- –û–ø–æ—Ä–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –ù–∞—É—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ/—Ñ–∞–∫—Ç
2. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ –¢–ï–ó–ò–°–ù–û
3. –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ –ø–∏—Ç–∞–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è
4. –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç
5. –ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üî¨ –ù–ê–£–ö–ê –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø", content, "science_content")
        
        fallback = """üèÜ –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç: –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞—É—Ç–æ—Ñ–∞–≥–∏—é

–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ: –ê—É—Ç–æ—Ñ–∞–≥–∏—è - –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—â–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ—Ç–∫—Ä—ã—Ç—ã–π —è–ø–æ–Ω—Å–∫–∏–º —É—á–µ–Ω—ã–º –Å—Å–∏–Ω–æ—Ä–∏ –û—Å—É–º–∏ (–ù–æ–±–µ–ª–µ–≤—Å–∫–∞—è –ø—Ä–µ–º–∏—è 2016).

üí° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–µ–Ω—ã –æ—á–∏—â–µ–Ω–∏—è
‚Ä¢ –£–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –±–µ–ª–∫–∏
‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–∫–æ–Ω—á–∏—Ç—å —É–∂–∏–Ω –≤ 20:00 –∏ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –≤ 12:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è, —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üéØ –ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏: –ù–∞—á–Ω–∏—Ç–µ —Å 12-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–æ 16 —á–∞—Å–æ–≤."""
        return self.formatter.format_philosophy_content("üî¨ –ù–ê–£–ö–ê –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø", fallback, "science_content")

    # –°–û–í–ï–¢–´ –≠–ö–°–ü–ï–†–¢–û–í
    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        prompt = """–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–∏–Ω—Ü–∏–ø –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: "–ü—Ä–∏–Ω—Ü–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–¥—É –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞"

–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ

–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ö–∞–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º
‚Ä¢ –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–º–∞
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞
2. –ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞—É–∫–∞ –¢–ï–ó–ò–°–ù–û)
3. –ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
4. –ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–µ—Ç
5. –ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        
        content = self.generate_with_yandex_gpt(prompt)
        if content:
            return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", content, "expert_advice")
        
        fallback = """üéØ –ü—Ä–∏–Ω—Ü–∏–ø: "–ï—à—å—Ç–µ —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏"

–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏ - –∫—Ä–∞—Å–Ω—ã–µ, –æ—Ä–∞–Ω–∂–µ–≤—ã–µ, –∂–µ–ª—Ç—ã–µ, –∑–µ–ª–µ–Ω—ã–µ, —Å–∏–Ω–∏–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ.

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ - –ª–∏–∫–æ–ø–∏–Ω –ø—Ä–æ—Ç–∏–≤ —Ä–∞–∫–∞
‚Ä¢ –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω –¥–ª—è –∑—Ä–µ–Ω–∏—è  
‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ - –ª—é—Ç–µ–∏–Ω –¥–ª—è –º–æ–∑–≥–∞
‚Ä¢ –°–∏–Ω–∏–µ - –∞–Ω—Ç–æ—Ü–∏–∞–Ω—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –¢–ï–ó–ò–°–ù–û:
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ–∏—Ç–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
‚Ä¢ –£–∫—Ä–µ–ø–ª—è–µ—Ç –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—É—é –∑–∞—â–∏—Ç–∞
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ–±–∏–æ–º

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –æ–±–µ–¥ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º - —Å–∞–ª–∞—Ç –∏–∑ –ø–æ–º–∏–¥–æ—Ä–æ–≤, –º–æ—Ä–∫–æ–≤–∏, –ø–µ—Ä—Ü–∞, –æ–≥—É—Ä—Ü–æ–≤ –∏ –∫–∞–ø—É—Å—Ç—ã.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

üéØ –ü—Ä–æ—Å—Ç–æ–π —à–∞–≥: –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏."""
        return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", fallback, "expert_advice")

# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê
class ContentScheduler:
    def __init__(self):
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –≤ –≤—Ä–µ–º–µ–Ω–∏ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)
        self.kemerovo_schedule = {
            'monday': {
                "08:00": {"type": "neuro_breakfast", "name": "üß† –ù–µ–π—Ä–æ–∑–∞–≤—Ç—Ä–∞–∫ + –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç", "generator": "generate_neuro_breakfast"},
                "13:00": {"type": "energy_lunch", "name": "üí™ –≠–Ω–µ—Ä–≥–æ-–æ–±–µ–¥ —Å –ª–∞–π—Ñ—Ö–∞–∫–æ–º", "generator": "generate_energy_breakfast"}, 
                "19:00": {"type": "longevity_dinner", "name": "üåô –£–∂–∏–Ω –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è + –∏–Ω—Å–∞–π—Ç", "generator": "generate_longevity_breakfast"},
                "21:00": {"type": "science_content", "name": "üî¨ –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–æ–∑–≥–µ", "generator": "generate_science_content"}
            },
            'tuesday': {
                "08:00": {"type": "energy_breakfast", "name": "‚ö° –≠–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫ + –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "generator": "generate_energy_breakfast"},
                "13:00": {"type": "focus_lunch", "name": "üéØ –û–±–µ–¥ –¥–ª—è —Ñ–æ–∫—É—Å–∞ + –±–∏–æ—Ö–∞–∫–∏–Ω–≥", "generator": "generate_energy_breakfast"},
                "18:00": {"type": "gastronomy_dinner", "name": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π —É–∂–∏–Ω –¥–æ–º–∞", "generator": "generate_gastronomy_breakfast"},
                "20:00": {"type": "expert_advice", "name": "üí° –ü—Ä–∏–Ω—Ü–∏–ø –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è", "generator": "generate_expert_advice"}
            },
            'wednesday': {
                "08:00": {"type": "longevity_breakfast", "name": "üõ°Ô∏è –ó–∞–≤—Ç—Ä–∞–∫ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—è + –≥–µ—Ä–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã", "generator": "generate_longevity_breakfast"},
                "13:00": {"type": "anti_age_lunch", "name": "üåø Anti-age –æ–±–µ–¥ + –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "generator": "generate_longevity_breakfast"},
                "19:00": {"type": "cellular_dinner", "name": "üåô –£–∂–∏–Ω –¥–ª—è –∫–ª–µ—Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "generator": "generate_longevity_breakfast"},
                "21:00": {"type": "science_content", "name": "üî¨ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è", "generator": "generate_science_content"}
            },
            'thursday': {
                "08:00": {"type": "gastronomy_breakfast", "name": "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è", "generator": "generate_gastronomy_breakfast"},
                "13:00": {"type": "michelin_lunch", "name": "üçΩÔ∏è –û–±–µ–¥ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –ú–∏—à–ª–µ–Ω", "generator": "generate_gastronomy_breakfast"},
                "18:00": {"type": "gastronomy_dinner", "name": "üåô –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω + –≤–∏–Ω–Ω—ã–µ –ø–∞—Ä—ã", "generator": "generate_gastronomy_breakfast"},
                "20:00": {"type": "expert_advice", "name": "üí° –ò—Å–∫—É—Å—Å—Ç–≤–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è", "generator": "generate_expert_advice"}
            },
            'friday': {
                "08:00": {"type": "analytical_breakfast", "name": "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "generator": "generate_analytical_breakfast"},
                "13:00": {"type": "results_lunch", "name": "üéØ –û–±–µ–¥ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –Ω–µ–¥–µ–ª–∏", "generator": "generate_analytical_breakfast"},
                "19:00": {"type": "planning_dinner", "name": "üåô –£–∂–∏–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤—ã—Ö–æ–¥–Ω—ã–º", "generator": "generate_analytical_breakfast"},
                "21:00": {"type": "expert_advice", "name": "üí° –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é", "generator": "generate_expert_advice"}
            },
            'saturday': {
                "09:00": {"type": "weekend_breakfast", "name": "ü•ó –°—É–±–±–æ—Ç–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è —Å–µ–º—å–∏", "generator": "generate_energy_breakfast"},
                "11:00": {"type": "shopping_list", "name": "üõí –£–º–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é", "generator": "generate_smart_shopping_list"},
                "13:00": {"type": "family_lunch", "name": "üç≤ –°–µ–º–µ–π–Ω—ã–π –æ–±–µ–¥ + –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π", "generator": "generate_gastronomy_breakfast"},
                "17:00": {"type": "weekend_dessert", "name": "üßÅ –°—É–±–±–æ—Ç–Ω–∏–π –¥–µ—Å–µ—Ä—Ç + –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ", "generator": "generate_neuro_dessert"},
                "19:00": {"type": "weekend_dinner", "name": "üåô –í–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫", "generator": "generate_gastronomy_breakfast"}
            },
            'sunday': {
                "10:00": {"type": "sunday_brunch", "name": "üç≥ –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –±—Ä–∞–Ω—á-—Ä–∏—Ç—É–∞–ª", "generator": "generate_sunday_brunch"},
                "13:00": {"type": "sunday_lunch", "name": "ü•ò –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", "generator": "generate_gastronomy_breakfast"},
                "17:00": {"type": "sunday_dessert", "name": "üçÆ –î–µ—Å–µ—Ä—Ç –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏", "generator": "generate_neuro_dessert"},
                "19:00": {"type": "sunday_dinner", "name": "üåô –£–∂–∏–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é", "generator": "generate_analytical_breakfast"},
                "21:00": {"type": "weekly_motivation", "name": "üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é", "generator": "generate_expert_advice"}
            }
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        self.server_schedule = self._convert_schedule_to_server()
        
        self.is_running = False
        SecureLogger.safe_log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")

    def _convert_schedule_to_server(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        server_schedule = {}
        for day, day_schedule in self.kemerovo_schedule.items():
            server_schedule[day] = {}
            for kemerovo_time, event in day_schedule.items():
                server_time = TimeZoneConverter.kemerovo_to_server_time(kemerovo_time)
                server_schedule[day][server_time] = event
                SecureLogger.safe_log(f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {day} - –ö–µ–º–µ—Ä–æ–≤–æ {kemerovo_time} -> –°–µ—Ä–≤–µ—Ä {server_time} - {event['name']}")
        return server_schedule

    def get_schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        return {
            'kemerovo_schedule': self.kemerovo_schedule,
            'server_schedule': self.server_schedule
        }
    
    def get_next_event(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        try:
            current_times = TimeZoneConverter.get_current_times()
            current_kemerovo_time = current_times['kemerovo_time'][:5]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6, –≥–¥–µ 0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            current_weekday = datetime.now(Config.KEMEROVO_TIMEZONE).weekday()
            days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            current_day = days[current_weekday]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            today_schedule = self.kemerovo_schedule.get(current_day, {})
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
            times_today = [t for t in today_schedule.keys() if t > current_kemerovo_time]
            
            if times_today:
                # –ï—Å—Ç—å –ø–æ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è
                next_kemerovo_time = min(times_today)
                next_event = today_schedule[next_kemerovo_time]
                next_server_time = TimeZoneConverter.kemerovo_to_server_time(next_kemerovo_time)
                return next_server_time, next_kemerovo_time, next_event
            else:
                # –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∑–∞–≤—Ç—Ä–∞
                next_weekday = (current_weekday + 1) % 7
                next_day = days[next_weekday]
                next_day_schedule = self.kemerovo_schedule.get(next_day, {})
                
                if next_day_schedule:
                    next_kemerovo_time = min(next_day_schedule.keys())
                    next_event = next_day_schedule[next_kemerovo_time]
                    next_server_time = TimeZoneConverter.kemerovo_to_server_time(next_kemerovo_time)
                    return next_server_time, next_kemerovo_time, next_event
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return "17:00", "17:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "unknown"}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
            return "17:00", "17:00", {"name": "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", "type": "unknown"}
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            return
        
        SecureLogger.safe_log("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for day, day_schedule in self.server_schedule.items():
            for server_time, event in day_schedule.items():
                if 'generator' in event:
                    self._schedule_daily_content(day, server_time, event)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        self._schedule_analytics_reports()
        
        self.is_running = True
        self._run_scheduler()

    def _schedule_daily_content(self, day, server_time, event):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        def job():
            current_times = TimeZoneConverter.get_current_times()
            SecureLogger.safe_log(f"üïí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {event['name']}")
            
            if 'generator' in event:
                method_name = event['generator']
                method = getattr(content_gen, method_name)
                content = method()
            else:
                content = None
            
            if content:
                content_with_time = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
                success = elite_channel.send_to_telegram(content_with_time, content_type=event['type'])
                if success:
                    SecureLogger.safe_log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {event['name']}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏
        allowed_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        if day not in allowed_days:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–µ–Ω—å: {day}")
            return
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
        job_func = getattr(schedule.every(), day)
        job_func.at(server_time).do(job)
        SecureLogger.safe_log(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {day} {server_time} - {event['name']}")

    def _schedule_analytics_reports(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        # –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 09:00 –ø–æ –ö–µ–º–µ—Ä–æ–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        public_report_time = TimeZoneConverter.kemerovo_to_server_time("09:00")
        
        def public_analytics_job():
            SecureLogger.safe_log("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            report = channel_analytics.generate_public_report()
            elite_channel.send_to_telegram(report, content_type='analytics')
        
        schedule.every().day.at(public_report_time).do(public_analytics_job)
        SecureLogger.safe_log(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ {public_report_time}")

    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        def run_scheduler():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)
        
        thread = Thread(target=run_scheduler, daemon=True)
        thread.start()
        SecureLogger.safe_log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    def _get_day_theme(self, weekday):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        themes = {
            0: "üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ - —Ñ–æ–∫—É—Å –Ω–∞ –º–æ–∑–≥ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            1: "üí™ –≠–Ω–µ—Ä–≥–∏—è –∏ —Ç–æ–Ω—É—Å - –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", 
            2: "üõ°Ô∏è –î–æ–ª–≥–æ–ª–µ—Ç–∏–µ - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–π –¥–æ–ª–≥–æ–π –∂–∏–∑–Ω–∏",
            3: "üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ - –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å —Å –ø–æ–ª—å–∑–æ–π",
            4: "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–ª–∞–Ω—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            5: "üõí –£–º–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ + —Ä–µ—Ü–µ–ø—Ç—ã - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ–¥–µ–ª–µ",
            6: "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ + —Ä–∏—Ç—É–∞–ª—ã - –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é"
        }
        return themes.get(weekday, "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
elite_channel = EliteChannel()
content_gen = ContentGenerator()
content_scheduler = ContentScheduler()
channel_analytics = ChannelAnalytics(Config.TELEGRAM_BOT_TOKEN, Config.TELEGRAM_CHANNEL)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    content_scheduler.start_scheduler()
    SecureLogger.safe_log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    current_times = TimeZoneConverter.get_current_times()
    SecureLogger.safe_log(f"üåç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {current_times['server_time']}")
    SecureLogger.safe_log(f"üåç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {current_times['kemerovo_time']}")
    
    member_count = channel_analytics.get_member_count()
    SecureLogger.safe_log(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}")
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
@app.route('/channel-diagnostics')
@rate_limit
def channel_diagnostics():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        diagnostic_results = {
            'status': 'completed',
            'steps': [],
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'bot_status': 'unknown',
            'channel_status': 'unknown',
            'member_count': 0,
            'engagement_metrics': {},
            'errors': [],
            'success': []
        }
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        diagnostic_results['steps'].append("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤...")
        try:
            token_status = safe_debug_tokens()
            diagnostic_results['success'].append("–¢–æ–∫–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            diagnostic_results['bot_status'] = 'token_ok'
        except Exception as e:
            diagnostic_results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
            diagnostic_results['bot_status'] = 'token_error'
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
        diagnostic_results['steps'].append("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞...")
        try:
            bot_test = elite_channel.test_connection()
            if bot_test.get('status') == 'success':
                diagnostic_results['success'].append(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bot_test.get('bot', 'Unknown')}")
                diagnostic_results['bot_status'] = 'active'
            else:
                diagnostic_results['errors'].append(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {bot_test.get('message', 'Unknown error')}")
                diagnostic_results['bot_status'] = 'connection_error'
        except Exception as e:
            diagnostic_results['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {str(e)}")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
        diagnostic_results['steps'].append("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É...")
        try:
            member_count = channel_analytics.get_member_count()
            if member_count > 0:
                diagnostic_results['success'].append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member_count}")
                diagnostic_results['member_count'] = member_count
                diagnostic_results['channel_status'] = 'accessible'
            else:
                diagnostic_results['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞")
                diagnostic_results['channel_status'] = 'access_error'
        except Exception as e:
            diagnostic_results['errors'].append(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)}")
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        diagnostic_results['steps'].append("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        if content_scheduler.is_running:
            diagnostic_results['success'].append("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            diagnostic_results['errors'].append("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        
        # –®–∞–≥ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ engagement
        diagnostic_results['steps'].append("üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ engagement...")
        try:
            engagement_report = channel_analytics.get_engagement_report()
            diagnostic_results['engagement_metrics'] = engagement_report
            diagnostic_results['success'].append("–ú–µ—Ç—Ä–∏–∫–∏ engagement —Å–æ–±—Ä–∞–Ω—ã")
        except Exception as e:
            diagnostic_results['errors'].append(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {str(e)}")
        
        return jsonify(diagnostic_results)
        
    except Exception as e:
        return jsonify({
            'status': 'error', 
            'message': f'–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}'
        })

@app.route('/fix-bot-token', methods=['POST'])
@require_api_key
@rate_limit
def fix_bot_token():
    """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        data = request.get_json()
        new_token = data.get('token', '').strip()
        
        if not new_token:
            return jsonify({'status': 'error', 'message': '–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω'})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        elite_channel.token = new_token
        channel_analytics.bot_token = new_token
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        test_result = elite_channel.test_connection()
        
        if test_result.get('status') == 'success':
            return jsonify({
                'status': 'success', 
                'message': '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!'
            })
        else:
            return jsonify({
                'status': 'error', 
                'message': f'–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {test_result.get("message")}'
            })
            
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

# –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ FLASK
@app.route('/')
@rate_limit
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    try:
        next_server_time, next_kemerovo_time, next_event = content_scheduler.get_next_event()
        connection_info = elite_channel.test_connection()
        current_times = TimeZoneConverter.get_current_times()
        member_count = channel_analytics.get_member_count()
        engagement_report = channel_analytics.get_engagement_report()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        current_weekday = datetime.now(Config.KEMEROVO_TIMEZONE).weekday()
        current_day_name = weekday_names[current_weekday]
        
        html = f"""
        <html>
            <head>
                <title>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
                    .container {{ max-width: 1200px; margin: 0 auto; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
                    .stats-card {{ background: #3498db; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .engagement-card {{ background: #9b59b6; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .time-info {{ background: #27ae60; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; border: none; cursor: pointer; }}
                    .btn-danger {{ background: #e74c3c; }}
                    .btn-success {{ background: #27ae60; }}
                    .btn-warning {{ background: #f39c12; }}
                    .content-section {{ background: white; padding: 20px; border-radius: 10px; margin: 20px 0; }}
                    .quick-actions {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 20px 0; }}
                    .content-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin: 20px 0; }}
                    .form-group {{ margin: 10px 0; }}
                    input, textarea, select {{ width: 100%; padding: 10px; margin: 5px 0; border: 1px solid #ddd; border-radius: 5px; }}
                    .day-info {{ background: #e67e22; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .metric-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 20px 0; }}
                    .metric-card {{ background: white; padding: 15px; border-radius: 5px; border-left: 4px solid #3498db; }}
                    
                    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
                    .modal {{
                        display: none;
                        position: fixed;
                        z-index: 1000;
                        left: 0;
                        top: 0;
                        width: 100%;
                        height: 100%;
                        background-color: rgba(0,0,0,0.5);
                    }}
                    .modal-content {{
                        background-color: white;
                        margin: 5% auto;
                        padding: 20px;
                        border-radius: 10px;
                        width: 80%;
                        max-width: 800px;
                        max-height: 80vh;
                        overflow-y: auto;
                    }}
                    .close {{
                        color: #aaa;
                        float: right;
                        font-size: 28px;
                        font-weight: bold;
                        cursor: pointer;
                    }}
                    .close:hover {{
                        color: black;
                    }}
                    .diagnostics-loading {{
                        text-align: center;
                        padding: 20px;
                    }}
                    .spinner {{
                        border: 4px solid #f3f3f3;
                        border-top: 4px solid #3498db;
                        border-radius: 50%;
                        width: 40px;
                        height: 40px;
                        animation: spin 2s linear infinite;
                        margin: 20px auto;
                    }}
                    @keyframes spin {{
                        0% {{ transform: rotate(0deg); }}
                        100% {{ transform: rotate(360deg); }}
                    }}
                    .diagnostics-steps ul, 
                    .diagnostics-success ul, 
                    .diagnostics-errors ul {{
                        margin-left: 20px;
                    }}
                    .diagnostics-header {{
                        border-bottom: 2px solid #3498db;
                        padding-bottom: 10px;
                        margin-bottom: 20px;
                    }}
                    .modal-actions {{
                        margin-top: 20px;
                        text-align: right;
                        border-top: 1px solid #ddd;
                        padding-top: 15px;
                    }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üé™ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                        <p>–§–ò–õ–û–°–û–§–ò–Ø: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é, –¥–æ–ª–≥—É—é –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –∂–∏–∑–Ω—å</p>
                    </div>
                    
                    <div class="day-info">
                        <h2>üìÖ –°–µ–≥–æ–¥–Ω—è: {current_day_name}</h2>
                        <p>–¢–µ–º–∞ –¥–Ω—è: {content_scheduler._get_day_theme(current_weekday)}</p>
                    </div>
                    
                    <div class="quick-actions">
                        <button class="btn" onclick="testChannel()">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
                        <button class="btn" onclick="testConnection()">–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞</button>
                        <button class="btn" onclick="runChannelDiagnostics()">ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</button>
                        <button class="btn" onclick="showDebug()">–û—Ç–ª–∞–¥–∫–∞</button>
                        <button class="btn" onclick="healthCheck()">Health Check</button>
                        <button class="btn" onclick="showFormatPreview()">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞</button>
                        <button class="btn" onclick="sendPoll()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å</button>
                        <button class="btn" onclick="sendVisualContent()">–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</button>
                        <button class="btn" onclick="sendShoppingList()">–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫</button>
                        <button class="btn btn-success" onclick="sendPublicReport()">üì® –û—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</button>
                    </div>
                    
                    <div class="content-section">
                        <h2>üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
                        <div class="content-grid">
                            <button class="btn" onclick="sendContent('breakfast')">üç≥ –ó–∞–≤—Ç—Ä–∞–∫</button>
                            <button class="btn" onclick="sendContent('lunch')">üç≤ –û–±–µ–¥</button>
                            <button class="btn" onclick="sendContent('science')">üî¨ –ù–∞—É–∫–∞</button>
                            <button class="btn" onclick="sendContent('interval')">‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª</button>
                            <button class="btn" onclick="sendContent('dinner')">üçΩÔ∏è –£–∂–∏–Ω</button>
                            <button class="btn" onclick="sendContent('advice')">üí° –°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</button>
                        </div>
                        
                        <div class="form-group">
                            <h3>‚úçÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                            <textarea id="manualContent" rows="6" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram..."></textarea>
                            <button class="btn btn-success" onclick="sendManualContent()">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª</button>
                        </div>
                    </div>
                    
                    <div class="stats-card">
                        <h2>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</h2>
                        <p><strong>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}</strong></p>
                        <p><strong>üìà –ö–æ–Ω—Ç–µ–Ω—Ç: 28 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è</strong></p>
                        <p><strong>üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ</strong></p>
                    </div>
                    
                    <div class="engagement-card">
                        <h2>üìà MET–†–ò–ö–ò ENGAGEMENT</h2>
                        <div class="metric-grid">
                            <div class="metric-card">
                                <h3>üéØ Engagement Rate</h3>
                                <p><strong>{engagement_report.get('engagement_rate', 0):.1f}%</strong></p>
                            </div>
                            <div class="metric-card">
                                <h3>üí¨ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —á–∞—Ç</h3>
                                <p><strong>{engagement_report.get('chat_conversion_rate', 0):.1f}%</strong></p>
                            </div>
                            <div class="metric-card">
                                <h3>‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å</h3>
                                <p><strong>{engagement_report['engagement_metrics'].get('avg_relevance', 0):.0f}/100</strong></p>
                            </div>
                            <div class="metric-card">
                                <h3>üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤</h3>
                                <p><strong>{engagement_report.get('total_posts', 0)}</strong></p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="time-info">
                        <h3>üåç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–†–ï–ú–ï–ù–ò</h3>
                        <p>–°–µ—Ä–≤–µ—Ä: <strong>{current_times['server_time']}</strong> ‚Ä¢ –ö–µ–º–µ—Ä–æ–≤–æ: <strong>{current_times['kemerovo_time']}</strong></p>
                        <p>–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: <strong>{next_kemerovo_time} - {next_event['name']}</strong></p>
                    </div>
                </div>

                <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ -->
                <div id="diagnosticsModal" class="modal">
                    <div class="modal-content">
                        <span class="close" onclick="closeDiagnostics()">&times;</span>
                        <h2>ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h2>
                        <div id="diagnosticsResults">
                            <div class="diagnostics-loading">
                                <p>–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...</p>
                                <div class="spinner"></div>
                            </div>
                        </div>
                        
                        <div id="tokenFixSection" style="display: none; margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                            <h3>üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞</h3>
                            <p>–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ @BotFather –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:</p>
                            <input type="text" id="newBotToken" placeholder="–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞" style="width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;">
                            <button class="btn btn-success" onclick="updateBotToken()">–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω</button>
                        </div>
                        
                        <div class="modal-actions">
                            <button class="btn" onclick="closeDiagnostics()">–ó–∞–∫—Ä—ã—Ç—å</button>
                            <button class="btn btn-warning" onclick="runChannelDiagnostics()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</button>
                        </div>
                    </div>
                </div>

                <script>
                    function testConnection() {{
                        fetch('/test-channel')
                            .then(response => response.json())
                            .then(data => alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function healthCheck() {{
                        fetch('/health')
                            .then(response => response.json())
                            .then(data => alert('–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ' + (data.status === 'healthy' ? '‚úÖ –ó–¥–æ—Ä–æ–≤–∞' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã')));
                    }}

                    function showDebug() {{
                        fetch('/debug')
                            .then(response => response.json())
                            .then(data => alert('–û—Ç–ª–∞–¥–∫–∞: ' + JSON.stringify(data, null, 2)));
                    }}

                    function testChannel() {{
                        fetch('/test-channel')
                            .then(response => response.json())
                            .then(data => alert('–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendPublicReport() {{
                        fetch('/send-public-report')
                            .then(response => response.json())
                            .then(data => alert('–û—Ç—á–µ—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendPoll() {{
                        fetch('/send-poll')
                            .then(response => response.json())
                            .then(data => alert('–û–ø—Ä–æ—Å: ' + (data.status === 'success' ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendVisualContent() {{
                        fetch('/send-visual-content')
                            .then(response => response.json())
                            .then(data => alert('–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function sendShoppingList() {{
                        fetch('/send-shopping-list')
                            .then(response => response.json())
                            .then(data => alert('–ß–µ–∫-–ª–∏—Å—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')));
                    }}

                    function showFormatPreview() {{
                        fetch('/format-preview')
                            .then(response => response.json())
                            .then(data => {{
                                if (data.status === 'success') {{
                                    alert('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª');
                                }} else {{
                                    alert('–û—à–∏–±–∫–∞: ' + data.message);
                                }}
                            }});
                    }}

                    function sendContent(type) {{
                        const endpoints = {{
                            'breakfast': '/send-breakfast',
                            'lunch': '/send-lunch', 
                            'science': '/send-science',
                            'interval': '/send-interval',
                            'dinner': '/send-dinner',
                            'advice': '/send-advice'
                        }};

                        if (endpoints[type]) {{
                            fetch(endpoints[type])
                                .then(response => response.json())
                                .then(data => alert('–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')));
                        }}
                    }}

                    function sendManualContent() {{
                        const content = document.getElementById('manualContent').value;
                        if (!content) {{
                            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
                            return;
                        }}

                        fetch('/send-manual-content', {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json',
                            }},
                            body: JSON.stringify({{ content: content }})
                        }})
                        .then(response => response.json())
                        .then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª');
                                document.getElementById('manualContent').value = '';
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                            }}
                        }});
                    }}

                    function runChannelDiagnostics() {{
                        document.getElementById('diagnosticsModal').style.display = 'block';
                        document.getElementById('diagnosticsResults').innerHTML = `
                            <div class="diagnostics-loading">
                                <p>–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...</p>
                                <div class="spinner"></div>
                            </div>
                        `;
                        
                        fetch('/channel-diagnostics')
                            .then(response => response.json())
                            .then(data => {{
                                let resultsHtml = '';
                                
                                if (data.status === 'completed') {{
                                    resultsHtml = `
                                        <div class="diagnostics-header">
                                            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h3>
                                            <p><small>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${data.timestamp}</small></p>
                                        </div>
                                        
                                        <div class="diagnostics-steps">
                                            <h4>üìã –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
                                            <ul>
                                                ${data.steps.map(step => `<li>${step}</li>`).join('')}
                                            </ul>
                                        </div>
                                        
                                        <div class="diagnostics-success" style="color: #27ae60; margin: 15px 0;">
                                            <h4>‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
                                            <ul>
                                                ${data.success.map(item => `<li>${item}</li>`).join('')}
                                            </ul>
                                        </div>
                                    `;
                                    
                                    if (data.errors && data.errors.length > 0) {{
                                        resultsHtml += `
                                            <div class="diagnostics-errors" style="color: #e74c3c; margin: 15px 0;">
                                                <h4>‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:</h4>
                                                <ul>
                                                    ${data.errors.map(error => `<li>${error}</li>`).join('')}
                                                </ul>
                                            </div>
                                        `;
                                        
                                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –±–æ—Ç–∞
                                        if (data.bot_status === 'token_error' || data.bot_status === 'connection_error') {{
                                            document.getElementById('tokenFixSection').style.display = 'block';
                                        }}
                                    }}
                                    
                                    // –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
                                    resultsHtml += `
                                        <div class="channel-status" style="margin-top: 20px; padding: 15px; background: #ecf0f1; border-radius: 5px;">
                                            <h4>üìà –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞:</h4>
                                            <p><strong>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</strong> ${data.member_count}</p>
                                            <p><strong>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</strong> ${getStatusText(data.bot_status)}</p>
                                            <p><strong>–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É:</strong> ${getStatusText(data.channel_status)}</p>
                                        </div>
                                        
                                        <div class="engagement-metrics" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                                            <h4>üìä –ú–µ—Ç—Ä–∏–∫–∏ Engagement:</h4>
                                            <p><strong>Engagement Rate:</strong> ${data.engagement_metrics.engagement_rate ? data.engagement_metrics.engagement_rate.toFixed(1) + '%' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                                            <p><strong>–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —á–∞—Ç:</strong> ${data.engagement_metrics.chat_conversion_rate ? data.engagement_metrics.chat_conversion_rate.toFixed(1) + '%' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                                            <p><strong>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong> ${data.engagement_metrics.engagement_metrics ? data.engagement_metrics.engagement_metrics.avg_relevance.toFixed(0) + '/100' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                                        </div>
                                    `;
                                    
                                }} else {{
                                    resultsHtml = `<div class="diagnostics-error">‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${data.message}</div>`;
                                }}
                                
                                document.getElementById('diagnosticsResults').innerHTML = resultsHtml;
                            }})
                            .catch(error => {{
                                document.getElementById('diagnosticsResults').innerHTML = `
                                    <div class="diagnostics-error">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error}</div>
                                `;
                            }});
                    }}

                    function getStatusText(status) {{
                        const statusMap = {{
                            'active': '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
                            'token_ok': '‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω',
                            'accessible': '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω',
                            'token_error': '‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞',
                            'connection_error': '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                            'access_error': '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
                            'unknown': '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        }};
                        return statusMap[status] || status;
                    }}

                    function updateBotToken() {{
                        const newToken = document.getElementById('newBotToken').value.trim();
                        
                        if (!newToken) {{
                            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
                            return;
                        }}
                        
                        fetch('/fix-bot-token', {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json',
                            }},
                            body: JSON.stringify({{ token: newToken }})
                        }})
                        .then(response => response.json())
                        .then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
                                document.getElementById('tokenFixSection').style.display = 'none';
                                runChannelDiagnostics(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                            }}
                        }})
                        .catch(error => {{
                            alert('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + error);
                        }});
                    }}

                    function closeDiagnostics() {{
                        document.getElementById('diagnosticsModal').style.display = 'none';
                    }}

                    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
                    window.onclick = function(event) {{
                        const modal = document.getElementById('diagnosticsModal');
                        if (event.target === modal) {{
                            closeDiagnostics();
                        }}
                    }}
                </script>
            </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# –û–°–¢–ê–õ–¨–ù–´–ï –ú–ê–†–®–†–£–¢–´ (—Å –∑–∞—â–∏—Ç–æ–π)
@app.route('/send-public-report')
@rate_limit
def send_public_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        report = channel_analytics.generate_public_report()
        success = elite_channel.send_to_telegram(report, content_type='analytics')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/test-channel')
@rate_limit
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    current_times = TimeZoneConverter.get_current_times()
    test_message = f"""üé™ <b>–¢–ï–°–¢: –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è @ppsupershef —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>

–ù–æ–≤–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:

üß† <b>–ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ</b> - –ø–∏—â–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞
üí™ <b>–≠–Ω–µ—Ä–≥–∏—è</b> - —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π  
üõ°Ô∏è <b>–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ</b> - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–π –∂–∏–∑–Ω–∏
üçΩÔ∏è <b>–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è</b> - –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–π

ü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üéØ <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω:</b> 28 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è
üí´ <b>–§–∏–ª–æ—Å–æ—Ñ–∏—è:</b> –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–ª—É–±—É —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å!

üïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"""
    
    success = elite_channel.send_to_telegram(test_message, content_type='test')
    return jsonify({"status": "success" if success else "error"})

@app.route('/health')
@rate_limit
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    connection = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    member_count = channel_analytics.get_member_count()
    engagement_report = channel_analytics.get_engagement_report()
    
    return jsonify({
        "status": "healthy",
        "philosophy": "üé™ –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è",
        "member_count": member_count,
        "scheduler_running": content_scheduler.is_running,
        "engagement_rate": f"{engagement_report.get('engagement_rate', 0):.1f}%",
        "time_info": current_times
    })

@app.route('/debug')
@rate_limit
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    connection_test = elite_channel.test_connection()
    current_times = TimeZoneConverter.get_current_times()
    member_count = channel_analytics.get_member_count()
    engagement_report = channel_analytics.get_engagement_report()
    
    return jsonify({
        "status": "active",
        "philosophy": "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ",
        "content_plan": "28 –ø–æ—Å—Ç–æ–≤/–Ω–µ–¥–µ–ª—è",
        "member_count": member_count,
        "engagement_rate": f"{engagement_report.get('engagement_rate', 0):.1f}%",
        "scheduler_status": "running" if content_scheduler.is_running else "stopped",
        "time_info": current_times
    })

@app.route('/send-poll')
@rate_limit
def send_poll():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞"""
    try:
        success = elite_channel.send_poll()
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-visual-content')
@rate_limit
def send_visual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        visual_content = """üé® <b>–ò–ù–§–û–ì–†–ê–§–ò–ö–ê: –ü—Ä–∞–≤–∏–ª–æ —Ç–∞—Ä–µ–ª–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è</b>

üçΩÔ∏è <b>–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>

¬Ω –¢–ê–†–ï–õ–ö–ò - –û–í–û–©–ò –ò –ó–ï–õ–ï–ù–¨
‚Ä¢ –ë—Ä–æ–∫–∫–æ–ª–∏, —à–ø–∏–Ω–∞—Ç, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å, –ø–µ—Ä–µ—Ü, –æ–≥—É—Ä—Ü—ã
‚Ä¢ –°–∞–ª–∞—Ç–Ω—ã–µ –ª–∏—Å—Ç—å—è, –∑–µ–ª–µ–Ω—å

¬º –¢–ê–†–ï–õ–ö–ò - –ë–ï–õ–ö–ò  
‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, —Ä—ã–±–∞, —è–π—Ü–∞
‚Ä¢ –¢–æ—Ñ—É, –±–æ–±–æ–≤—ã–µ, –æ—Ä–µ—Ö–∏
‚Ä¢ –¢–≤–æ—Ä–æ–≥, –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç

¬º –¢–ê–†–ï–õ–ö–ò - –°–õ–û–ñ–ù–´–ï –£–ì–õ–ï–í–û–î–´
‚Ä¢ –ì—Ä–µ—á–∫–∞, –∫–∏–Ω–æ–∞, –±—É—Ä—ã–π —Ä–∏—Å
‚Ä¢ –ë–∞—Ç–∞—Ç, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±
‚Ä¢ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è

üí´ <b>–ü–ª—é—Å –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã:</b>
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ, –∞–≤–æ–∫–∞–¥–æ
‚Ä¢ –û—Ä–µ—Ö–∏, —Å–µ–º–µ–Ω–∞

üéØ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è!</b>

#–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ #–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ–ø–∏—Ç–∞–Ω–∏–µ #–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ"""
        
        success = elite_channel.send_to_telegram(visual_content, content_type='visual')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-shopping-list')
@rate_limit
def send_shopping_list():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
    try:
        content = content_gen.generate_smart_shopping_list()
        success = elite_channel.send_to_telegram(content, content_type='shopping')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/format-preview')
@rate_limit
def format_preview():
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        preview_content = """üé™ <b>–ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø</b>

–°—Ç–∞–Ω—å—Ç–µ –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è, –∫–æ—Ç–æ—Ä–æ–π –≤–æ—Å—Ö–∏—â–∞–µ—Ç–µ—Å—å

üß† –ù–ï–ô–†–û–ó–ê–í–¢–†–ê–ö –î–õ–Ø –Ø–°–ù–û–°–¢–ò –£–ú–ê

ü•ë –û–º–ª–µ—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —à–ø–∏–Ω–∞—Ç–æ–º

–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Ä¢ –Ø–π—Ü–∞ - 2 —à—Ç
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - ¬Ω —à—Ç  
‚Ä¢ –®–ø–∏–Ω–∞—Ç - 50 –≥
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 20 –≥
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.

–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏
2. –û–±–∂–∞—Ä—å—Ç–µ —à–ø–∏–Ω–∞—Ç –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 2 –º–∏–Ω—É—Ç—ã
3. –í–ª–µ–π—Ç–µ —è–π—Ü–∞, –≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –ª–æ–º—Ç–∏–∫–∞–º–∏ –∞–≤–æ–∫–∞–¥–æ –∏ –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏

üí° –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ê–≤–æ–∫–∞–¥–æ - –æ–º–µ–≥–∞-9 –¥–ª—è –º–µ–º–±—Ä–∞–Ω –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –®–ø–∏–Ω–∞—Ç - –ª—é—Ç–µ–∏–Ω –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π  
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - –æ–º–µ–≥–∞-3 –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏

‚ö° –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–æ–≤
‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –º–æ–∑–≥–∞
‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è

---
üí´ <b>–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç - –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é</b>

üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b> ‚Üí @ppsupershef
üí¨ <b>–û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!</b> ‚Üí @ppsupershef_chat

üòã –≤–∫—É—Å–Ω–æ | üí™ –ø–æ–ª–µ–∑–Ω–æ | üë®‚Äçüç≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é | üìù –∑–∞–ø–∏—à—É —Å–µ–±–µ | üìö –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã

üîÑ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</b> ‚Üí @ppsupershef"""
        
        success = elite_channel.send_to_telegram(preview_content, content_type='preview')
        return jsonify({"status": "success" if success else "error", "message": "–§–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@app.route('/send-breakfast')
@rate_limit
def send_breakfast():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞
        current_weekday = datetime.now(Config.KEMEROVO_TIMEZONE).weekday()
        breakfast_types = [
            "generate_neuro_breakfast", "generate_energy_breakfast", 
            "generate_longevity_breakfast", "generate_gastronomy_breakfast",
            "generate_analytical_breakfast", "generate_energy_breakfast",
            "generate_sunday_brunch"
        ]
        method_name = breakfast_types[current_weekday]
        method = getattr(content_gen, method_name)
        content = method()
        success = elite_channel.send_to_telegram(content, content_type=breakfast_types[current_weekday].replace('generate_', ''))
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-lunch')
@rate_limit
def send_lunch():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–µ–¥–∞"""
    try:
        content = content_gen.generate_energy_breakfast()
        success = elite_channel.send_to_telegram(content, content_type='lunch')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-science')
@rate_limit
def send_science():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content = content_gen.generate_science_content()
        success = elite_channel.send_to_telegram(content, content_type='science')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-interval')
@rate_limit
def send_interval():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"""
    try:
        content = content_gen.generate_expert_advice()
        success = elite_channel.send_to_telegram(content, content_type='advice')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-dinner')
@rate_limit
def send_dinner():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–∏–Ω–∞"""
    try:
        content = content_gen.generate_longevity_breakfast()
        success = elite_channel.send_to_telegram(content, content_type='dinner')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-advice')
@rate_limit
def send_advice():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    try:
        content = content_gen.generate_expert_advice()
        success = elite_channel.send_to_telegram(content, content_type='advice')
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-manual-content', methods=['POST'])
@require_api_key
@rate_limit
def send_manual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        data = request.get_json()
        content = data.get('content', '')
        
        if not content:
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        current_times = TimeZoneConverter.get_current_times()
        content_with_footer = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = elite_channel.send_to_telegram(content_with_footer, content_type='manual')
        return jsonify({"status": "success" if success else "error"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/webhook/telegram', methods=['POST'])
@rate_limit
def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        data = request.get_json()
        SecureLogger.safe_log(f"üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ engagement –º–µ—Ç—Ä–∏–∫
        if 'message' in data and 'reply_to_message' in data['message']:
            # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
            message_id = data['message']['reply_to_message']['message_id']
            channel_analytics.update_engagement(message_id, 'comments')
        
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error"})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"status": "error", "message": "Endpoint not found"}), 404

@app.errorhandler(429)
def rate_limit_exceeded(error):
    return jsonify({
        "status": "error", 
        "message": "Rate limit exceeded. Try again later."
    }), 429

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {str(error)}")
    return jsonify({"status": "error", "message": "Internal server error"}), 500

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("üîç –ó–∞–ø—É—Å–∫ –ë–ï–ó–û–ü–ê–°–ù–û–ô –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
    safe_debug_tokens()
    
    SecureLogger.safe_log(f"üöÄ –ó–∞–ø—É—Å–∫ –ö–ª—É–±–∞ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è: @ppsupershef")
    SecureLogger.safe_log(f"üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏")
    SecureLogger.safe_log(f"üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω: 28 –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)")
    SecureLogger.safe_log(f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: Rate limiting –∏ –∑–∞—â–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
