import os
import requests
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from threading import Thread
from flask import Flask
from dotenv import load_dotenv

load_dotenv()
app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL')
YANDEX_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')

class VisualContentGenerator:
    def __init__(self):
        self.visual_content = {
            'infographics': [
                {
                    'title': 'üìä –ü–†–ê–í–ò–õ–û –¢–ê–†–ï–õ–ö–ò',
                    'content': '‚Ä¢ 1/2 —Ç–∞—Ä–µ–ª–∫–∏ - –æ–≤–æ—â–∏/—Ñ—Ä—É–∫—Ç—ã\n‚Ä¢ 1/4 —Ç–∞—Ä–µ–ª–∫–∏ - –±–µ–ª–∫–∏\n‚Ä¢ 1/4 —Ç–∞—Ä–µ–ª–∫–∏ - —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã\n\nüéØ –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏!',
                    'hashtags': '#–ü—Ä–∞–≤–∏–ª–æ–¢–∞—Ä–µ–ª–∫–∏ #–ë–∞–ª–∞–Ω—Å–ü–∏—Ç–∞–Ω–∏—è #–ò–¥–µ–∞–ª—å–Ω–∞—è–ü–æ—Ä—Ü–∏—è'
                },
                {
                    'title': 'üìà –ë–ê–õ–ê–ù–° –ë–ñ–£',
                    'content': 'üí™ –ë–µ–ª–∫–∏: 25-30%\nü•ë –ñ–∏—Ä—ã: 25-30%\n‚ö° –£–≥–ª–µ–≤–æ–¥—ã: 40-50%\n\nüìä –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞!',
                    'hashtags': '#–ë–∞–ª–∞–Ω—Å–ë–ñ–£ #–ú–∞–∫—Ä–æ—Å—ã #–ü–∏—Ç–∞–Ω–∏–µ–ù–∞—É—á–Ω–æ'
                },
                {
                    'title': '‚è±Ô∏è –¢–ê–ô–ú–ò–ù–ì –ü–†–ò–ï–ú–û–í –ü–ò–©–ò',
                    'content': 'üïó –ó–∞–≤—Ç—Ä–∞–∫: 7-9 —É—Ç—Ä–∞\nüïõ –û–±–µ–¥: 12-14 –¥–Ω—è\nüï† –£–∂–∏–Ω: 17-19 –≤–µ—á–µ—Ä–∞\n\n‚è∞ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –º–µ—Ç–∞–±–æ–ª–∏–∑–º—É!',
                    'hashtags': '#–¢–∞–π–º–∏–Ω–≥–ü–∏—Ç–∞–Ω–∏—è #–†–µ–∂–∏–º–î–Ω—è #–ú–µ—Ç–∞–±–æ–ª–∏–∑–º'
                },
                {
                    'title': 'üíß –ì–ò–î–†–ê–¢–ê–¶–ò–Ø –í –¢–ï–ß–ï–ù–ò–ï –î–ù–Ø',
                    'content': '‚òÄÔ∏è –£—Ç—Ä–æ: 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã\nüåû –î–µ–Ω—å: 1.5 –ª–∏—Ç—Ä–∞\nüåô –í–µ—á–µ—Ä: 0.5 –ª–∏—Ç—Ä–∞\n\nüí¶ –í–æ–¥–∞ - –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!',
                    'hashtags': '#–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è #–í–æ–¥–Ω—ã–π–ë–∞–ª–∞–Ω—Å #–ó–¥–æ—Ä–æ–≤—ã–µ–ü—Ä–∏–≤—ã—á–∫–∏'
                }
            ],
            'checklists': [
                {
                    'title': '‚úÖ –ß–ï–ö-–õ–ò–°–¢ –ü–û–õ–ï–ó–ù–´–• –ü–†–û–î–£–ö–¢–û–í',
                    'content': 'ü•¶ –û–≤–æ—â–∏: –±—Ä–æ–∫–∫–æ–ª–∏, —à–ø–∏–Ω–∞—Ç, –º–æ—Ä–∫–æ–≤—å\nüçé –§—Ä—É–∫—Ç—ã: —è–±–ª–æ–∫–∏, –±–∞–Ω–∞–Ω—ã, —è–≥–æ–¥—ã\nüí™ –ë–µ–ª–∫–∏: –∫—É—Ä–∏—Ü–∞, —Ä—ã–±–∞, —Ç–æ—Ñ—É\nüåæ –£–≥–ª–µ–≤–æ–¥—ã: –∫–∏–Ω–æ–∞, –≥—Ä–µ—á–∫–∞, –æ–≤—Å—è–Ω–∫–∞\nü•ë –ñ–∏—Ä—ã: –∞–≤–æ–∫–∞–¥–æ, –æ—Ä–µ—Ö–∏, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ',
                    'hashtags': '#–ß–µ–∫–õ–∏—Å—Ç #–ü–æ–ª–µ–∑–Ω—ã–µ–ü—Ä–æ–¥—É–∫—Ç—ã #–ó–¥–æ—Ä–æ–≤–∞—è–ö–æ—Ä–∑–∏–Ω–∞'
                },
                {
                    'title': 'üéí –°–ü–ò–°–û–ö –î–õ–Ø –õ–ê–ù–ß–ë–û–ö–°–ê',
                    'content': 'üì¶ –û—Å–Ω–æ–≤–∞: –∫—Ä—É–ø–∞/—Å–∞–ª–∞—Ç\nüçó –ë–µ–ª–æ–∫: –∫—É—Ä–∏—Ü–∞/—è–π—Ü–∞/—Ä—ã–±–∞\nü•¨ –û–≤–æ—â–∏: —Å–≤–µ–∂–∏–µ/–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ\nüç∂ –ó–∞–ø—Ä–∞–≤–∫–∞: –æ—Ç–¥–µ–ª—å–Ω–æ\nü•§ –ù–∞–ø–∏—Ç–æ–∫: –≤–æ–¥–∞/—á–∞–π\n\nüíº –ò–¥–µ–∞–ª—å–Ω—ã–π –æ–±–µ–¥ –Ω–∞ —Ä–∞–±–æ—Ç–µ!',
                    'hashtags': '#–õ–∞–Ω—á–±–æ–∫—Å #–û–±–µ–¥–ù–∞–†–∞–±–æ—Ç—É #MealPrep'
                },
                {
                    'title': 'üìÖ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ',
                    'content': 'üóìÔ∏è –ü–ù: –†—ã–±–Ω—ã–π –¥–µ–Ω—å\nüóìÔ∏è –í–¢: –ö—É—Ä–∏–Ω—ã–π –¥–µ–Ω—å\nüóìÔ∏è –°–†: –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π\nüóìÔ∏è –ß–¢: –ë–æ–±–æ–≤—ã–π\nüóìÔ∏è –ü–¢: –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π\nüóìÔ∏è –°–ë: –°–µ–º–µ–π–Ω—ã–π\nüóìÔ∏è –í–°: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π',
                    'hashtags': '#–ü–ª–∞–Ω–ü–∏—Ç–∞–Ω–∏—è #MealPlan #–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
                }
            ]
        }
    
    def get_random_infographic(self):
        return random.choice(self.visual_content['infographics'])
    
    def get_random_checklist(self):
        return random.choice(self.visual_content['checklists'])

class SmartFoodChannel:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL
        self.timezone_offset = 7
        self.content_themes = self.get_weekly_themes()
        self.visual_gen = VisualContentGenerator()
        
    def get_kemerovo_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)"""
        utc_time = datetime.now(timezone.utc)
        kemerovo_time = utc_time + timedelta(hours=self.timezone_offset)
        return kemerovo_time
    
    def get_weekly_themes(self):
        return {
            0: "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏",
            1: "üíº –û–±–µ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã", 
            2: "‚ö° –£–∂–∏–Ω—ã –∑–∞ 20 –º–∏–Ω—É—Ç",
            3: "üîç –†–∞–∑–±–æ—Ä –º–∏—Ñ–æ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏",
            4: "üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
            5: "üéØ –°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã",
            6: "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
        }
    
    def get_daily_content(self, meal_type):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        kemerovo_time = self.get_kemerovo_time()
        weekday = kemerovo_time.weekday()
        theme = self.content_themes[weekday]
        
        content_generators = {
            '–∑–∞–≤—Ç—Ä–∞–∫': self.generate_breakfast_content,
            '–æ–±–µ–¥': self.generate_lunch_content,
            '—É–∂–∏–Ω': self.generate_dinner_content,
            '–ø–µ—Ä–µ–∫—É—Å': self.generate_snack_content,
            '–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥': self.generate_nutritionist_advice,
            '–≤–∏–∑—É–∞–ª': self.generate_visual_content
        }
        
        content = content_generators[meal_type](weekday)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–∂–∏–Ω–∞
        if meal_type == '—É–∂–∏–Ω':
            entertainment = self.get_daily_entertainment(weekday)
            content += f"\n\nüé≠ –í–ï–ß–ï–†–ù–ò–ô –ë–õ–û–ö\n{entertainment}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ —Å—Å—ã–ª–∫–∏ (–∫—Ä–æ–º–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        if meal_type != '–≤–∏–∑—É–∞–ª':
            content += self.get_call_to_action()
            
        return content
    
    def generate_breakfast_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        return self.format_recipe({
            'name': 'ü•£ –ü–æ–ª–µ–∑–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫',
            'ingredients': ['–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50–≥', '–ú–æ–ª–æ–∫–æ - 200–º–ª', '–§—Ä—É–∫—Ç—ã - 100–≥', '–ú–µ–¥ - 1 —á.–ª.'],
            'steps': ['–ó–∞–ª–∏—Ç—å –æ–≤—Å—è–Ω–∫—É –º–æ–ª–æ–∫–æ–º', '–î–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–∏–ø–µ–Ω–∏—è', '–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä—É–∫—Ç—ã –∏ –º–µ–¥'],
            'time': '10 –º–∏–Ω—É—Ç',
            'calories': '250 –∫–∫–∞–ª'
        }, "üåÖ –ó–ê–í–¢–†–ê–ö –î–ù–Ø")
    
    def generate_lunch_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–µ–¥–∞"""
        return self.format_recipe({
            'name': 'üç≤ –°—ã—Ç–Ω—ã–π –æ–±–µ–¥',
            'ingredients': ['–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥', '–†–∏—Å - 100–≥', '–û–≤–æ—â–∏ - 200–≥', '–°–ø–µ—Ü–∏–∏'],
            'steps': ['–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∫—É—Ä–∏—Ü—É', '–û—Ç–≤–∞—Ä–∏—Ç—å —Ä–∏—Å', '–ü–æ—Ç—É—à–∏—Ç—å –æ–≤–æ—â–∏', '–ü–æ–¥–∞—Ç—å –≤–º–µ—Å—Ç–µ'],
            'time': '25 –º–∏–Ω—É—Ç', 
            'calories': '400 –∫–∫–∞–ª'
        }, "üçΩÔ∏è –û–ë–ï–î –î–ù–Ø")
    
    def generate_dinner_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–∏–Ω–∞"""
        return self.format_recipe({
            'name': 'üçΩÔ∏è –õ–µ–≥–∫–∏–π —É–∂–∏–Ω',
            'ingredients': ['–†—ã–±–∞ - 200–≥', '–û–≤–æ—â–∏ - 300–≥', '–õ–∏–º–æ–Ω - 0.5 —à—Ç', '–ó–µ–ª–µ–Ω—å'],
            'steps': ['–ó–∞–ø–µ—á—å —Ä—ã–±—É 15 –º–∏–Ω', '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–≤–æ—â–∏ –Ω–∞ –ø–∞—Ä—É', '–ü–æ–¥–∞—Ç—å —Å –ª–∏–º–æ–Ω–æ–º'],
            'time': '20 –º–∏–Ω—É—Ç',
            'calories': '300 –∫–∫–∞–ª'
        }, "üåô –£–ñ–ò–ù –î–ù–Ø")
    
    def generate_snack_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫—É—Å–∞"""
        return self.format_recipe({
            'name': 'ü•ú –ü–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å',
            'ingredients': ['–ô–æ–≥—É—Ä—Ç - 150–≥', '–§—Ä—É–∫—Ç—ã - 100–≥', '–û—Ä–µ—Ö–∏ - 30–≥', '–ú–µ–¥ - 1 —á.–ª.'],
            'steps': ['–ù–∞—Ä–µ–∑–∞—Ç—å —Ñ—Ä—É–∫—Ç—ã', '–°–º–µ—à–∞—Ç—å —Å –π–æ–≥—É—Ä—Ç–æ–º', '–ü–æ—Å—ã–ø–∞—Ç—å –æ—Ä–µ—Ö–∞–º–∏', '–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥'],
            'time': '5 –º–∏–Ω—É—Ç',
            'calories': '180 –∫–∫–∞–ª'
        }, "‚òï –ü–ï–†–ï–ö–£–° –î–ù–Ø")
    
    def generate_nutritionist_advice(self, weekday):
        """–°–æ–≤–µ—Ç—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞"""
        advice_list = [
            {
                'title': 'üíé –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê',
                'advice': '¬´–ü–æ—Å–ª–µ 40 –ª–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è –Ω–∞ 5% –∫–∞–∂–¥–æ–µ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø–æ—Ä—Ü–∏–∏ –Ω–∞ 10%, –Ω–æ —É–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–æ 4-5 —Ä–∞–∑ –≤ –¥–µ–Ω—å.¬ª',
                'explanation': 'üìö –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ß–∞—Å—Ç–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ.',
                'tip': 'üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞—Ä–µ–ª–∫–∏ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - —ç—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ü–∏–∏.'
            },
            {
                'title': 'üíé –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê', 
                'advice': '¬´–í–æ–¥–∞ - –ª—É—á—à–∏–π –¥–µ—Ç–æ–∫—Å. –ó–∞ 40 –ª–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ —è —É–±–µ–¥–∏–ª—Å—è: 2 –ª–∏—Ç—Ä–∞ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –≤ –¥–µ–Ω—å —Ä–µ—à–∞—é—Ç 80% –ø—Ä–æ–±–ª–µ–º —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º.¬ª',
                'explanation': 'üìö –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –í–æ–¥–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–∫—Å–∏–Ω—ã.',
                'tip': 'üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç: –ü–µ–π—Ç–µ –ø–æ —Å—Ç–∞–∫–∞–Ω—É –≤–æ–¥—ã –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã - —ç—Ç–æ —É–ª—É—á—à–∏—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∏ —Å–Ω–∏–∑–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç.'
            }
        ]
        advice = random.choice(advice_list)
        message = f"{advice['title']}\n\n"
        message += f"üë®‚Äç‚öïÔ∏è {advice['advice']}\n\n"
        message += f"{advice['explanation']}\n\n"
        message += f"{advice['tip']}\n\n"
        message += "üåü –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º"
        
        return message
    
    def generate_visual_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ß–µ—Ä–µ–¥—É–µ–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ —á–µ–∫-–ª–∏—Å—Ç—ã
        if weekday % 2 == 0:
            visual = self.visual_gen.get_random_infographic()
        else:
            visual = self.visual_gen.get_random_checklist()
        
        message = f"üé® {visual['title']}\n\n"
        message += f"{visual['content']}\n\n"
        message += f"{visual['hashtags']}\n\n"
        message += "üëá –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–µ–±–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏!"
        
        return message
    
    def get_daily_entertainment(self, weekday):
        """–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–∂–∏–Ω–∞"""
        entertainment = [
            "üí° –°–æ–≤–µ—Ç –≤–µ—á–µ—Ä–∞: –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–∂–∏–Ω–æ–º –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤ - —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ! üìµ",
            "üåü –§–∞–∫—Ç: 20-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞ —É—Å–∫–æ—Ä—è–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –Ω–∞ 30%! üö∂‚Äç‚ôÇÔ∏è",
            "üìö –ò–¥–µ—è: –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª - —á–∞–π —Å —Ç—Ä–∞–≤–∞–º–∏ –∏ —Ö–æ—Ä–æ—à–∞—è –∫–Ω–∏–≥–∞! üìñ",
            "üèÉ‚Äç‚ôÇÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –õ–µ–≥–∫–∏–π —É–∂–∏–Ω = –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω! üò¥",
            "ü•ó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π –æ–≤–æ—â –Ω–∞ —É–∂–∏–Ω - —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –≤–∫—É—Å–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã! üåà",
            "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂: –ì–æ—Ç–æ–≤—å—Ç–µ —É–∂–∏–Ω –≤–º–µ—Å—Ç–µ —Å —Å–µ–º—å–µ–π - —ç—Ç–æ —Å–±–ª–∏–∂–∞–µ—Ç! üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
            "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –°–æ—Å—Ç–∞–≤—å—Ç–µ –º–µ–Ω—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º! üìÖ"
        ]
        return entertainment[weekday]
    
    def get_call_to_action(self):
        """–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ —Å—Å—ã–ª–∫–∏"""
        cta = "\n\n" + "‚ïê" * 40 + "\n\n"
        cta += "üì± **–ü–û–ù–†–ê–í–ò–õ–û–°–¨? –ü–û–î–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!**\n\n"
        cta += "üëâ @FoodExpertChannel - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã\n\n"
        cta += "‚ù§Ô∏è –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ | üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ | üì§ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ\n\n"
        cta += "üëá **–í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç:**\n"
        cta += "üëç - –í–∫—É—Å–Ω–æ!    ü•∞ - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é!    üî• - –ü–æ–ª–µ–∑–Ω–æ!"
        
        return cta
    
    def format_recipe(self, recipe, theme):
        message = f"{theme}\n\n"
        message += f"üç≥ *{recipe['name']}*\n\n"
        
        message += "ü•ó *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
        for ing in recipe['ingredients']:
            message += f"‚Ä¢ {ing}\n"
            
        message += f"\nüë®‚Äçüç≥ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ ({recipe['time']}):*\n"
        for i, step in enumerate(recipe['steps'], 1):
            message += f"{i}. {step}\n"
            
        message += f"\nüìä *–ö–ë–ñ–£:* {recipe['calories']}\n"
        message += "\nüîî –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç¥"
        
        return message
    
    def send_to_telegram(self, message):
        if not self.token or not self.channel:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª!")
            return False
            
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.channel,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                kemerovo_time = self.get_kemerovo_time()
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {kemerovo_time.strftime('%H:%M')} (–ö–µ–º–µ—Ä–æ–≤–æ)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç 6 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å –ø–æ –∫–µ–º–µ—Ä–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        # –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–õ–Ø –ö–ï–ú–ï–†–û–í–û (UTC+7)
        schedule.every().day.at("09:00").do(lambda: self.publish_meal('–∑–∞–≤—Ç—Ä–∞–∫'))
        schedule.every().day.at("13:00").do(lambda: self.publish_meal('–æ–±–µ–¥'))
        schedule.every().day.at("16:00").do(lambda: self.publish_meal('–ø–µ—Ä–µ–∫—É—Å'))
        schedule.every().day.at("19:00").do(lambda: self.publish_meal('—É–∂–∏–Ω'))
        schedule.every().day.at("21:30").do(lambda: self.publish_meal('–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥'))
        schedule.every().day.at("15:00").do(lambda: self.publish_meal('–≤–∏–∑—É–∞–ª'))  # –ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        
        kemerovo_time = self.get_kemerovo_time()
        print(f"üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time.strftime('%H:%M')}")
        print("ü•û –ó–∞–≤—Ç—Ä–∞–∫: 09:00")
        print("üç≤ –û–±–µ–¥: 13:00") 
        print("ü•ú –ü–µ—Ä–µ–∫—É—Å: 16:00")
        print("üçΩÔ∏è –£–∂–∏–Ω: 19:00")
        print("üíé –°–æ–≤–µ—Ç—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞: 21:30")
        print("üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: 15:00")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")
        self.publish_meal('–≤–∏–∑—É–∞–ª')
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def publish_meal(self, meal_type):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        kemerovo_time = self.get_kemerovo_time()
        print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {meal_type}... ({kemerovo_time.strftime('%H:%M')} –ö–µ–º–µ—Ä–æ–≤–æ)")
        message = self.get_daily_content(meal_type)
        success = self.send_to_telegram(message)
        
        if success:
            print(f"‚úÖ {meal_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {meal_type}")

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
channel = SmartFoodChannel()

def start_scheduler():
    channel.run_scheduler()

scheduler_thread = Thread(target=start_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

@app.route('/')
def home():
    kemerovo_time = channel.get_kemerovo_time()
    weekday = kemerovo_time.weekday()
    theme = channel.content_themes[weekday]
    return f"""
    <html>
        <body>
            <h1>üç≥ –£–º–Ω–∞—è –ö—É—Ö–Ω—è 5.0</h1>
            <p><strong>–ö–µ–º–µ—Ä–æ–≤–æ:</strong> {kemerovo_time.strftime('%H:%M')}</p>
            <p><strong>–°–µ–≥–æ–¥–Ω—è:</strong> {theme}</p>
            <p><strong>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</strong></p>
            <ul>
                <li>üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞)</li>
                <li>üì± –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é</li>
                <li>‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏</li>
                <li>üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</li>
            </ul>
            <p><strong>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
            <ul>
                <li>ü•û –ó–∞–≤—Ç—Ä–∞–∫: 09:00</li>
                <li>üç≤ –û–±–µ–¥: 13:00</li>
                <li>üé® –í–∏–∑—É–∞–ª: 15:00</li>
                <li>ü•ú –ü–µ—Ä–µ–∫—É—Å: 16:00</li>
                <li>üçΩÔ∏è –£–∂–∏–Ω: 19:00</li>
                <li>üíé –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: 21:30</li>
            </ul>
        </body>
    </html>
    """

@app.route('/test')
def test():
    test_message = "üß™ –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"
    success = channel.send_to_telegram(test_message)
    return f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ' if success else '‚ùå'}"

@app.route('/force/<meal_type>')
def force_publish(meal_type):
    valid_meals = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '—É–∂–∏–Ω', '–ø–µ—Ä–µ–∫—É—Å', '–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥', '–≤–∏–∑—É–∞–ª']
    if meal_type not in valid_meals:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(valid_meals)}"
    
    channel.publish_meal(meal_type)
    return f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {meal_type}"

@app.route('/debug')
def debug():
    kemerovo_time = channel.get_kemerovo_time()
    return {
        "telegram_token_set": bool(TELEGRAM_TOKEN),
        "telegram_channel_set": bool(TELEGRAM_CHANNEL),
        "kemerovo_time": kemerovo_time.strftime('%Y-%m-%d %H:%M:%S'),
        "status": "active",
        "version": "5.0 - —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
    }

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
