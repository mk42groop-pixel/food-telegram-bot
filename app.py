import os
import logging
import requests
import json
import time
import schedule
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, request, jsonify, render_template_string
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
class Config:
    def __init__(self):
        self.TELEGRAM_BOT_TOKEN = self._get_env_safe('TELEGRAM_BOT_TOKEN')
        self.TELEGRAM_CHANNEL = self._get_env_safe('TELEGRAM_CHANNEL', '-1003152210862')
        self.TELEGRAM_GROUP = self._get_env_safe('TELEGRAM_GROUP', '@ppsupershef_chat')
        self.YANDEX_GPT_API_KEY = self._get_env_safe('YANDEX_GPT_API_KEY')
        self.YANDEX_FOLDER_ID = self._get_env_safe('YANDEX_FOLDER_ID', 'b1gb6o9sk0ajjfdaoev8')
        self.DEEPSEEK_API_KEY = self._get_env_safe('DEEPSEEK_API_KEY')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        self.SERVER_TIMEZONE = pytz.timezone('UTC')
        self.KEMEROVO_TIMEZONE = pytz.timezone('Asia/Novokuznetsk')
        
        self._validate_config()

    def _get_env_safe(self, key, default=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key, default)
        if value is None:
            logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return value

    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        required = ['TELEGRAM_BOT_TOKEN', 'YANDEX_GPT_API_KEY']
        missing = [key for key in required if not getattr(self, key)]
        
        if missing:
            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}"
            logger.error(error_msg)
            raise ValueError(error_msg)
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = Config()
except ValueError as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

class ContentFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    EMOTIONAL_TRIGGERS = {
        'achievement': [
            "üí´ –°—Ç–∞–Ω—å—Ç–µ –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è, –∫–æ—Ç–æ—Ä–æ–π –≤–æ—Å—Ö–∏—â–∞–µ—Ç–µ—Å—å",
            "üöÄ –ï–¥–∞ - –≤–∞—à —Å–æ—é–∑–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∞–º–±–∏—Ü–∏–π", 
        ],
        'transformation': [
            "üåü –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–æ—Å—Ç–∞",
            "üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
        ]
    }
    
    REACTIONS = [
        {"emoji": "üòã", "text": "–≤–∫—É—Å–Ω–æ"},
        {"emoji": "üí™", "text": "–ø–æ–ª–µ–∑–Ω–æ"},
        {"emoji": "üë®‚Äçüç≥", "text": "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é"},
    ]

    @staticmethod
    def get_emotional_trigger():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        all_triggers = []
        for category in ContentFormatter.EMOTIONAL_TRIGGERS.values():
            all_triggers.extend(category)
        return random.choice(all_triggers) if all_triggers else "üéØ –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é"

    @staticmethod
    def format_philosophy_content(title, content, content_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è"""
        trigger = ContentFormatter.get_emotional_trigger()
        
        reactions_line = " | ".join([f"{reaction['emoji']} {reaction['text']}" for reaction in ContentFormatter.REACTIONS])
        
        formatted_content = f"""üé™ –ö–õ–£–ë –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø

{trigger}

{title}

{content}

---
üí´ –í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç - –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –≤ —Å–≤–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é

üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! ‚Üí @ppsupershef
üí¨ –û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! ‚Üí @ppsupershef_chat

{reactions_line}

üîÑ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! ‚Üí @ppsupershef"""
        
        return formatted_content

class TimeZoneConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    
    @staticmethod
    def kemerovo_to_server_time(kemerovo_time_str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ –ö–µ–º–µ—Ä–æ–≤–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            today = datetime.now(config.KEMEROVO_TIMEZONE).date()
            kemerovo_dt = datetime.combine(today, datetime.strptime(kemerovo_time_str, '%H:%M').time())
            kemerovo_dt = config.KEMEROVO_TIMEZONE.localize(kemerovo_dt)
            server_dt = kemerovo_dt.astimezone(config.SERVER_TIMEZONE)
            return server_dt.strftime('%H:%M')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {kemerovo_time_str}: {e}")
            return kemerovo_time_str
    
    @staticmethod
    def get_current_times():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –æ–±–æ–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö"""
        try:
            server_now = datetime.now(config.SERVER_TIMEZONE)
            kemerovo_now = datetime.now(config.KEMEROVO_TIMEZONE)
            
            return {
                'server_time': server_now.strftime('%H:%M:%S'),
                'kemerovo_time': kemerovo_now.strftime('%H:%M:%S'),
                'server_timezone': str(config.SERVER_TIMEZONE),
                'kemerovo_timezone': str(config.KEMEROVO_TIMEZONE)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return {
                'server_time': '00:00:00',
                'kemerovo_time': '00:00:00',
                'server_timezone': 'UTC',
                'kemerovo_timezone': 'Asia/Novokuznetsk'
            }

class TelegramPolls:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ –≤ Telegram"""
    
    def __init__(self, bot_token):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def create_poll(self, chat_id, question, options, is_anonymous=True, allows_multiple_answers=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendPoll"
            payload = {
                'chat_id': chat_id,
                'question': question,
                'options': options,
                'is_anonymous': is_anonymous,
                'allows_multiple_answers': allows_multiple_answers,
                'type': 'regular'
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {question}")
                return result['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {result}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None

class ChannelAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self, bot_token, channel_id):
        self.bot_token = bot_token
        self.channel_id = channel_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    def get_member_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            url = f"{self.base_url}/getChatMembersCount"
            payload = {
                'chat_id': self.channel_id
            }
            response = requests.post(url, json=payload, timeout=10)
            result = response.json()
            if result.get('ok'):
                return result['result']
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def generate_public_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            member_count = self.get_member_count()
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            report = f"""üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ö–ê–ù–ê–õ–ê @ppsupershef

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}
üìÖ –î–∞—Ç–∞: {current_time}
üìç –í—Ä–µ–º—è –ö–µ–º–µ—Ä–æ–≤–æ: {TimeZoneConverter.get_current_times()['kemerovo_time']}

üí´ –°–ï–ì–û–î–ù–Ø –í –ö–ê–ù–ê–õ–ï:
‚Ä¢ üß† –ù–µ–π—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞
‚Ä¢ üí™ –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ üõ°Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è

üéØ –ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –ö–õ–£–ë–£ –û–°–û–ó–ù–ê–ù–ù–û–ì–û –î–û–õ–ì–û–õ–ï–¢–ò–Ø!

#–æ—Ç—á–µ—Ç #—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ #–∫–ª—É–±"""
            
            return report
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return "üìä –û—Ç—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–æ–º
class EliteChannel:
    def __init__(self):
        self.token = config.TELEGRAM_BOT_TOKEN
        self.channel = config.TELEGRAM_CHANNEL
        self.group = config.TELEGRAM_GROUP
        self.polls_manager = TelegramPolls(self.token)
        self.formatter = ContentFormatter()
        
        if not self.token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä Telegram –∫–∞–Ω–∞–ª–∞")
    
    def send_to_telegram(self, message, parse_mode='HTML'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            if not self.token or not self.channel:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.channel,
                'text': message,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É"""
        try:
            if not self.token:
                return {"status": "error", "message": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            url = f"https://api.telegram.org/bot{self.token}/getMe"
            response = requests.get(url, timeout=10)
            bot_info = response.json()
            
            if not bot_info.get('ok'):
                return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"}
            
            return {
                "status": "success", 
                "bot": bot_info['result']['username'],
                "channel_id": self.channel
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def diagnose_channel(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞"""
        try:
            diagnosis = {
                "status": "running",
                "checks": [],
                "summary": "",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            if not self.token:
                diagnosis["checks"].append({"check": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
                diagnosis["status"] = "error"
            else:
                diagnosis["checks"].append({"check": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": "–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
            bot_info = self.test_connection()
            if bot_info["status"] == "success":
                diagnosis["checks"].append({"check": "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": f"–ë–æ—Ç: @{bot_info['bot']}"})
            else:
                diagnosis["checks"].append({"check": "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": bot_info["message"]})
                diagnosis["status"] = "error"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
            if not self.channel:
                diagnosis["checks"].append({"check": "ID –∫–∞–Ω–∞–ª–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
                diagnosis["status"] = "error"
            else:
                diagnosis["checks"].append({"check": "ID –∫–∞–Ω–∞–ª–∞", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": f"–ö–∞–Ω–∞–ª: {self.channel}"})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if diagnosis["status"] != "error":
                test_message = "üîß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                success = self.send_to_telegram(test_message)
                if success:
                    diagnosis["checks"].append({"check": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", "status": "‚úÖ –£—Å–ø–µ—Ö", "details": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
                else:
                    diagnosis["checks"].append({"check": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"})
                    diagnosis["status"] = "error"
            
            # –°–≤–æ–¥–∫–∞
            if diagnosis["status"] == "error":
                diagnosis["summary"] = "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
            else:
                diagnosis["summary"] = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            
            return diagnosis
            
        except Exception as e:
            return {
                "status": "error",
                "checks": [{"check": "–û–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"}],
                "summary": "‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentGenerator:
    def __init__(self):
        self.yandex_key = config.YANDEX_GPT_API_KEY
        self.yandex_folder = config.YANDEX_FOLDER_ID
        self.formatter = ContentFormatter()
        
        if not self.yandex_key:
            logger.warning("‚ö†Ô∏è Yandex GPT API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    def generate_energy_breakfast(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ-–∑–∞–≤—Ç—Ä–∞–∫–∞"""
        fallback = """ü•£ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–≤—Å—è–Ω–∫–∞ —Å —Å–µ–º–µ–Ω–∞–º–∏

üéØ –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 50 –≥
‚Ä¢ üå∞ –ú–∏–Ω–¥–∞–ª—å - 20 –≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 1 —Å—Ç.–ª.
‚Ä¢ üçå –ë–∞–Ω–∞–Ω - 1 —à—Ç
‚Ä¢ üü§ –ö–æ—Ä–∏—Ü–∞ - ¬Ω —á.–ª.

üéØ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï:
1. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π –Ω–∞ 5 –º–∏–Ω—É—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–π –±–∞–Ω–∞–Ω –∏ —Å–µ–º–µ–Ω–∞ —á–∏–∞
3. –ü–æ—Å—ã–ø—å—Ç–µ –º–∏–Ω–¥–∞–ª–µ–º –∏ –∫–æ—Ä–∏—Ü–µ–π

üí° –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
üåæ –û–≤—Å—è–Ω–∫–∞ –¥–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - –æ–º–µ–≥–∞-3 –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π"""
        
        return self.formatter.format_philosophy_content("‚ö° –≠–ù–ï–†–ì–û-–ó–ê–í–¢–†–ê–ö –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –î–ù–Ø", fallback, "breakfast")

    def generate_smart_shopping_list(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
        season = self._get_current_season()
        
        shopping_list = f"""üõí –£–ú–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –ù–ê –ù–ï–î–ï–õ–Æ

üéØ –û—Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è ({season})

üß† –î–õ–Ø –ú–û–ó–ì–ê –ò –ù–ï–†–í–ù–û–ô –°–ò–°–¢–ï–ú–´:
‚Ä¢ üå∞ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ - 200 –≥
‚Ä¢ ü•ë –ê–≤–æ–∫–∞–¥–æ - 3-4 —à—Ç
‚Ä¢ üêü –ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ - 500 –≥
‚Ä¢ ü•ö –Ø–π—Ü–∞ - 10 —à—Ç

üí™ –î–õ–Ø –≠–ù–ï–†–ì–ò–ò –ò –¢–û–ù–£–°–ê:
‚Ä¢ üåæ –û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 500 –≥
‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 1 –∫–≥
‚Ä¢ üíé –°–µ–º–µ–Ω–∞ —á–∏–∞ - 100 –≥

üéØ –§–ò–õ–û–°–û–§–ò–Ø –ü–û–ö–£–ü–û–ö:
–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç - –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ!

#—á–µ–∫–ª–∏—Å—Ç #—É–º–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏ #{season}"""
        
        return shopping_list

    def _get_current_season(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"

    def generate_expert_advice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        fallback = """üéØ –ü—Ä–∏–Ω—Ü–∏–ø: "–ï—à—å—Ç–µ —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏"

üéØ –§–û–†–ú–£–õ–ò–†–û–í–ö–ê: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–¥—É–≥–∏.

üî¨ –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–µ - –ª–∏–∫–æ–ø–∏–Ω (–ø—Ä–æ—Ç–∏–≤ —Ä–∞–∫–∞)
‚Ä¢ üü† –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω (–∑—Ä–µ–Ω–∏–µ)
‚Ä¢ üü¢ –ó–µ–ª–µ–Ω—ã–µ - –ª—é—Ç–µ–∏–Ω (–º–æ–∑–≥)

üí° –ü–†–û–°–¢–û–ô –®–ê–ì: –î–æ–±–∞–≤—å—Ç–µ 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏."""
        
        return self.formatter.format_philosophy_content("üí° –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ì–û –ü–ò–¢–ê–ù–ò–Ø", fallback, "advice")

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def initialize_components():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    components = {}
    
    try:
        components['channel'] = EliteChannel()
        components['content_gen'] = ContentGenerator()
        components['analytics'] = ChannelAnalytics(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHANNEL)
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return components
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components['content_gen'] = ContentGenerator()
        components['analytics'] = ChannelAnalytics('dummy_token', 'dummy_channel')
        return components

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
components = initialize_components()
elite_channel = components.get('channel')
content_gen = components['content_gen']
channel_analytics = components['analytics']

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        current_times = TimeZoneConverter.get_current_times()
        member_count = channel_analytics.get_member_count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        current_weekday = datetime.now(config.KEMEROVO_TIMEZONE).weekday()
        current_day_name = weekday_names[current_weekday]
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        next_event_info = {
            'time': '07:00',
            'name': 'üç≥ –£—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–≤—Ç—Ä–∞–∫'
        }
        
        html = f"""
        <html>
            <head>
                <title>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
                    .container {{ max-width: 1200px; margin: 0 auto; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
                    .stats-card {{ background: #3498db; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .time-info {{ background: #27ae60; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .btn {{ display: inline-block; padding: 10px 20px; margin: 5px; background: #3498db; color: white; text-decoration: none; border-radius: 5px; border: none; cursor: pointer; }}
                    .btn-success {{ background: #27ae60; }}
                    .btn-warning {{ background: #f39c12; }}
                    .btn-info {{ background: #17a2b8; }}
                    .content-section {{ background: white; padding: 20px; border-radius: 10px; margin: 20px 0; }}
                    .quick-actions {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 20px 0; }}
                    .form-group {{ margin: 10px 0; }}
                    input, textarea {{ width: 100%; padding: 10px; margin: 5px 0; border: 1px solid #ddd; border-radius: 5px; }}
                    .day-info {{ background: #9b59b6; color: white; padding: 15px; border-radius: 5px; margin: 10px 0; }}
                    .diagnosis-result {{ background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 10px 0; display: none; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üé™ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è @ppsupershef</h1>
                        <p>üéØ –§–ò–õ–û–°–û–§–ò–Ø: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é –∂–∏–∑–Ω—å</p>
                    </div>
                    
                    <div class="day-info">
                        <h2>üìÖ –°–µ–≥–æ–¥–Ω—è: {current_day_name}</h2>
                    </div>
                    
                    <div class="quick-actions">
                        <button class="btn" onclick="testConnection()">–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</button>
                        <button class="btn btn-info" onclick="diagnoseChannel()">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</button>
                        <button class="btn" onclick="healthCheck()">Health Check</button>
                        <button class="btn btn-success" onclick="sendPublicReport()">üì® –û—Ç—á–µ—Ç</button>
                    </div>
                    
                    <div class="content-section">
                        <h2>üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin: 20px 0;">
                            <button class="btn" onclick="sendContent('breakfast')">üç≥ –ó–∞–≤—Ç—Ä–∞–∫</button>
                            <button class="btn" onclick="sendContent('shopping')">üõí –ß–µ–∫-–ª–∏—Å—Ç</button>
                            <button class="btn" onclick="sendContent('advice')">üí° –°–æ–≤–µ—Ç—ã</button>
                        </div>
                        
                        <div class="form-group">
                            <h3>‚úçÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥</h3>
                            <textarea id="manualContent" rows="4" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram..."></textarea>
                            <button class="btn btn-success" onclick="sendManualContent()">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                        </div>
                    </div>
                    
                    <div id="diagnosisResult" class="diagnosis-result">
                        <h3>üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h3>
                        <div id="diagnosisContent"></div>
                    </div>
                    
                    <div class="stats-card">
                        <h2>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê</h2>
                        <p><strong>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {member_count}</strong></p>
                        <p><strong>üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ</strong></p>
                    </div>
                    
                    <div class="time-info">
                        <h3>üåç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–†–ï–ú–ï–ù–ò</h3>
                        <p>–°–µ—Ä–≤–µ—Ä: <strong>{current_times['server_time']}</strong></p>
                        <p>–ö–µ–º–µ—Ä–æ–≤–æ: <strong>{current_times['kemerovo_time']}</strong></p>
                    </div>
                </div>

                <script>
                    function testConnection() {{
                        fetch('/test-channel')
                            .then(response => response.json())
                            .then(data => alert('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')))
                            .catch(() => alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
                    }}

                    function healthCheck() {{
                        fetch('/health')
                            .then(response => response.json())
                            .then(data => alert('–°—Ç–∞—Ç—É—Å: ' + data.status))
                            .catch(() => alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
                    }}

                    function diagnoseChannel() {{
                        fetch('/diagnose-channel')
                            .then(response => response.json())
                            .then(data => {{
                                const resultDiv = document.getElementById('diagnosisResult');
                                const contentDiv = document.getElementById('diagnosisContent');
                                
                                let html = `<h4>${{data.summary}}</h4>`;
                                html += `<p><strong>–í—Ä–µ–º—è:</strong> ${{data.timestamp}}</p>`;
                                html += `<h5>–ü—Ä–æ–≤–µ—Ä–∫–∏:</h5>`;
                                
                                data.checks.forEach(check => {{
                                    html += `<div style="margin: 5px 0; padding: 5px; border-radius: 3px; background: #f8f9fa;">
                                        <strong>${{check.check}}</strong>: ${{check.status}} - ${{check.details}}
                                    </div>`;
                                }});
                                
                                contentDiv.innerHTML = html;
                                resultDiv.style.display = 'block';
                                resultDiv.scrollIntoView({{ behavior: 'smooth' }});
                            }})
                            .catch(() => alert('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'));
                    }}

                    function sendPublicReport() {{
                        fetch('/send-public-report')
                            .then(response => response.json())
                            .then(data => alert('–û—Ç—á–µ—Ç: ' + (data.status === 'success' ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞')))
                            .catch(() => alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'));
                    }}

                    function sendContent(type) {{
                        const endpoints = {{
                            'breakfast': '/send-breakfast',
                            'shopping': '/send-shopping-list',
                            'advice': '/send-advice'
                        }};

                        if (endpoints[type]) {{
                            fetch(endpoints[type])
                                .then(response => response.json())
                                .then(data => alert('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + (data.status === 'success' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞')))
                                .catch(() => alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
                        }}
                    }}

                    function sendManualContent() {{
                        const content = document.getElementById('manualContent').value;
                        if (!content) {{
                            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
                            return;
                        }}

                        fetch('/send-manual-content', {{
                            method: 'POST',
                            headers: {{ 'Content-Type': 'application/json' }},
                            body: JSON.stringify({{ content: content }})
                        }})
                        .then(response => response.json())
                        .then(data => {{
                            if (data.status === 'success') {{
                                alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                                document.getElementById('manualContent').value = '';
                            }} else {{
                                alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
                            }}
                        }})
                        .catch(() => alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
                    }}
                </script>
            </body>
        </html>
        """
        return html
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return f"""
        <html>
            <head><title>–û—à–∏–±–∫–∞</title></head>
            <body>
                <h1>‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                <p><small>–û—à–∏–±–∫–∞: {str(e)}</small></p>
            </body>
        </html>
        """

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        current_times = TimeZoneConverter.get_current_times()
        member_count = channel_analytics.get_member_count()
        
        return jsonify({
            "status": "healthy",
            "components": {
                "telegram": elite_channel is not None,
                "content_generator": content_gen is not None,
                "analytics": channel_analytics is not None
            },
            "member_count": member_count,
            "timestamp": current_times['server_time']
        })
    except Exception as e:
        return jsonify({
            "status": "degraded",
            "error": str(e),
            "timestamp": datetime.now().strftime("%H:%M:%S")
        })

@app.route('/test-channel')
def test_channel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not elite_channel:
            return jsonify({"status": "error", "message": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})
            
        current_times = TimeZoneConverter.get_current_times()
        test_message = f"""üé™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´

‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç
üïê –í—Ä–µ–º—è: {current_times['kemerovo_time']}

#—Ç–µ—Å—Ç #–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
        
        success = elite_channel.send_to_telegram(test_message)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/diagnose-channel')
def diagnose_channel():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not elite_channel:
            return jsonify({
                "status": "error",
                "checks": [{"check": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "status": "‚ùå –û—à–∏–±–∫–∞", "details": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}],
                "summary": "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
            
        return jsonify(elite_channel.diagnose_channel())
    except Exception as e:
        return jsonify({
            "status": "error",
            "checks": [{"check": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "status": "‚ùå –û—à–∏–±–∫–∞", "details": str(e)}],
            "summary": "‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

@app.route('/send-public-report')
def send_public_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        if not elite_channel:
            return jsonify({"status": "error", "message": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})
            
        report = channel_analytics.generate_public_report()
        success = elite_channel.send_to_telegram(report)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-breakfast')
def send_breakfast():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞"""
    try:
        if not elite_channel:
            return jsonify({"status": "error", "message": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})
            
        content = content_gen.generate_energy_breakfast()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-shopping-list')
def send_shopping_list():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫"""
    try:
        if not elite_channel:
            return jsonify({"status": "error", "message": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})
            
        content = content_gen.generate_smart_shopping_list()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-advice')
def send_advice():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    try:
        if not elite_channel:
            return jsonify({"status": "error", "message": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})
            
        content = content_gen.generate_expert_advice()
        success = elite_channel.send_to_telegram(content)
        return jsonify({"status": "success" if success else "error"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route('/send-manual-content', methods=['POST'])
def send_manual_content():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        if not elite_channel:
            return jsonify({"status": "error", "message": "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"})
            
        data = request.get_json()
        if not data or 'content' not in data:
            return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"})
            
        content = data['content']
        if not content.strip():
            return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        current_times = TimeZoneConverter.get_current_times()
        content_with_footer = f"{content}\n\nüïê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_times['kemerovo_time']}"
        
        success = elite_channel.send_to_telegram(content_with_footer)
        return jsonify({"status": "success" if success else "error"})
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.errorhandler(404)
def not_found(error):
    return jsonify({"status": "error", "message": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {str(error)}")
    return jsonify({"status": "error", "message": "Internal server error"}), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–æ–º")
    logger.info("üîê –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω—ã")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config.TELEGRAM_BOT_TOKEN:
        logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    if not config.YANDEX_GPT_API_KEY:
        logger.warning("‚ö†Ô∏è YANDEX_GPT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
    
    app.run(host='0.0.0.0', port=10000, debug=False)
