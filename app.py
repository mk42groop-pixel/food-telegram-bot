import os
import requests
import schedule
import time
import random
from datetime import datetime, timedelta, timezone
from threading import Thread
from flask import Flask
from dotenv import load_dotenv
import json

load_dotenv()
app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL = os.getenv('TELEGRAM_CHANNEL')
YANDEX_API_KEY = os.getenv('YANDEX_GPT_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')

class YandexGPT:
    def __init__(self):
        self.api_key = YANDEX_API_KEY
        self.folder_id = YANDEX_FOLDER_ID
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
    def generate_text(self, prompt, temperature=0.7):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        if not self.api_key or not self.folder_id:
            return "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏ Yandex GPT"
            
        headers = {
            'Authorization': f'Api-Key {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'modelUri': f'gpt://{self.folder_id}/yandexgpt-lite',
            'completionOptions': {
                'stream': False,
                'temperature': temperature,
                'maxTokens': 2000
            },
            'messages': [
                {
                    'role': 'user',
                    'text': prompt
                }
            ]
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data, timeout=30)
            if response.status_code == 200:
                result = response.json()
                return result['result']['alternatives'][0]['message']['text']
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

class SmartFoodChannel:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.channel = TELEGRAM_CHANNEL
        self.timezone_offset = 7
        self.content_themes = self.get_weekly_themes()
        self.gpt = YandexGPT()
        
    def get_kemerovo_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ (UTC+7)"""
        utc_time = datetime.now(timezone.utc)
        kemerovo_time = utc_time + timedelta(hours=self.timezone_offset)
        return kemerovo_time
    
    def get_weekly_themes(self):
        return {
            0: "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏",
            1: "üíº –û–±–µ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã", 
            2: "‚ö° –£–∂–∏–Ω—ã –∑–∞ 20 –º–∏–Ω—É—Ç",
            3: "üîç –†–∞–∑–±–æ—Ä –º–∏—Ñ–æ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏",
            4: "üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
            5: "üéØ –°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã",
            6: "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
        }
    
    def get_daily_content(self, meal_type):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        kemerovo_time = self.get_kemerovo_time()
        weekday = kemerovo_time.weekday()
        theme = self.content_themes[weekday]
        
        content_generators = {
            '–∑–∞–≤—Ç—Ä–∞–∫': self.generate_breakfast_content,
            '–æ–±–µ–¥': self.generate_lunch_content,
            '—É–∂–∏–Ω': self.generate_dinner_content,
            '–ø–µ—Ä–µ–∫—É—Å': self.generate_snack_content,
            '–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥': self.generate_nutritionist_advice
        }
        
        content = content_generators[meal_type](weekday)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–∂–∏–Ω–∞
        if meal_type == '—É–∂–∏–Ω':
            entertainment = self.get_daily_entertainment(weekday)
            content += f"\n\nüé≠ –í–ï–ß–ï–†–ù–ò–ô –ë–õ–û–ö\n{entertainment}"
            
        return content
    
    def generate_breakfast_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        themes = {
            0: "–±—ã—Å—Ç—Ä—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏",
            1: "–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è", 
            2: "–ª–µ–≥–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
            3: "–Ω–µ–æ–±—ã—á–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è–º–∏",
            4: "–±—é–¥–∂–µ—Ç–Ω—ã–π, –Ω–æ —Å—ã—Ç–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
            5: "–æ—Å–æ–±–µ–Ω–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
            6: "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"
        }
        
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ –¥–ª—è {themes[weekday]}. 
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:
        üç≥ –ù–ê–ó–í–ê–ù–ò–ï –ë–õ–Æ–î–ê (—Å —ç–º–æ–¥–∑–∏)
        
        ü•ó –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
        ‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
        
        üë®‚Äçüç≥ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï (—É–∫–∞–∂–∏ –≤—Ä–µ–º—è):
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        3. –®–∞–≥ 3
        
        üìä –ö–ë–ñ–£: –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—å–∑–∞
        
        –†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–º–∞.
        –ò—Å–ø–æ–ª—å–∑—É–π –≤–∫—É—Å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.
        """
        
        gpt_response = self.gpt.generate_text(prompt)
        return f"üåÖ –ó–ê–í–¢–†–ê–ö –î–ù–Ø\n\n{gpt_response}"
    
    def generate_lunch_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–µ–¥–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        themes = {
            0: "–±—ã—Å—Ç—Ä—ã–π –æ–±–µ–¥ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
            1: "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–µ–¥ –¥–ª—è –æ—Ñ–∏—Å–∞", 
            2: "–ª–µ–≥–∫–∏–π, –Ω–æ —Å—ã—Ç–Ω—ã–π –æ–±–µ–¥",
            3: "–æ–±–µ–¥ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏",
            4: "—ç–∫–æ–Ω–æ–º–Ω—ã–π, –Ω–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –æ–±–µ–¥",
            5: "–æ—Å–æ–±–µ–Ω–Ω—ã–π –æ–±–µ–¥ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö",
            6: "—Å–µ–º–µ–π–Ω—ã–π –≤–æ—Å–∫—Ä–µ—Å–Ω—ã–π –æ–±–µ–¥"
        }
        
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ –¥–ª—è {themes[weekday]}. 
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:
        üç≤ –ù–ê–ó–í–ê–ù–ò–ï –ë–õ–Æ–î–ê (—Å —ç–º–æ–¥–∑–∏)
        
        ü•ó –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
        ‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
        
        üë®‚Äçüç≥ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï (—É–∫–∞–∂–∏ –≤—Ä–µ–º—è):
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        3. –®–∞–≥ 3
        
        üìä –ö–ë–ñ–£: –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
        
        –ë–ª—é–¥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Å—ã—Ç–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.
        –î–æ–±–∞–≤—å —Å–æ–≤–µ—Ç –ø–æ —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∑–∞–º–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
        """
        
        gpt_response = self.gpt.generate_text(prompt)
        return f"üçΩÔ∏è –û–ë–ï–î –î–ù–Ø\n\n{gpt_response}"
    
    def generate_dinner_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–∏–Ω–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        themes = {
            0: "–ª–µ–≥–∫–∏–π —É–∂–∏–Ω –ø–æ—Å–ª–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
            1: "–±—ã—Å—Ç—Ä—ã–π —É–∂–∏–Ω –¥–ª—è –≤–µ—á–µ—Ä–∞ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã", 
            2: "–ø–æ–ª–µ–∑–Ω—ã–π —É–∂–∏–Ω –∑–∞ 20 –º–∏–Ω—É—Ç",
            3: "—É–∂–∏–Ω, —Ä–∞–∑–≤–µ–Ω—á–∏–≤–∞—é—â–∏–π –º–∏—Ñ—ã –æ –ø–∏—Ç–∞–Ω–∏–∏",
            4: "–±—é–¥–∂–µ—Ç–Ω—ã–π, –Ω–æ –≤–∫—É—Å–Ω—ã–π —É–∂–∏–Ω",
            5: "–æ—Å–æ–±–µ–Ω–Ω—ã–π —É–∂–∏–Ω –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö",
            6: "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω"
        }
        
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ –¥–ª—è {themes[weekday]}. 
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:
        üçΩÔ∏è –ù–ê–ó–í–ê–ù–ò–ï –ë–õ–Æ–î–ê (—Å —ç–º–æ–¥–∑–∏)
        
        ü•ó –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
        ‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
        
        üë®‚Äçüç≥ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï (—É–∫–∞–∂–∏ –≤—Ä–µ–º—è, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–æ 30 –º–∏–Ω—É—Ç):
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        3. –®–∞–≥ 3
        
        üìä –ö–ë–ñ–£: –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
        
        –£–∂–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–∏–º, –Ω–æ —Å—ã—Ç–Ω—ã–º, —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à–µ–º—É —Å–Ω—É.
        –î–æ–±–∞–≤—å —Å–æ–≤–µ—Ç –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –∏–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–º–∏ —Ä–∏—Ç—É–∞–ª–∞–º–∏.
        """
        
        gpt_response = self.gpt.generate_text(prompt)
        return f"üåô –£–ñ–ò–ù –î–ù–Ø\n\n{gpt_response}"
    
    def generate_snack_content(self, weekday):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫—É—Å–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–µ–∑–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—É—Å–∞ –Ω–∞ {['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][weekday]}. 
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:
        ü•ú –ù–ê–ó–í–ê–ù–ò–ï –ü–ï–†–ï–ö–£–°–ê (—Å —ç–º–æ–¥–∑–∏)
        
        ü•ó –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
        ‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
        
        üë®‚Äçüç≥ –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ï (—É–∫–∞–∂–∏ –≤—Ä–µ–º—è, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º):
        1. –®–∞–≥ 1
        2. –®–∞–≥ 2
        3. –®–∞–≥ 3
        
        üìä –ö–ë–ñ–£: –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
        
        –ü–µ—Ä–µ–∫—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º, –±—ã—Å—Ç—Ä—ã–º –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ (–¥–æ 10 –º–∏–Ω—É—Ç) 
        –∏ –¥–∞–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ —Ç—è–∂–µ—Å—Ç–∏.
        –ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–∞–¥–∫–æ–≥–æ –∏ —Å–æ–ª–µ–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—É—Å–∞.
        """
        
        gpt_response = self.gpt.generate_text(prompt)
        return f"‚òï –ü–ï–†–ï–ö–£–° –î–ù–Ø\n\n{gpt_response}"
    
    def generate_nutritionist_advice(self, weekday):
        """–°–æ–≤–µ—Ç—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        topics = {
            0: "–±—ã—Å—Ç—Ä—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤ –∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞",
            1: "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–µ–¥–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
            2: "–ª–µ–≥–∫–∏—Ö —É–∂–∏–Ω–æ–≤ –∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è",
            3: "—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –º–∏—Ñ–æ–≤ –æ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏",
            4: "—ç–∫–æ–Ω–æ–º–Ω–æ–≥–æ –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è",
            5: "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–∏—Ç–∞–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏",
            6: "—Å–µ–º–µ–π–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"
        }
        
        prompt = f"""
        –ù–∞–ø–∏—à–∏ —Å–æ–≤–µ—Ç –æ—Ç –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º –Ω–∞ —Ç–µ–º—É {topics[weekday]}.
        
        –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–∏–π:
        üíé –°–û–í–ï–¢ –ù–£–¢–†–ò–¶–ò–û–õ–û–ì–ê
        
        üë®‚Äç‚öïÔ∏è [–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ–≤–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞]
        
        üìö –ù–ê–£–ß–ù–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï: [–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç]
        
        üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –°–û–í–ï–¢: [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è]
        
        –¢–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.
        –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
        –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ª–µ–≥–∫–æ –ø—Ä–∏–º–µ–Ω–∏–º—ã–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.
        """
        
        gpt_response = self.gpt.generate_text(prompt, temperature=0.8)
        return f"{gpt_response}\n\nüåü –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 40-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º"
    
    def get_daily_entertainment(self, weekday):
        """–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ Yandex GPT"""
        day_names = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        themes = {
            0: "–∏–¥–µ–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —É–∂–∏–Ω–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –∫—É—Ö–Ω–∏",
            1: "–∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –±–ª—é–¥–∞–º–∏", 
            2: "—Å–æ–≤–µ—Ç—ã –ø–æ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—é —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã",
            3: "—Ä–∞–∑–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∏—Ñ–æ–≤ –æ –≤–µ—á–µ—Ä–Ω–µ–º –ø–∏—Ç–∞–Ω–∏–∏",
            4: "–∏–¥–µ–∏ –¥–ª—è –ø—è—Ç–Ω–∏—á–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞ –∏ —Ä–µ–ª–∞–∫—Å–∞ –ø–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏",
            5: "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏",
            6: "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è"
        }
        
        prompt = f"""
        –°–æ–∑–¥–∞–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {day_names[weekday]} –Ω–∞ —Ç–µ–º—É: {themes[weekday]}.
        
        –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
        - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–∏—Ç–∞–Ω–∏–∏
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ª–∞–π—Ñ—Ö–∞–∫ –¥–ª—è –∫—É—Ö–Ω–∏ –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏—è
        - –í–æ–ø—Ä–æ—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
        - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ñ—Ä–∞–∑—É
        
        –°—Ç–∏–ª—å: –ª–µ–≥–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
        –î–ª–∏–Ω–∞: –ø—Ä–∏–º–µ—Ä–Ω–æ 150-200 —Å–ª–æ–≤.
        """
        
        gpt_response = self.gpt.generate_text(prompt, temperature=0.9)
        return gpt_response
    
    def send_to_telegram(self, message):
        if not self.token or not self.channel:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª!")
            return False
            
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.channel,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                kemerovo_time = self.get_kemerovo_time()
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {kemerovo_time.strftime('%H:%M')} (–ö–µ–º–µ—Ä–æ–≤–æ)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å –ø–æ –∫–µ–º–µ—Ä–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        # –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–õ–Ø –ö–ï–ú–ï–†–û–í–û (UTC+7)
        schedule.every().day.at("09:00").do(lambda: self.publish_meal('–∑–∞–≤—Ç—Ä–∞–∫'))
        schedule.every().day.at("13:00").do(lambda: self.publish_meal('–æ–±–µ–¥'))
        schedule.every().day.at("16:00").do(lambda: self.publish_meal('–ø–µ—Ä–µ–∫—É—Å'))
        schedule.every().day.at("19:00").do(lambda: self.publish_meal('—É–∂–∏–Ω'))
        schedule.every().day.at("21:30").do(lambda: self.publish_meal('–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥'))
        
        kemerovo_time = self.get_kemerovo_time()
        print(f"üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–µ–º–µ—Ä–æ–≤–æ: {kemerovo_time.strftime('%H:%M')}")
        print("ü•û –ó–∞–≤—Ç—Ä–∞–∫: 09:00")
        print("üç≤ –û–±–µ–¥: 13:00") 
        print("ü•ú –ü–µ—Ä–µ–∫—É—Å: 16:00")
        print("üçΩÔ∏è –£–∂–∏–Ω: 19:00 (—Å —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)")
        print("üíé –°–æ–≤–µ—Ç—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞: 21:30")
        print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: Yandex GPT")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")
        self.publish_meal('–∑–∞–≤—Ç—Ä–∞–∫')
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def publish_meal(self, meal_type):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        kemerovo_time = self.get_kemerovo_time()
        print(f"üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {meal_type} —á–µ—Ä–µ–∑ Yandex GPT... ({kemerovo_time.strftime('%H:%M')} –ö–µ–º–µ—Ä–æ–≤–æ)")
        message = self.get_daily_content(meal_type)
        success = self.send_to_telegram(message)
        
        if success:
            print(f"‚úÖ {meal_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {meal_type}")

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
channel = SmartFoodChannel()

# –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_scheduler():
    channel.run_scheduler()

scheduler_thread = Thread(target=start_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

@app.route('/')
def home():
    kemerovo_time = channel.get_kemerovo_time()
    weekday = kemerovo_time.weekday()
    theme = channel.content_themes[weekday]
    return f"""
    <html>
        <body>
            <h1>üç≥ –£–º–Ω–∞—è –ö—É—Ö–Ω—è 4.0 —Å Yandex GPT</h1>
            <p><strong>–ö–µ–º–µ—Ä–æ–≤–æ:</strong> {kemerovo_time.strftime('%H:%M')}</p>
            <p><strong>–°–µ–≥–æ–¥–Ω—è:</strong> {theme}</p>
            <p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:</strong> Yandex GPT</p>
            <p><strong>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
            <ul>
                <li>ü•û –ó–∞–≤—Ç—Ä–∞–∫: 09:00</li>
                <li>üç≤ –û–±–µ–¥: 13:00</li>
                <li>ü•ú –ü–µ—Ä–µ–∫—É—Å: 16:00</li>
                <li>üçΩÔ∏è –£–∂–∏–Ω: 19:00 (—Å —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)</li>
                <li>üíé –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥: 21:30</li>
            </ul>
        </body>
    </html>
    """

@app.route('/test')
def test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    test_message = "üß™ –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n\n–ï—Å–ª–∏ –≤—ã —ç—Ç–æ –≤–∏–¥–∏—Ç–µ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"
    success = channel.send_to_telegram(test_message)
    return f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ' if success else '‚ùå'}"

@app.route('/force/<meal_type>')
def force_publish(meal_type):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    valid_meals = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '—É–∂–∏–Ω', '–ø–µ—Ä–µ–∫—É—Å', '–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥']
    if meal_type not in valid_meals:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(valid_meals)}"
    
    channel.publish_meal(meal_type)
    return f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {meal_type}"

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    kemerovo_time = channel.get_kemerovo_time()
    return {
        "telegram_token_set": bool(TELEGRAM_TOKEN),
        "telegram_channel_set": bool(TELEGRAM_CHANNEL),
        "yandex_gpt_set": bool(YANDEX_API_KEY and YANDEX_FOLDER_ID),
        "kemerovo_time": kemerovo_time.strftime('%Y-%m-%d %H:%M:%S'),
        "status": "active"
    }

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
